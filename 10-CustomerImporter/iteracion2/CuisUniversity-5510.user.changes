

----QUIT----(26 October 2022 08:07:27) CuisUniversity-5510.image priorSource: 2900072!

----STARTUP---- (26 October 2022 08:07:28) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5510.image!


----QUIT----(26 October 2022 08:07:28) CuisUniversity-5510.image priorSource: 7154921!

----STARTUP---- (14 November 2022 18:03:56) as /home/clinux01/Documentos/cuis/CuisUniversity-5510.image!


----End fileIn of /home/clinux01/Documentos/cuis/CustomerImporter-35.st----!
!Behavior method!
for: aConfiguration
	#_coverageTracker75847_ markAsExecuted.
	^ #_coverageTracker75847_
		coverAll:
			{33 to: 46}
		evaluating: [
			(#_coverageTracker75847_
				coverAll:
					{29 to: 31}
				evaluating: [
					(#_coverageTracker75847_
						coverAll:
							{24 to: 27}
						byLiteralOrPseudoVariable: self) new ]) initializeFor:
				(#_coverageTracker75847_
					cover: (48 to: 61)
					declaredAt: (6 to: 19)
					by: aConfiguration) ].! !
!Behavior method!
initializeFor: aConfiguration
	#_coverageTracker75587_ markAsExecuted.
	#_coverageTracker75587_
		cover: (33 to: 45)
		declaredAt: (33 to: 45)
		by:
			(configuration _ #_coverageTracker75587_
				cover: (50 to: 63)
				declaredAt: (16 to: 29)
				by: aConfiguration).
	#_coverageTracker75587_
		cover: (67 to: 72)
		declaredAt: (67 to: 72)
		by:
			(tables _ #_coverageTracker75587_
				coverAll:
					{88 to: 90}
				evaluating: [
					(#_coverageTracker75587_
						coverAll:
							{77 to: 86}
						by: Dictionary) new ]).
	#_coverageTracker75587_
		cover: (94 to: 95)
		declaredAt: (94 to: 95)
		by:
			(id _ #_coverageTracker75587_
				coverAll:
					{100 to: 100}
				byLiteralOrPseudoVariable: 0).! !
!Behavior method!
beginTransaction
	#_coverageTracker75691_ markAsExecuted.! !
!Behavior method!
valueFrom: aReadStream into: aSession
	#_coverageTracker75710_ markAsExecuted.
	^ #_coverageTracker75710_
		coverAll:
			{82 to: 86}
		evaluating: [
			(#_coverageTracker75710_
				coverAll:
					{48 to: 52. 66 to: 70}
				evaluating: [
					(#_coverageTracker75710_
						coverAll:
							{43 to: 46}
						byLiteralOrPseudoVariable: self)
						from:
							(#_coverageTracker75710_
								cover: (54 to: 64)
								declaredAt: (12 to: 22)
								by: aReadStream)
						into:
							(#_coverageTracker75710_
								cover: (72 to: 79)
								declaredAt: (30 to: 37)
								by: aSession) ]) value ].! !
!Behavior method!
from: aReadStream into: aSession
	#_coverageTracker75626_ markAsExecuted.
	^ #_coverageTracker75626_
		coverAll:
			{45 to: 59. 73 to: 77}
		evaluating: [
			(#_coverageTracker75626_
				coverAll:
					{41 to: 43}
				evaluating: [
					(#_coverageTracker75626_
						coverAll:
							{36 to: 39}
						byLiteralOrPseudoVariable: self) new ])
				initializeFrom:
					(#_coverageTracker75626_
						cover: (61 to: 71)
						declaredAt: (7 to: 17)
						by: aReadStream)
				into:
					(#_coverageTracker75626_
						cover: (79 to: 86)
						declaredAt: (25 to: 32)
						by: aSession) ].! !
!Behavior method!
initializeFrom: aReadStream into: aSession
	#_coverageTracker75595_ markAsExecuted.
	#_coverageTracker75595_
		cover: (45 to: 51)
		declaredAt: (45 to: 51)
		by:
			(session _ #_coverageTracker75595_
				cover: (56 to: 63)
				declaredAt: (35 to: 42)
				by: aSession).
	#_coverageTracker75595_
		cover: (67 to: 76)
		declaredAt: (67 to: 76)
		by:
			(readStream _ #_coverageTracker75595_
				cover: (81 to: 91)
				declaredAt: (17 to: 27)
				by: aReadStream).! !
!Behavior method!
value
	"
	self importCustomers
	"
	| newCustomer line |
	#_coverageTracker75753_ markAsExecuted.
	#_coverageTracker75753_
		cover: (60 to: 63)
		declaredAt: (51 to: 54)
		by:
			(line _ #_coverageTracker75753_
				coverAll:
					{79 to: 86}
				evaluating: [
					(#_coverageTracker75753_
						cover: (68 to: 77)
						declaredAt: (68 to: 77)
						by: readStream) nextLine ]).
	#_coverageTracker75753_
		coverAll:
			{106 to: 115}
		evaluating: [
			[
			#_coverageTracker75753_
				coverAll:
					{97 to: 102}
				evaluating: [
					(#_coverageTracker75753_
						cover: (92 to: 95)
						declaredAt: (51 to: 54)
						by: line) notNil ]] whileTrue: [
				#_coverageTracker75753_
					coverAll:
						{144 to: 150}
					evaluating: [
						(#_coverageTracker75753_
							coverAll:
								{127 to: 137}
							evaluating: [
								(#_coverageTracker75753_
									cover: (122 to: 125)
									declaredAt: (51 to: 54)
									by: line) beginsWith:
									(#_coverageTracker75753_
										coverAll:
											{139 to: 141}
										byLiteralOrPseudoVariable: 'C') ]) ifTrue: [ | customerData |
							#_coverageTracker75753_
								cover: (174 to: 185)
								declaredAt: (156 to: 167)
								by:
									(customerData _ #_coverageTracker75753_
										coverAll:
											{195 to: 205}
										evaluating: [
											(#_coverageTracker75753_
												cover: (190 to: 193)
												declaredAt: (51 to: 54)
												by: line) findTokens:
												(#_coverageTracker75753_
													coverAll:
														{207 to: 208}
													byLiteralOrPseudoVariable: $,) ]).
							#_coverageTracker75753_
								cover: (214 to: 224)
								declaredAt: (39 to: 49)
								by:
									(newCustomer _ #_coverageTracker75753_
										coverAll:
											{238 to: 240}
										evaluating: [
											(#_coverageTracker75753_
												coverAll:
													{229 to: 236}
												by: Customer) new ]).
							#_coverageTracker75753_
								coverAll:
									{258 to: 267}
								evaluating: [
									(#_coverageTracker75753_
										cover: (246 to: 256)
										declaredAt: (39 to: 49)
										by: newCustomer) firstName:
										(#_coverageTracker75753_
											coverAll:
												{282 to: 287}
											evaluating: [
												(#_coverageTracker75753_
													cover: (269 to: 280)
													declaredAt: (156 to: 167)
													by: customerData) second ]) ].
							#_coverageTracker75753_
								coverAll:
									{305 to: 313}
								evaluating: [
									(#_coverageTracker75753_
										cover: (293 to: 303)
										declaredAt: (39 to: 49)
										by: newCustomer) lastName:
										(#_coverageTracker75753_
											coverAll:
												{328 to: 332}
											evaluating: [
												(#_coverageTracker75753_
													cover: (315 to: 326)
													declaredAt: (156 to: 167)
													by: customerData) third ]) ].
							#_coverageTracker75753_
								coverAll:
									{350 to: 368}
								evaluating: [
									(#_coverageTracker75753_
										cover: (338 to: 348)
										declaredAt: (39 to: 49)
										by: newCustomer) identificationType:
										(#_coverageTracker75753_
											coverAll:
												{383 to: 388}
											evaluating: [
												(#_coverageTracker75753_
													cover: (370 to: 381)
													declaredAt: (156 to: 167)
													by: customerData) fourth ]) ].
							#_coverageTracker75753_
								coverAll:
									{406 to: 426}
								evaluating: [
									(#_coverageTracker75753_
										cover: (394 to: 404)
										declaredAt: (39 to: 49)
										by: newCustomer) identificationNumber:
										(#_coverageTracker75753_
											coverAll:
												{441 to: 445}
											evaluating: [
												(#_coverageTracker75753_
													cover: (428 to: 439)
													declaredAt: (156 to: 167)
													by: customerData) fifth ]) ].
							#_coverageTracker75753_
								coverAll:
									{459 to: 466}
								evaluating: [
									(#_coverageTracker75753_
										cover: (451 to: 457)
										declaredAt: (451 to: 457)
										by: session) persist:
										(#_coverageTracker75753_
											cover: (468 to: 478)
											declaredAt: (39 to: 49)
											by: newCustomer) ]]].
				#_coverageTracker75753_
					coverAll:
						{509 to: 515}
					evaluating: [
						(#_coverageTracker75753_
							coverAll:
								{492 to: 502}
							evaluating: [
								(#_coverageTracker75753_
									cover: (487 to: 490)
									declaredAt: (51 to: 54)
									by: line) beginsWith:
									(#_coverageTracker75753_
										coverAll:
											{504 to: 506}
										byLiteralOrPseudoVariable: 'A') ]) ifTrue: [ | addressData newAddress |
							#_coverageTracker75753_
								cover: (549 to: 559)
								declaredAt: (521 to: 531)
								by:
									(addressData _ #_coverageTracker75753_
										coverAll:
											{569 to: 579}
										evaluating: [
											(#_coverageTracker75753_
												cover: (564 to: 567)
												declaredAt: (51 to: 54)
												by: line) findTokens:
												(#_coverageTracker75753_
													coverAll:
														{581 to: 582}
													byLiteralOrPseudoVariable: $,) ]).
							#_coverageTracker75753_
								cover: (588 to: 597)
								declaredAt: (533 to: 542)
								by:
									(newAddress _ #_coverageTracker75753_
										coverAll:
											{610 to: 612}
										evaluating: [
											(#_coverageTracker75753_
												coverAll:
													{602 to: 608}
												by: Address) new ]).
							#_coverageTracker75753_
								coverAll:
									{630 to: 640}
								evaluating: [
									(#_coverageTracker75753_
										cover: (618 to: 628)
										declaredAt: (39 to: 49)
										by: newCustomer) addAddress:
										(#_coverageTracker75753_
											cover: (642 to: 651)
											declaredAt: (533 to: 542)
											by: newAddress) ].
							#_coverageTracker75753_
								coverAll:
									{668 to: 678}
								evaluating: [
									(#_coverageTracker75753_
										cover: (657 to: 666)
										declaredAt: (533 to: 542)
										by: newAddress) streetName:
										(#_coverageTracker75753_
											coverAll:
												{692 to: 697}
											evaluating: [
												(#_coverageTracker75753_
													cover: (680 to: 690)
													declaredAt: (521 to: 531)
													by: addressData) second ]) ].
							#_coverageTracker75753_
								coverAll:
									{714 to: 726}
								evaluating: [
									(#_coverageTracker75753_
										cover: (703 to: 712)
										declaredAt: (533 to: 542)
										by: newAddress) streetNumber:
										(#_coverageTracker75753_
											coverAll:
												{746 to: 753}
											evaluating: [
												(#_coverageTracker75753_
													coverAll:
														{740 to: 744}
													evaluating: [
														(#_coverageTracker75753_
															cover: (728 to: 738)
															declaredAt: (521 to: 531)
															by: addressData) third ]) asNumber ]) ].
							#_coverageTracker75753_
								coverAll:
									{771 to: 775}
								evaluating: [
									(#_coverageTracker75753_
										cover: (760 to: 769)
										declaredAt: (533 to: 542)
										by: newAddress) town:
										(#_coverageTracker75753_
											coverAll:
												{789 to: 794}
											evaluating: [
												(#_coverageTracker75753_
													cover: (777 to: 787)
													declaredAt: (521 to: 531)
													by: addressData) fourth ]) ].
							#_coverageTracker75753_
								coverAll:
									{811 to: 818}
								evaluating: [
									(#_coverageTracker75753_
										cover: (800 to: 809)
										declaredAt: (533 to: 542)
										by: newAddress) zipCode:
										(#_coverageTracker75753_
											coverAll:
												{838 to: 845}
											evaluating: [
												(#_coverageTracker75753_
													coverAll:
														{832 to: 836}
													evaluating: [
														(#_coverageTracker75753_
															cover: (820 to: 830)
															declaredAt: (521 to: 531)
															by: addressData) fifth ]) asNumber ]) ].
							#_coverageTracker75753_
								coverAll:
									{863 to: 871}
								evaluating: [
									(#_coverageTracker75753_
										cover: (852 to: 861)
										declaredAt: (533 to: 542)
										by: newAddress) province:
										(#_coverageTracker75753_
											coverAll:
												{885 to: 889}
											evaluating: [
												(#_coverageTracker75753_
													cover: (873 to: 883)
													declaredAt: (521 to: 531)
													by: addressData) sixth ]) ]]].
				#_coverageTracker75753_
					cover: (897 to: 900)
					declaredAt: (51 to: 54)
					by:
						(line _ #_coverageTracker75753_
							coverAll:
								{916 to: 923}
							evaluating: [
								(#_coverageTracker75753_
									cover: (905 to: 914)
									declaredAt: (68 to: 77)
									by: readStream) nextLine ]) ]].! !
!Behavior method!
initialize
	#_coverageTracker75695_ markAsExecuted.
	#_coverageTracker75695_
		coverAll:
			{20 to: 29}
		evaluating: [ super initialize ].
	#_coverageTracker75695_
		cover: (33 to: 41)
		declaredAt: (33 to: 41)
		by:
			(addresses _ #_coverageTracker75695_
				coverAll:
					{64 to: 66}
				evaluating: [
					(#_coverageTracker75695_
						coverAll:
							{46 to: 62}
						by: OrderedCollection) new ]).! !
!Behavior method!
firstName: aName
	#_coverageTracker75693_ markAsExecuted.
	#_coverageTracker75693_
		cover: (20 to: 28)
		declaredAt: (20 to: 28)
		by:
			(firstName _ #_coverageTracker75693_
				cover: (33 to: 37)
				declaredAt: (12 to: 16)
				by: aName).! !
!Behavior method!
lastName: aLastName
	#_coverageTracker75593_ markAsExecuted.
	#_coverageTracker75593_
		cover: (23 to: 30)
		declaredAt: (23 to: 30)
		by:
			(lastName _ #_coverageTracker75593_
				cover: (35 to: 43)
				declaredAt: (11 to: 19)
				by: aLastName).! !
!Behavior method!
identificationType: anIdentificationType
	#_coverageTracker75728_ markAsExecuted.
	#_coverageTracker75728_
		cover: (44 to: 61)
		declaredAt: (44 to: 61)
		by:
			(identificationType _ #_coverageTracker75728_
				cover: (66 to: 85)
				declaredAt: (21 to: 40)
				by: anIdentificationType).! !
!Behavior method!
identificationNumber: anIdentificationNumber
	#_coverageTracker75856_ markAsExecuted.
	#_coverageTracker75856_
		cover: (48 to: 67)
		declaredAt: (48 to: 67)
		by:
			(identificationNumber _ #_coverageTracker75856_
				cover: (72 to: 93)
				declaredAt: (23 to: 44)
				by: anIdentificationNumber).! !
!Behavior method!
persist: anObject
	| table |
	#_coverageTracker75651_ markAsExecuted.
	#_coverageTracker75651_
		coverAll:
			{38 to: 42}
		evaluating: [
			(#_coverageTracker75651_
				coverAll:
					{33 to: 36}
				byLiteralOrPseudoVariable: self) delay ].
	#_coverageTracker75651_
		cover: (46 to: 50)
		declaredAt: (23 to: 27)
		by:
			(table _ #_coverageTracker75651_
				coverAll:
					{62 to: 64. 81 to: 92}
				evaluating: [
					(#_coverageTracker75651_
						cover: (55 to: 60)
						declaredAt: (55 to: 60)
						by: tables)
						at:
							(#_coverageTracker75651_
								coverAll:
									{75 to: 79}
								evaluating: [
									(#_coverageTracker75651_
										cover: (66 to: 73)
										declaredAt: (10 to: 17)
										by: anObject) class ])
						ifAbsentPut: [
							#_coverageTracker75651_
								coverAll:
									{100 to: 102}
								evaluating: [
									(#_coverageTracker75651_
										coverAll:
											{96 to: 98}
										by: Set) new ]]]).
	#_coverageTracker75651_
		coverAll:
			{114 to: 124}
		evaluating: [
			(#_coverageTracker75651_
				coverAll:
					{109 to: 112}
				byLiteralOrPseudoVariable: self) defineIdOf:
				(#_coverageTracker75651_
					cover: (126 to: 133)
					declaredAt: (10 to: 17)
					by: anObject) ].
	#_coverageTracker75651_
		coverAll:
			{143 to: 146}
		evaluating: [
			(#_coverageTracker75651_
				cover: (137 to: 141)
				declaredAt: (23 to: 27)
				by: table) add:
				(#_coverageTracker75651_
					cover: (148 to: 155)
					declaredAt: (10 to: 17)
					by: anObject) ].
	#_coverageTracker75651_
		coverAll:
			{190 to: 196}
		evaluating: [
			(#_coverageTracker75651_
				coverAll:
					{170 to: 178}
				evaluating: [
					(#_coverageTracker75651_
						cover: (161 to: 168)
						declaredAt: (10 to: 17)
						by: anObject) isKindOf:
						(#_coverageTracker75651_
							coverAll:
								{180 to: 187}
							by: Customer) ]) ifTrue: [
				#_coverageTracker75651_
					coverAll:
						{205 to: 223}
					evaluating: [
						(#_coverageTracker75651_
							coverAll:
								{200 to: 203}
							byLiteralOrPseudoVariable: self) persistAddressesOf:
							(#_coverageTracker75651_
								cover: (225 to: 232)
								declaredAt: (10 to: 17)
								by: anObject) ]]].! !
!Behavior method!
delay
	#_coverageTracker75824_ markAsExecuted.
	#_coverageTracker75824_
		coverAll:
			{38 to: 41}
		evaluating: [
			(#_coverageTracker75824_
				coverAll:
					{16 to: 31}
				evaluating: [
					(#_coverageTracker75824_
						coverAll:
							{10 to: 14}
						by: Delay) forMilliseconds:
						(#_coverageTracker75824_
							coverAll:
								{33 to: 35}
							byLiteralOrPseudoVariable: 100) ]) wait ].! !
!Behavior method!
defineIdOf: anObject
	#_coverageTracker75818_ markAsExecuted.
	#_coverageTracker75818_
		coverAll:
			{33 to: 45. 52 to: 55}
		evaluating: [
			(#_coverageTracker75818_
				cover: (24 to: 31)
				declaredAt: (13 to: 20)
				by: anObject)
				instVarNamed:
					(#_coverageTracker75818_
						coverAll:
							{47 to: 50}
						byLiteralOrPseudoVariable: 'id')
				put:
					(#_coverageTracker75818_
						coverAll:
							{63 to: 71}
						evaluating: [
							(#_coverageTracker75818_
								coverAll:
									{58 to: 61}
								byLiteralOrPseudoVariable: self) newIdFor:
								(#_coverageTracker75818_
									cover: (73 to: 80)
									declaredAt: (13 to: 20)
									by: anObject) ]) ].! !
!Behavior method!
newIdFor: anObject
	#_coverageTracker75616_ markAsExecuted.
	#_coverageTracker75616_
		cover: (28 to: 29)
		declaredAt: (22 to: 23)
		by:
			(id _ #_coverageTracker75616_
				coverAll:
					{31 to: 31}
				evaluating: [
					(#_coverageTracker75616_
						cover: (22 to: 23)
						declaredAt: (22 to: 23)
						by: id) +
						(#_coverageTracker75616_
							coverAll:
								{33 to: 33}
							byLiteralOrPseudoVariable: 1) ]).
	^ #_coverageTracker75616_
		cover: (38 to: 39)
		declaredAt: (22 to: 23)
		by: id.! !
!Behavior method!
persistAddressesOf: anObjectWithAddresses
	#_coverageTracker75643_ markAsExecuted.
	#_coverageTracker75643_
		coverAll:
			{77 to: 79}
		evaluating: [
			(#_coverageTracker75643_
				coverAll:
					{67 to: 75}
				evaluating: [
					(#_coverageTracker75643_
						cover: (45 to: 65)
						declaredAt: (21 to: 41)
						by: anObjectWithAddresses) addresses ]) do: [ :anAddress |
				#_coverageTracker75643_
					coverAll:
						{101 to: 108}
					evaluating: [
						(#_coverageTracker75643_
							coverAll:
								{96 to: 99}
							byLiteralOrPseudoVariable: self) persist:
							(#_coverageTracker75643_
								cover: (110 to: 118)
								declaredAt: (84 to: 92)
								by: anAddress) ]]].! !
!Behavior method!
addresses
	#_coverageTracker75614_ markAsExecuted.
	^ #_coverageTracker75614_
		cover: (15 to: 23)
		declaredAt: (15 to: 23)
		by: addresses.! !
!Behavior method!
addAddress: anAddress
	#_coverageTracker75610_ markAsExecuted.
	#_coverageTracker75610_
		coverAll:
			{35 to: 38}
		evaluating: [
			(#_coverageTracker75610_
				cover: (25 to: 33)
				declaredAt: (25 to: 33)
				by: addresses) add:
				(#_coverageTracker75610_
					cover: (40 to: 48)
					declaredAt: (13 to: 21)
					by: anAddress) ].! !
!Behavior method!
streetName: aStreetName
	#_coverageTracker75641_ markAsExecuted.
	#_coverageTracker75641_
		cover: (27 to: 36)
		declaredAt: (27 to: 36)
		by:
			(streetName _ #_coverageTracker75641_
				cover: (41 to: 51)
				declaredAt: (13 to: 23)
				by: aStreetName).! !
!Behavior method!
streetNumber: aStreetNumber
	#_coverageTracker75853_ markAsExecuted.
	#_coverageTracker75853_
		cover: (31 to: 42)
		declaredAt: (31 to: 42)
		by:
			(streetNumber _ #_coverageTracker75853_
				cover: (47 to: 59)
				declaredAt: (15 to: 27)
				by: aStreetNumber).! !
!Behavior method!
town: aTown
	#_coverageTracker75699_ markAsExecuted.
	#_coverageTracker75699_
		cover: (15 to: 18)
		declaredAt: (15 to: 18)
		by:
			(town _ #_coverageTracker75699_
				cover: (23 to: 27)
				declaredAt: (7 to: 11)
				by: aTown).! !
!Behavior method!
zipCode: aZipCode
	#_coverageTracker75668_ markAsExecuted.
	#_coverageTracker75668_
		cover: (21 to: 27)
		declaredAt: (21 to: 27)
		by:
			(zipCode _ #_coverageTracker75668_
				cover: (32 to: 39)
				declaredAt: (10 to: 17)
				by: aZipCode).! !
!Behavior method!
province: aProvince
	#_coverageTracker75737_ markAsExecuted.
	#_coverageTracker75737_
		cover: (23 to: 30)
		declaredAt: (23 to: 30)
		by:
			(province _ #_coverageTracker75737_
				cover: (35 to: 43)
				declaredAt: (11 to: 19)
				by: aProvince).! !
!Behavior method!
selectAllOfType: aType
	#_coverageTracker75705_ markAsExecuted.
	#_coverageTracker75705_
		coverAll:
			{31 to: 35}
		evaluating: [
			(#_coverageTracker75705_
				coverAll:
					{26 to: 29}
				byLiteralOrPseudoVariable: self) delay ].
	^ #_coverageTracker75705_
		coverAll:
			{68 to: 71}
		evaluating: [
			(#_coverageTracker75705_
				coverAll:
					{46 to: 59}
				evaluating: [
					(#_coverageTracker75705_
						coverAll:
							{41 to: 44}
						byLiteralOrPseudoVariable: self) objectsOfType:
						(#_coverageTracker75705_
							cover: (61 to: 65)
							declaredAt: (18 to: 22)
							by: aType) ]) copy ].! !
!Behavior method!
objectsOfType: aType
	#_coverageTracker75701_ markAsExecuted.
	^ #_coverageTracker75701_
		coverAll:
			{33 to: 35. 43 to: 51}
		evaluating: [
			(#_coverageTracker75701_
				cover: (26 to: 31)
				declaredAt: (26 to: 31)
				by: tables)
				at:
					(#_coverageTracker75701_
						cover: (37 to: 41)
						declaredAt: (16 to: 20)
						by: aType)
				ifAbsent: [
					#_coverageTracker75701_
						coverAll:
							{55 to: 57}
						byLiteralOrPseudoVariable: #() ]].! !
!Behavior method!
select: aCondition ofType: aType
	#_coverageTracker75860_ markAsExecuted.
	#_coverageTracker75860_
		coverAll:
			{41 to: 45}
		evaluating: [
			(#_coverageTracker75860_
				coverAll:
					{36 to: 39}
				byLiteralOrPseudoVariable: self) delay ].
	^ #_coverageTracker75860_
		coverAll:
			{78 to: 84}
		evaluating: [
			(#_coverageTracker75860_
				coverAll:
					{56 to: 69}
				evaluating: [
					(#_coverageTracker75860_
						coverAll:
							{51 to: 54}
						byLiteralOrPseudoVariable: self) objectsOfType:
						(#_coverageTracker75860_
							cover: (71 to: 75)
							declaredAt: (28 to: 32)
							by: aType) ]) select:
				(#_coverageTracker75860_
					cover: (86 to: 95)
					declaredAt: (9 to: 18)
					by: aCondition) ].! !
!Behavior method!
identificationType
	#_coverageTracker75847_ markAsExecuted.
	^ #_coverageTracker75847_
		cover: (23 to: 40)
		declaredAt: (23 to: 40)
		by: identificationType.! !
!Behavior method!
identificationNumber
	#_coverageTracker75851_ markAsExecuted.
	^ #_coverageTracker75851_
		cover: (25 to: 44)
		declaredAt: (25 to: 44)
		by: identificationNumber.! !
!Behavior method!
firstName
	#_coverageTracker75858_ markAsExecuted.
	^ #_coverageTracker75858_
		cover: (14 to: 22)
		declaredAt: (14 to: 22)
		by: firstName.! !
!Behavior method!
lastName
	#_coverageTracker75614_ markAsExecuted.
	^ #_coverageTracker75614_
		cover: (13 to: 20)
		declaredAt: (13 to: 20)
		by: lastName.! !
!Behavior method!
addressAt: aStreetName ifNone: aNoneBlock
	#_coverageTracker75724_ markAsExecuted.
	^ #_coverageTracker75724_
		coverAll:
			{56 to: 62. 105 to: 111}
		evaluating: [
			(#_coverageTracker75724_
				cover: (46 to: 54)
				declaredAt: (46 to: 54)
				by: addresses)
				detect: [ :address |
					#_coverageTracker75724_
						coverAll:
							{85 to: 89}
						evaluating: [
							(#_coverageTracker75724_
								cover: (77 to: 83)
								declaredAt: (67 to: 73)
								by: address) isAt:
								(#_coverageTracker75724_
									cover: (91 to: 101)
									declaredAt: (12 to: 22)
									by: aStreetName) ]]
				ifNone:
					(#_coverageTracker75724_
						cover: (113 to: 122)
						declaredAt: (32 to: 41)
						by: aNoneBlock) ].! !
!Behavior method!
isAt: aStreetName
	#_coverageTracker75678_ markAsExecuted.
	^ #_coverageTracker75678_
		coverAll:
			{33 to: 33}
		evaluating: [
			(#_coverageTracker75678_
				cover: (22 to: 31)
				declaredAt: (22 to: 31)
				by: streetName) =
				(#_coverageTracker75678_
					cover: (35 to: 45)
					declaredAt: (7 to: 17)
					by: aStreetName) ].! !
!Behavior method!
streetName
	#_coverageTracker75853_ markAsExecuted.
	^ #_coverageTracker75853_
		cover: (15 to: 24)
		declaredAt: (15 to: 24)
		by: streetName.! !
!Behavior method!
streetNumber
	#_coverageTracker75612_ markAsExecuted.
	^ #_coverageTracker75612_
		cover: (17 to: 28)
		declaredAt: (17 to: 28)
		by: streetNumber.! !
!Behavior method!
town
	#_coverageTracker75822_ markAsExecuted.
	^ #_coverageTracker75822_
		cover: (9 to: 12)
		declaredAt: (9 to: 12)
		by: town.! !
!Behavior method!
zipCode
	#_coverageTracker75666_ markAsExecuted.
	^ #_coverageTracker75666_
		cover: (12 to: 18)
		declaredAt: (12 to: 18)
		by: zipCode.! !
!Behavior method!
province
	#_coverageTracker75697_ markAsExecuted.
	^ #_coverageTracker75697_
		cover: (13 to: 20)
		declaredAt: (13 to: 20)
		by: province.! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 18:05:12'!
PASSED!
!Behavior method!
commit
	#_coverageTracker75731_ markAsExecuted.
	#_coverageTracker75731_
		coverAll:
			{48 to: 50}
		evaluating: [
			(#_coverageTracker75731_
				coverAll:
					{18 to: 20. 31 to: 39}
				evaluating: [
					(#_coverageTracker75731_
						cover: (11 to: 16)
						declaredAt: (11 to: 16)
						by: tables)
						at:
							(#_coverageTracker75731_
								coverAll:
									{22 to: 29}
								by: Customer)
						ifAbsent: [
							#_coverageTracker75731_
								coverAll:
									{42 to: 44}
								byLiteralOrPseudoVariable: #() ]]) do: [ :aCustomer |
				#_coverageTracker75731_
					coverAll:
						{72 to: 90}
					evaluating: [
						(#_coverageTracker75731_
							coverAll:
								{67 to: 70}
							byLiteralOrPseudoVariable: self) persistAddressesOf:
							(#_coverageTracker75731_
								cover: (92 to: 100)
								declaredAt: (55 to: 63)
								by: aCustomer) ]]].! !
!Behavior method!
close
	#_coverageTracker75824_ markAsExecuted.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:06:25' prior: 50555518 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | record |
			record := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:06:49' prior: 50556495 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | record |
			record := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | record newAddress |
			record := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:07:00' prior: 50556527 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [ | record |
		(line beginsWith: 'C') ifTrue: [
			record := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ |  newAddress |
			record := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:07:13' prior: 50556558 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [| record |
		(line beginsWith: 'C') ifTrue: [ 
			record := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ |  newAddress |
			record := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 18:07:14'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:07:32' prior: 50556589 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [| record |
		
		record := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ |  newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 18:07:33'!
PASSED!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'AS 11/14/2022 18:07:41' prior: 50556622 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [ 
		
		record := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ |  newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'AS 11/14/2022 18:07:41'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'AS 11/14/2022 18:08:02' prior: 50556654 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer  |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [ 
		
		record := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ |  newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'AS 11/14/2022 18:08:02'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream record line'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:08:11'!
createRecord

	^ record := line findTokens: $,! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:08:11' prior: 50556692 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer  |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [ 
		
		self createRecord.
		(line beginsWith: 'C') ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ |  newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:08:33'!
isCustomerRecord

	^ line beginsWith: 'C'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:08:33' prior: 50556735 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer  |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [ 
		
		self createRecord.
		(self isCustomerRecord) ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ |  newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:08:59'!
isAddressRecord

	^ line beginsWith: 'A'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:08:59' prior: 50556768 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer  |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [ 
		
		self createRecord.
		(self isCustomerRecord) ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ |  newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'AS 11/14/2022 18:09:57' prior: 50556801 overrides: 16902254!
value

	"
	self importCustomers
	"
	 

	line := readStream nextLine.
	[ line notNil ] whileTrue: [ 
		
		self createRecord.
		(self isCustomerRecord) ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ |  newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'AS 11/14/2022 18:09:57'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream record line newCustomer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:10:04' prior: 50556830 overrides: 16902254!
value

	"
	self importCustomers
	"
	 

	line := readStream nextLine.
	[ line notNil ] whileTrue: [ 
		
		self createRecord.
		(self isCustomerRecord) ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ |  newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 18:10:05'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:10:12'!
importCustomer

	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:10:12' prior: 50556867 overrides: 16902254!
value

	"
	self importCustomers
	"
	 

	line := readStream nextLine.
	[ line notNil ] whileTrue: [ 
		
		self createRecord.
		(self isCustomerRecord) ifTrue: [ 
			self importCustomer ].

		(self isAddressRecord) ifTrue: [ |  newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:10:17' prior: 50556909 overrides: 16902254!
value

	"
	self importCustomers
	"
	 

	line := readStream nextLine.
	[ line notNil ] whileTrue: [ 
		
		self createRecord.
		(self isCustomerRecord) ifTrue: [ self importCustomer ].

		(self isAddressRecord) ifTrue: [ |  newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:10:34'!
importAddress

	|  newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:10:34' prior: 50556931 overrides: 16902254!
value

	"
	self importCustomers
	"
	 

	line := readStream nextLine.
	[ line notNil ] whileTrue: [ 
		
		self createRecord.
		(self isCustomerRecord) ifTrue: [ self importCustomer ].

		(self isAddressRecord) ifTrue: [ self importAddress ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:10:45' prior: 50556965 overrides: 16902254!
value

	line := readStream nextLine.
	[ line notNil ] whileTrue: [ 
		self createRecord.
		(self isCustomerRecord) ifTrue: [ self importCustomer ].
		(self isAddressRecord) ifTrue: [ self importAddress ].
		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 18:10:46'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:10:59' prior: 50556978 overrides: 16902254!
value

	[line := readStream nextLine.
	 line notNil ] whileTrue: [ 
		self createRecord.
		(self isCustomerRecord) ifTrue: [ self importCustomer ].
		(self isAddressRecord) ifTrue: [ self importAddress ].].

	! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 18:11:00'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:11:11'!
hasLineToImport

	line := readStream nextLine.
	 line notNil! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:11:11' prior: 50556992 overrides: 16902254!
value

	[self hasLineToImport ] whileTrue: [ 
		self createRecord.
		(self isCustomerRecord) ifTrue: [ self importCustomer ].
		(self isAddressRecord) ifTrue: [ self importAddress ].].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:11:19' prior: 50557004!
hasLineToImport

	line := readStream nextLine.
	^line notNil! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 18:11:19'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:11:28' prior: 50556897!
importCustomer

	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	session persist: newCustomer! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 18:11:28'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:12:24' prior: 50557010 overrides: 16902254!
value

	[self hasLineToImport ] whileTrue: [ 
		self createRecord.
		(self isCustomerRecord) ifTrue: [ self importCustomer].
		(self isAddressRecord) ifTrue: [ self importAddress].
		].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:12:30'!
importRecord

	(self isCustomerRecord) ifTrue: [ self importCustomer].
		(self isAddressRecord) ifTrue: [ self importAddress]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:12:30' prior: 50557041 overrides: 16902254!
value

	[self hasLineToImport ] whileTrue: [ 
		self createRecord.
		self importRecord.
		].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:12:47' prior: 50557058 overrides: 16902254!
value

	[self hasLineToImport ] whileTrue: [ 
					self createRecord.
					self importRecord.].

	! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 18:12:48'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:13:03' prior: 50557065 overrides: 16902254!
value

	[self hasLineToImport ] whileTrue: [ 
		self createRecord.
		self importRecord.].

	! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 18:13:03'!
PASSED!

----SNAPSHOT----(14 November 2022 18:13:21) CuisUniversity-5510.image priorSource: 7155150!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/14/2022 18:19:48'!
test02ShouldFailImportingInvalidRecordType

	self should: [CustomerImporter from: self invalidData into: session ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: CustomerImporter invalidRecordTypeErrorMessage equals: anError messageText.
							   self assert: 0 equals: (session selectAllOfType: Customer) size].! !

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 18:19:51'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'AS 11/14/2022 18:19:56'!
invalidData
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'test data' stamp: 'AS 11/14/2022 18:20:15' prior: 50557103!
invalidData

	^ReadStream on: ''.! !

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 18:20:16'!
FAILURE!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 18:20:35'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/14/2022 18:20:55' prior: 50557086!
test02ShouldFailImportingInvalidRecordType

	self should: [(CustomerImporter from: self invalidData into: session) value ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: CustomerImporter invalidRecordTypeErrorMessage equals: anError messageText.
							   self assert: 0 equals: (session selectAllOfType: Customer) size].! !

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 18:20:55'!
FAILURE!
!ImportTest methodsFor: 'test data' stamp: 'AS 11/14/2022 18:22:25' prior: 50557107!
invalidData

	^ReadStream on: '
'.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:23:21' prior: 50557050!
importRecord

	(self isCustomerRecord) ifTrue: [ ^self importCustomer].
		(self isAddressRecord) ifTrue: [ ^self importAddress].
		self error: self class invalidRecordTypeErrorMessage.! !

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 18:23:21'!
ERROR!
!CustomerImporter class methodsFor: 'error message' stamp: 'AS 11/14/2022 18:23:29'!
invalidRecordTypeErrorMessage
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'test data' stamp: 'AS 11/14/2022 18:24:09' prior: 50557136!
invalidData

	^ReadStream on: 'X'.! !
!CustomerImporter class methodsFor: 'error message' stamp: 'AS 11/14/2022 18:24:12' prior: 50557153!
invalidRecordTypeErrorMessage
	^'Can not import invalid record type!!'! !

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 18:24:13'!
PASSED!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 18:24:15'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 18:24:16'!
PASSED!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 18:24:16'!
PASSED!

----SNAPSHOT----(14 November 2022 18:24:27) CuisUniversity-5510.image priorSource: 7213837!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 18:25:19'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 18:25:19'!
PASSED!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 18:25:20'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:25:55' prior: 50557141!
importRecord

	(self isCustomerRecord) ifTrue: [ ^self importCustomer].
		(self isAddressRecord) ifTrue: [ ^self importAddress].
		! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 18:25:56'!
PASSED!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 18:25:56'!
FAILURE!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 18:25:56'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:26:27' prior: 50557193!
importRecord

	(self isCustomerRecord) ifTrue: [ ^self importCustomer].
		(self isAddressRecord) ifTrue: [ ^self importAddress].
		self error: self class invalidRecordTypeErrorMessage.
		! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 18:26:28'!
PASSED!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 18:26:28'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/14/2022 18:27:51'!
test03ShouldFailImportingWithRepeatedRecordType

	self should: [(CustomerImporter from: self repeatedRecordTypeData into: session) value ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: CustomerImporter invalidRecordTypeErrorMessage equals: anError messageText.
							   self assert: 0 equals: (session selectAllOfType: Customer) size].! !

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 18:27:52'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'AS 11/14/2022 18:27:58'!
repeatedRecordTypeData
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'test data' stamp: 'AS 11/14/2022 18:28:27' prior: 50557242!
repeatedRecordTypeData
	^ReadStream on: 'CC,Pepe,Sanchez,D,22333444'! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 18:28:30'!
PASSED!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 18:28:31'!
PASSED!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 18:28:31'!
FAILURE!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 18:28:31'!
FAILURE!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 18:28:34'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:29:09' prior: 50556763!
isCustomerRecord

	^record first = 'C'! !

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 18:29:10'!
FAILURE!

^record first = 'C'!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 18:31:21'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 18:31:21'!
PASSED!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 18:31:22'!
PASSED!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 18:31:22'!
PASSED!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 18:31:25'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 18:31:26'!
PASSED!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 18:31:26'!
PASSED!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 18:31:26'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/14/2022 18:32:13'!
test04ShouldFailImportingWithEmptyRecordType

	self should: [(CustomerImporter from: self emptyRecordTypeData into: session) value ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: CustomerImporter invalidEmptyRecordTypeErrorMessage equals: anError messageText.
							   self assert: 0 equals: (session selectAllOfType: Customer) size].! !

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 18:32:17'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'AS 11/14/2022 18:32:21'!
emptyRecordTypeData
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'test data' stamp: 'AS 11/14/2022 18:32:33' prior: 50557321!
emptyRecordTypeData
	^ReadStream on: '
'! !

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 18:32:34'!
ERROR!
!CustomerImporter class methodsFor: 'error message' stamp: 'AS 11/14/2022 18:32:39'!
invalidEmptyRecordTypeErrorMessage
	self shouldBeImplemented.! !
!CustomerImporter class methodsFor: 'error message' stamp: 'AS 11/14/2022 18:32:51' prior: 50557334!
invalidEmptyRecordTypeErrorMessage
	^'Can not import record with empty record type!!'! !

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 18:32:52'!
FAILURE!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 18:33:21'!
FAILURE!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 18:33:34'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:34:42' prior: 50557210!
importRecord

	record ifEmpty: [self error: self class invalidEmptyRecordTypeErrorMessage].
	(self isCustomerRecord) ifTrue: [ ^self importCustomer].
		(self isAddressRecord) ifTrue: [ ^self importAddress].
		self error: self class invalidRecordTypeErrorMessage.
		! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 18:34:44'!
PASSED!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 18:34:44'!
PASSED!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 18:34:45'!
PASSED!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 18:34:45'!
PASSED!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 18:34:48'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 18:34:49'!
PASSED!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 18:34:49'!
PASSED!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 18:34:49'!
PASSED!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 18:34:49'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:35:08'!
assertRecordIsNotEmpty

	^ record ifEmpty: [self error: self class invalidEmptyRecordTypeErrorMessage]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:35:08' prior: 50557357!
importRecord

	self assertRecordIsNotEmpty.
	(self isCustomerRecord) ifTrue: [ ^self importCustomer].
		(self isAddressRecord) ifTrue: [ ^self importAddress].
		self error: self class invalidRecordTypeErrorMessage.
		! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:35:28'!
invalidRecordTypeErrorSignal

	^ self error: self class invalidRecordTypeErrorMessage! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:35:28' prior: 50557404!
importRecord

	self assertRecordIsNotEmpty.
	(self isCustomerRecord) ifTrue: [ ^self importCustomer].
		(self isAddressRecord) ifTrue: [ ^self importAddress].
		self invalidRecordTypeErrorSignal.
		! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:35:47'!
invalidEmptyRecordTypeErrorSignal

	^ self error: self class invalidEmptyRecordTypeErrorMessage! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 18:35:47' prior: 50557397!
assertRecordIsNotEmpty

	^ record ifEmpty: [self invalidEmptyRecordTypeErrorSignal]! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 18:35:49'!
PASSED!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 18:35:50'!
PASSED!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 18:35:50'!
PASSED!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 18:35:50'!
PASSED!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 18:36:00'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 18:36:01'!
PASSED!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 18:36:01'!
PASSED!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 18:36:01'!
PASSED!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 18:36:01'!
PASSED!

----SNAPSHOT----(14 November 2022 18:36:08) CuisUniversity-5510.image priorSource: 7216955!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/14/2022 18:59:50'!
test05ShouldFailImportingIfThereAreLessThanExpectedNumberOfRecords

	self should: [(CustomerImporter from: self lessThanExpectedNumberOfRecordsData into: session) value ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: CustomerImporter differentThanExpectedNumberOfRecordsErrorMessage equals: anError messageText.
							   self assert: 0 equals: (session selectAllOfType: Customer) size].! !

!testRun: #ImportTest #test05ShouldFailImportingIfThereAreLessThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 18:59:52'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'AS 11/14/2022 18:59:57'!
lessThanExpectedNumberOfRecordsData
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'test data' stamp: 'AS 11/14/2022 19:00:20' prior: 50557492!
lessThanExpectedNumberOfRecordsData
	^ ReadStream on:
'C,Pepe,Sanchez,D'! !

!testRun: #ImportTest #test05ShouldFailImportingIfThereAreLessThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:00:22'!
ERROR!
!CustomerImporter class methodsFor: 'error message' stamp: 'AS 11/14/2022 19:00:29'!
differentThanExpectedNumberOfRecordsErrorMessage
	self shouldBeImplemented.! !
!CustomerImporter class methodsFor: 'error message' stamp: 'AS 11/14/2022 19:01:50' prior: 50557507!
differentThanExpectedNumberOfRecordsErrorMessage
	^'Number of records per line should be ', self expectedNumberOfRecordsPerLine, '!!'! !

!testRun: #ImportTest #test05ShouldFailImportingIfThereAreLessThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:01:51'!
ERROR!
!CustomerImporter class methodsFor: 'testing' stamp: 'AS 11/14/2022 19:02:00'!
expectedNumberOfRecordsPerLine
	self shouldBeImplemented.! !
!CustomerImporter class methodsFor: 'testing' stamp: 'AS 11/14/2022 19:02:08' prior: 50557524!
expectedNumberOfRecordsPerLine
	^5! !
!CustomerImporter class methodsFor: 'error message' stamp: 'AS 11/14/2022 19:02:14' prior: 50557513!
differentThanExpectedNumberOfRecordsErrorMessage
	^'Number of records per line should be ', self expectedNumberOfRecordsPerLine asString, '!!'! !

!testRun: #ImportTest #test05ShouldFailImportingIfThereAreLessThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:02:15'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 19:04:21' prior: 50557019!
hasLineToImport

	line := readStream nextLine.
	line size < self class expectedNumberOfRecordsPerLine ifTrue: [self error: self class differentThanExpectedNumberOfRecordsErrorMessage ].
	^line notNil! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:04:22'!
ERROR!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 19:04:23'!
FAILURE!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 19:04:23'!
PASSED!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 19:04:23'!
FAILURE!

!testRun: #ImportTest #test05ShouldFailImportingIfThereAreLessThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:04:23'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:04:25'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 19:08:35' prior: 50557546!
hasLineToImport

	line := readStream nextLine.
	^line notNil! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 19:08:41' prior: 50557075 overrides: 16902254!
value

	[self hasLineToImport ] whileTrue: [
		line size < self class expectedNumberOfRecordsPerLine ifTrue: [self error: self class differentThanExpectedNumberOfRecordsErrorMessage ].
		self createRecord.
		self importRecord.].

	! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:08:42'!
PASSED!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 19:08:44'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:08:45'!
PASSED!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 19:08:45'!
FAILURE!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 19:08:45'!
FAILURE!

!testRun: #ImportTest #test05ShouldFailImportingIfThereAreLessThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:08:45'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:08:49'!
PASSED!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 19:08:50'!
FAILURE!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 19:08:50'!
PASSED!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 19:08:50'!
FAILURE!

!testRun: #ImportTest #test05ShouldFailImportingIfThereAreLessThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:08:50'!
FAILURE!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 19:08:51'!
FAILURE!
!ImportTest methodsFor: 'test data' stamp: 'AS 11/14/2022 19:10:05' prior: 50557158!
invalidData

	^ReadStream on: 'X,Pepe,Sanchez,D,22333444'.! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:10:23'!
PASSED!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 19:10:24'!
PASSED!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 19:10:24'!
PASSED!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 19:10:24'!
FAILURE!

!testRun: #ImportTest #test05ShouldFailImportingIfThereAreLessThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:10:24'!
FAILURE!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 19:10:27'!
FAILURE!
!ImportTest methodsFor: 'test data' stamp: 'AS 11/14/2022 19:12:21' prior: 50557326!
emptyRecordTypeData
	^ReadStream on: ',Pepe,Sanchez,D,22333444'! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:12:22'!
PASSED!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 19:12:23'!
PASSED!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 19:12:23'!
PASSED!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 19:12:23'!
FAILURE!

!testRun: #ImportTest #test05ShouldFailImportingIfThereAreLessThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:12:23'!
FAILURE!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 19:12:24'!
FAILURE!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 19:13:07'!
FAILURE!
!ImportTest methodsFor: 'test data' stamp: 'AS 11/14/2022 19:16:08' prior: 50557657!
emptyRecordTypeData
	^ReadStream on: '
'! !
!ImportTest methodsFor: 'test data' stamp: 'AS 11/14/2022 19:16:15'!
emptyRecordData
	^ReadStream on: '
'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/14/2022 19:16:15' prior: 50557303!
test04ShouldFailImportingWithEmptyRecordType

	self should: [(CustomerImporter from: self emptyRecordData into: session) value ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: CustomerImporter invalidEmptyRecordTypeErrorMessage equals: anError messageText.
							   self assert: 0 equals: (session selectAllOfType: Customer) size].! !

!methodRemoval: ImportTest #emptyRecordTypeData stamp: 'AS 11/14/2022 19:16:15'!
emptyRecordTypeData
	^ReadStream on: '
'!

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:16:17'!
PASSED!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 19:16:18'!
PASSED!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 19:16:18'!
PASSED!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 19:16:18'!
FAILURE!

!testRun: #ImportTest #test05ShouldFailImportingIfThereAreLessThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:16:18'!
FAILURE!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 19:16:19'!
FAILURE!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 19:16:53'!
FAILURE!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 19:16:53'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 19:18:55' prior: 50557420!
importRecord

	self assertRecordIsNotEmpty.
	record size < self class expectedNumberOfRecordsPerLine ifTrue: [self error: self class differentThanExpectedNumberOfRecordsErrorMessage ].
	(self isCustomerRecord) ifTrue: [ ^self importCustomer].
		(self isAddressRecord) ifTrue: [ ^self importAddress].
		self invalidRecordTypeErrorSignal.
		! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:18:57'!
PASSED!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 19:18:57'!
PASSED!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 19:18:57'!
PASSED!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 19:18:57'!
FAILURE!

!testRun: #ImportTest #test05ShouldFailImportingIfThereAreLessThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:18:57'!
PASSED!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 19:18:57'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 19:19:38' prior: 50557581 overrides: 16902254!
value

	[self hasLineToImport ] whileTrue: [
		self createRecord.
		self importRecord.].

	! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:19:39'!
PASSED!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 19:19:40'!
PASSED!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 19:19:40'!
PASSED!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 19:19:40'!
PASSED!

!testRun: #ImportTest #test05ShouldFailImportingIfThereAreLessThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:19:40'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 19:20:10'!
assertRecordSizeIsNotLessThanExpected

	^ record size < self class expectedNumberOfRecordsPerLine ifTrue: [self error: self class differentThanExpectedNumberOfRecordsErrorMessage ]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 19:20:10' prior: 50557741!
importRecord

	self assertRecordIsNotEmpty.
	self assertRecordSizeIsNotLessThanExpected.
	(self isCustomerRecord) ifTrue: [ ^self importCustomer].
		(self isAddressRecord) ifTrue: [ ^self importAddress].
		self invalidRecordTypeErrorSignal.
		! !
!ImportTest methodsFor: 'tests' stamp: 'AS 11/14/2022 19:20:35'!
test06ShouldFailImportingIfThereAreMoreThanExpectedNumberOfRecords

	self should: [(CustomerImporter from: self moreThanExpectedNumberOfRecordsData into: session) value ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: CustomerImporter differentThanExpectedNumberOfRecordsErrorMessage equals: anError messageText.
							   self assert: 0 equals: (session selectAllOfType: Customer) size].! !

!testRun: #ImportTest #test06ShouldFailImportingIfThereAreMoreThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:20:41'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'AS 11/14/2022 19:20:47'!
moreThanExpectedNumberOfRecordsData
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'test data' stamp: 'AS 11/14/2022 19:21:30' prior: 50557838!
moreThanExpectedNumberOfRecordsData
	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444,X'! !

!testRun: #ImportTest #test06ShouldFailImportingIfThereAreMoreThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:21:31'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 19:22:33' prior: 50557799!
assertRecordSizeIsNotLessThanExpected

	^ (record size < self class expectedNumberOfRecordsPerLine or: [record size > self class expectedNumberOfRecordsPerLine]) ifTrue: [self error: self class differentThanExpectedNumberOfRecordsErrorMessage ]! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:22:34'!
ERROR!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 19:22:34'!
PASSED!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 19:22:34'!
PASSED!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 19:22:35'!
PASSED!

!testRun: #ImportTest #test05ShouldFailImportingIfThereAreLessThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:22:35'!
PASSED!

!testRun: #ImportTest #test06ShouldFailImportingIfThereAreMoreThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:22:35'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:22:35'!
ERROR!

!testRun: #ImportTest #test06ShouldFailImportingIfThereAreMoreThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:22:52'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:22:53'!
ERROR!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 19:22:53'!
PASSED!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 19:22:53'!
PASSED!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 19:22:53'!
PASSED!

!testRun: #ImportTest #test05ShouldFailImportingIfThereAreLessThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:22:53'!
PASSED!

!testRun: #ImportTest #test06ShouldFailImportingIfThereAreMoreThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:22:53'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:22:53'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 19:23:42' prior: 50557808!
importRecord

	self assertRecordIsNotEmpty.
	
	(self isCustomerRecord) ifTrue: [ self assertRecordSizeIsNotLessThanExpected.^self importCustomer].
		(self isAddressRecord) ifTrue: [ ^self importAddress].
		self invalidRecordTypeErrorSignal.
		! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:23:44'!
PASSED!

!testRun: #ImportTest #test06ShouldFailImportingIfThereAreMoreThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:23:45'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:23:46'!
PASSED!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 19:23:46'!
PASSED!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 19:23:46'!
PASSED!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 19:23:46'!
PASSED!

!testRun: #ImportTest #test05ShouldFailImportingIfThereAreLessThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:23:46'!
PASSED!

!testRun: #ImportTest #test06ShouldFailImportingIfThereAreMoreThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:23:46'!
PASSED!
!CustomerImporter class methodsFor: 'error message' stamp: 'AS 11/14/2022 19:24:04' prior: 50557340!
invalidEmptyRecordTypeErrorMessage
	^'Can not import empty record!!'! !
!CustomerImporter class methodsFor: 'error message' stamp: 'AS 11/14/2022 19:24:15'!
invalidEmptyRecordErrorMessage
	^'Can not import empty record!!'! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'AS 11/14/2022 19:24:15' prior: 50557429!
invalidEmptyRecordTypeErrorSignal

	^ self error: self class invalidEmptyRecordErrorMessage! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/14/2022 19:24:15' prior: 50557695!
test04ShouldFailImportingWithEmptyRecordType

	self should: [(CustomerImporter from: self emptyRecordData into: session) value ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: CustomerImporter invalidEmptyRecordErrorMessage equals: anError messageText.
							   self assert: 0 equals: (session selectAllOfType: Customer) size].! !

!methodRemoval: CustomerImporter class #invalidEmptyRecordTypeErrorMessage stamp: 'AS 11/14/2022 19:24:15'!
invalidEmptyRecordTypeErrorMessage
	^'Can not import empty record!!'!
!CustomerImporter methodsFor: 'error signal' stamp: 'AS 11/14/2022 19:24:42'!
invalidEmptyRecordErrorSignal

	^ self error: self class invalidEmptyRecordErrorMessage! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'AS 11/14/2022 19:24:42' prior: 50557435!
assertRecordIsNotEmpty

	^ record ifEmpty: [self invalidEmptyRecordErrorSignal]! !

!methodRemoval: CustomerImporter #invalidEmptyRecordTypeErrorSignal stamp: 'AS 11/14/2022 19:24:42'!
invalidEmptyRecordTypeErrorSignal

	^ self error: self class invalidEmptyRecordErrorMessage!
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 19:29:17'!
assertCustomerRecordHasExpectedSize

	^ (record size < self class expectedNumberOfRecordsPerLine or: [record size > self class expectedNumberOfRecordsPerLine]) ifTrue: [self error: self class differentThanExpectedNumberOfRecordsErrorMessage ]! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'AS 11/14/2022 19:29:17' prior: 50557915!
importRecord

	self assertRecordIsNotEmpty.
	
	(self isCustomerRecord) ifTrue: [ self assertCustomerRecordHasExpectedSize.^self importCustomer].
		(self isAddressRecord) ifTrue: [ ^self importAddress].
		self invalidRecordTypeErrorSignal.
		! !

!methodRemoval: CustomerImporter #assertRecordSizeIsNotLessThanExpected stamp: 'AS 11/14/2022 19:29:17'!
assertRecordSizeIsNotLessThanExpected

	^ (record size < self class expectedNumberOfRecordsPerLine or: [record size > self class expectedNumberOfRecordsPerLine]) ifTrue: [self error: self class differentThanExpectedNumberOfRecordsErrorMessage ]!
!CustomerImporter methodsFor: 'evaluating' stamp: 'AS 11/14/2022 19:29:35' prior: 50558009!
assertCustomerRecordHasExpectedSize

	^record size = self class expectedNumberOfRecordsPerLine ifFalse: [self error: self class differentThanExpectedNumberOfRecordsErrorMessage ]! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:29:35'!
PASSED!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 19:29:36'!
PASSED!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 19:29:36'!
PASSED!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 19:29:36'!
PASSED!

!testRun: #ImportTest #test05ShouldFailImportingIfThereAreLessThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:29:36'!
PASSED!

!testRun: #ImportTest #test06ShouldFailImportingIfThereAreMoreThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:29:36'!
PASSED!

!methodRemoval: CustomerImporter #importCustomer stamp: 'AS 11/14/2022 19:31:08'!
importCustomer

	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	session persist: newCustomer!

!methodRemoval: CustomerImporter #isCustomerRecord stamp: 'AS 11/14/2022 19:31:08'!
isCustomerRecord

	^record first = 'C'!

!methodRemoval: CustomerImporter #importAddress stamp: 'AS 11/14/2022 19:31:10'!
importAddress

	|  newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth!

!methodRemoval: CustomerImporter #isAddressRecord stamp: 'AS 11/14/2022 19:31:10'!
isAddressRecord

	^ line beginsWith: 'A'!

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:31:21'!
ERROR!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 19:31:21'!
ERROR!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 19:31:21'!
ERROR!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 19:31:22'!
PASSED!

!testRun: #ImportTest #test05ShouldFailImportingIfThereAreLessThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:31:22'!
ERROR!

!testRun: #ImportTest #test06ShouldFailImportingIfThereAreMoreThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:31:22'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:31:23'!
ERROR!
!CustomerImporter methodsFor: 'record' stamp: 'AS 11/14/2022 19:31:33'!
isCustomerRecord
	self shouldBeImplemented.! !
!CustomerImporter methodsFor: 'record' stamp: 'AS 11/14/2022 19:31:44' prior: 50558125!
isCustomerRecord
	^record first = 'C'! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:31:45'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:37:23'!
ERROR!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 19:37:23'!
ERROR!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 19:37:23'!
ERROR!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 19:37:23'!
PASSED!

!testRun: #ImportTest #test05ShouldFailImportingIfThereAreLessThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:37:23'!
PASSED!

!testRun: #ImportTest #test06ShouldFailImportingIfThereAreMoreThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:37:23'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:37:25'!
ERROR!
!CustomerImporter methodsFor: 'import' stamp: 'AS 11/14/2022 19:37:34'!
importCustomer
	self shouldBeImplemented.! !
!CustomerImporter methodsFor: 'import' stamp: 'AS 11/14/2022 19:37:38' prior: 50558160!
importCustomer
	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	session persist: newCustomer! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:37:40'!
ERROR!
!CustomerImporter methodsFor: 'record' stamp: 'AS 11/14/2022 19:37:47'!
isAddressRecord
	self shouldBeImplemented.! !
!CustomerImporter methodsFor: 'record' stamp: 'AS 11/14/2022 19:38:01' prior: 50558178!
isAddressRecord
	^record = 'A'! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:38:06'!
ERROR!
!CustomerImporter methodsFor: 'record' stamp: 'AS 11/14/2022 19:38:39' prior: 50558183!
isAddressRecord
	^record first = 'A'! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:38:45'!
ERROR!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 19:38:46'!
PASSED!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 19:38:46'!
PASSED!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 19:38:46'!
PASSED!

!testRun: #ImportTest #test05ShouldFailImportingIfThereAreLessThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:38:46'!
PASSED!

!testRun: #ImportTest #test06ShouldFailImportingIfThereAreMoreThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:38:46'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:38:46'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:39:21'!
ERROR!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 19:39:21'!
PASSED!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 19:39:21'!
PASSED!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 19:39:21'!
PASSED!

!testRun: #ImportTest #test05ShouldFailImportingIfThereAreLessThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:39:21'!
PASSED!

!testRun: #ImportTest #test06ShouldFailImportingIfThereAreMoreThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:39:22'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:39:22'!
ERROR!
!CustomerImporter methodsFor: 'import' stamp: 'AS 11/14/2022 19:39:28'!
importAddress
	self shouldBeImplemented.! !
!CustomerImporter methodsFor: 'import' stamp: 'AS 11/14/2022 19:39:38' prior: 50558241!
importAddress

	|  newAddress |
	
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:39:39'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:39:46'!
PASSED!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 19:39:47'!
PASSED!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 19:39:47'!
PASSED!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 19:39:47'!
PASSED!

!testRun: #ImportTest #test05ShouldFailImportingIfThereAreLessThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:39:47'!
PASSED!

!testRun: #ImportTest #test06ShouldFailImportingIfThereAreMoreThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:39:47'!
PASSED!

----SNAPSHOT----(14 November 2022 19:40:28) CuisUniversity-5510.image priorSource: 7226198!
!ImportTest methodsFor: 'test data' stamp: 'AS 11/14/2022 19:41:57'!
lessThanExpectedCustomerRecordSizeData
	^ ReadStream on:
'C,Pepe,Sanchez,D'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/14/2022 19:41:57' prior: 50557472!
test05ShouldFailImportingIfThereAreLessThanExpectedNumberOfRecords

	self should: [(CustomerImporter from: self lessThanExpectedCustomerRecordSizeData into: session) value ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: CustomerImporter differentThanExpectedNumberOfRecordsErrorMessage equals: anError messageText.
							   self assert: 0 equals: (session selectAllOfType: Customer) size].! !

!methodRemoval: ImportTest #lessThanExpectedNumberOfRecordsData stamp: 'AS 11/14/2022 19:41:57'!
lessThanExpectedNumberOfRecordsData
	^ ReadStream on:
'C,Pepe,Sanchez,D'!
!CustomerImporter class methodsFor: 'error message' stamp: 'AS 11/14/2022 19:42:12'!
differentThanExpectedCustomerRecordSizeErrorMessage
	^'Number of records per line should be ', self expectedNumberOfRecordsPerLine asString, '!!'! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'AS 11/14/2022 19:42:12' prior: 50558042!
assertCustomerRecordHasExpectedSize

	^record size = self class expectedNumberOfRecordsPerLine ifFalse: [self error: self class differentThanExpectedCustomerRecordSizeErrorMessage ]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/14/2022 19:42:12' prior: 50558291!
test05ShouldFailImportingIfThereAreLessThanExpectedNumberOfRecords

	self should: [(CustomerImporter from: self lessThanExpectedCustomerRecordSizeData into: session) value ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: CustomerImporter differentThanExpectedCustomerRecordSizeErrorMessage equals: anError messageText.
							   self assert: 0 equals: (session selectAllOfType: Customer) size].! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/14/2022 19:42:12' prior: 50557818!
test06ShouldFailImportingIfThereAreMoreThanExpectedNumberOfRecords

	self should: [(CustomerImporter from: self moreThanExpectedNumberOfRecordsData into: session) value ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: CustomerImporter differentThanExpectedCustomerRecordSizeErrorMessage equals: anError messageText.
							   self assert: 0 equals: (session selectAllOfType: Customer) size].! !

!methodRemoval: CustomerImporter class #differentThanExpectedNumberOfRecordsErrorMessage stamp: 'AS 11/14/2022 19:42:12'!
differentThanExpectedNumberOfRecordsErrorMessage
	^'Number of records per line should be ', self expectedNumberOfRecordsPerLine asString, '!!'!

!testRun: #ImportTest #test05ShouldFailImportingIfThereAreLessThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:42:14'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:42:14'!
PASSED!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 19:42:15'!
PASSED!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 19:42:15'!
PASSED!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 19:42:15'!
PASSED!

!testRun: #ImportTest #test05ShouldFailImportingIfThereAreLessThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:42:15'!
PASSED!

!testRun: #ImportTest #test06ShouldFailImportingIfThereAreMoreThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:42:15'!
PASSED!
!ImportTest methodsFor: 'test data' stamp: 'AS 11/14/2022 19:42:40'!
moreThanExpectedCustomerRecordSizeData
	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444,X'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/14/2022 19:42:40' prior: 50558347!
test06ShouldFailImportingIfThereAreMoreThanExpectedNumberOfRecords

	self should: [(CustomerImporter from: self moreThanExpectedCustomerRecordSizeData into: session) value ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: CustomerImporter differentThanExpectedCustomerRecordSizeErrorMessage equals: anError messageText.
							   self assert: 0 equals: (session selectAllOfType: Customer) size].! !

!methodRemoval: ImportTest #moreThanExpectedNumberOfRecordsData stamp: 'AS 11/14/2022 19:42:40'!
moreThanExpectedNumberOfRecordsData
	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444,X'!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/14/2022 19:43:03'!
test05ShouldFailImportingWhenCustomerRecordSizeIsLessThanExpected

	self should: [(CustomerImporter from: self lessThanExpectedCustomerRecordSizeData into: session) value ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: CustomerImporter differentThanExpectedCustomerRecordSizeErrorMessage equals: anError messageText.
							   self assert: 0 equals: (session selectAllOfType: Customer) size].! !

!methodRemoval: ImportTest #test05ShouldFailImportingIfThereAreLessThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:43:03'!
test05ShouldFailImportingIfThereAreLessThanExpectedNumberOfRecords

	self should: [(CustomerImporter from: self lessThanExpectedCustomerRecordSizeData into: session) value ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: CustomerImporter differentThanExpectedCustomerRecordSizeErrorMessage equals: anError messageText.
							   self assert: 0 equals: (session selectAllOfType: Customer) size].!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/14/2022 19:43:18'!
test06ShouldFailImportingWhenCustomerRecordSizeIsBiggerThanExpected

	self should: [(CustomerImporter from: self moreThanExpectedCustomerRecordSizeData into: session) value ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: CustomerImporter differentThanExpectedCustomerRecordSizeErrorMessage equals: anError messageText.
							   self assert: 0 equals: (session selectAllOfType: Customer) size].! !

!methodRemoval: ImportTest #test06ShouldFailImportingIfThereAreMoreThanExpectedNumberOfRecords stamp: 'AS 11/14/2022 19:43:18'!
test06ShouldFailImportingIfThereAreMoreThanExpectedNumberOfRecords

	self should: [(CustomerImporter from: self moreThanExpectedCustomerRecordSizeData into: session) value ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: CustomerImporter differentThanExpectedCustomerRecordSizeErrorMessage equals: anError messageText.
							   self assert: 0 equals: (session selectAllOfType: Customer) size].!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/14/2022 19:43:29'!
test05ShouldFailImportingWhenCustomerRecordSizeIsSmallerThanExpected

	self should: [(CustomerImporter from: self lessThanExpectedCustomerRecordSizeData into: session) value ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: CustomerImporter differentThanExpectedCustomerRecordSizeErrorMessage equals: anError messageText.
							   self assert: 0 equals: (session selectAllOfType: Customer) size].! !

!methodRemoval: ImportTest #test05ShouldFailImportingWhenCustomerRecordSizeIsLessThanExpected stamp: 'AS 11/14/2022 19:43:29'!
test05ShouldFailImportingWhenCustomerRecordSizeIsLessThanExpected

	self should: [(CustomerImporter from: self lessThanExpectedCustomerRecordSizeData into: session) value ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: CustomerImporter differentThanExpectedCustomerRecordSizeErrorMessage equals: anError messageText.
							   self assert: 0 equals: (session selectAllOfType: Customer) size].!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/14/2022 19:44:07'!
test07ShouldFailImportingWhenAddressRecordSizeIsSmallerThanExpected

	self should: [(CustomerImporter from: self lessThanExpectedAddressRecordSizeData into: session) value ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: CustomerImporter differentThanExpectedAddressRecordSizeErrorMessage equals: anError messageText.
							   self assert: 0 equals: (session selectAllOfType: Customer) size].! !

!testRun: #ImportTest #test07ShouldFailImportingWhenAddressRecordSizeIsSmallerThanExpected stamp: 'AS 11/14/2022 19:44:11'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'AS 11/14/2022 19:44:16'!
lessThanExpectedAddressRecordSizeData
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'test data' stamp: 'AS 11/14/2022 19:44:35' prior: 50558547!
lessThanExpectedAddressRecordSizeData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636'! !

!testRun: #ImportTest #test07ShouldFailImportingWhenAddressRecordSizeIsSmallerThanExpected stamp: 'AS 11/14/2022 19:44:36'!
ERROR!
!CustomerImporter class methodsFor: 'error message' stamp: 'AS 11/14/2022 19:44:43'!
differentThanExpectedAddressRecordSizeErrorMessage
	self shouldBeImplemented.! !
!CustomerImporter class methodsFor: 'error message' stamp: 'AS 11/14/2022 19:45:19' prior: 50558563!
differentThanExpectedAddressRecordSizeErrorMessage
	
	^'Number of records per line should be ', self expectedAddressRecordSize asString, '!!'! !

!testRun: #ImportTest #test07ShouldFailImportingWhenAddressRecordSizeIsSmallerThanExpected stamp: 'AS 11/14/2022 19:45:25'!
ERROR!
!CustomerImporter class methodsFor: 'testing' stamp: 'AS 11/14/2022 19:45:30'!
expectedAddressRecordSize
	self shouldBeImplemented.! !
!CustomerImporter class methodsFor: 'testing' stamp: 'AS 11/14/2022 19:45:35' prior: 50558581!
expectedAddressRecordSize
	^6! !

!testRun: #ImportTest #test07ShouldFailImportingWhenAddressRecordSizeIsSmallerThanExpected stamp: 'AS 11/14/2022 19:45:41'!
FAILURE!
!CustomerImporter methodsFor: 'import' stamp: 'AS 11/14/2022 19:46:52' prior: 50558020!
importRecord

	self assertRecordIsNotEmpty.
	
	(self isCustomerRecord) ifTrue: [ self assertCustomerRecordHasExpectedSize.^self importCustomer].
		(self isAddressRecord) ifTrue: [ self assertAddressRecordHasExpectedSize.^self importAddress].
		self invalidRecordTypeErrorSignal.
		! !
!CustomerImporter methodsFor: 'assertions' stamp: 'AS 11/14/2022 19:47:04'!
assertAddressRecordHasExpectedSize

	^record size < self class expectedNumberOfRecordsPerLine ifFalse: [self error: self class differentThanExpectedCustomerRecordSizeErrorMessage ]! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:47:21'!
ERROR!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 19:47:21'!
PASSED!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 19:47:21'!
PASSED!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 19:47:21'!
PASSED!

!testRun: #ImportTest #test05ShouldFailImportingWhenCustomerRecordSizeIsSmallerThanExpected stamp: 'AS 11/14/2022 19:47:22'!
PASSED!

!testRun: #ImportTest #test06ShouldFailImportingWhenCustomerRecordSizeIsBiggerThanExpected stamp: 'AS 11/14/2022 19:47:22'!
PASSED!

!testRun: #ImportTest #test07ShouldFailImportingWhenAddressRecordSizeIsSmallerThanExpected stamp: 'AS 11/14/2022 19:47:22'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:47:23'!
ERROR!
!CustomerImporter methodsFor: 'assertions' stamp: 'AS 11/14/2022 19:47:42' prior: 50558606!
assertAddressRecordHasExpectedSize

	^record size < self class expectedAddressRecordSize ifFalse: [self error: self class differentThanExpectedCustomerRecordSizeErrorMessage ]! !
!CustomerImporter methodsFor: 'assertions' stamp: 'AS 11/14/2022 19:47:47' prior: 50558643!
assertAddressRecordHasExpectedSize

	^record size < self class expectedAddressRecordSize ifFalse: [self error: self class differentThanExpectedAddressRecordSizeErrorMessage ]! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:47:48'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:47:55'!
ERROR!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 19:47:55'!
PASSED!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 19:47:55'!
PASSED!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 19:47:55'!
PASSED!

!testRun: #ImportTest #test05ShouldFailImportingWhenCustomerRecordSizeIsSmallerThanExpected stamp: 'AS 11/14/2022 19:47:55'!
PASSED!

!testRun: #ImportTest #test06ShouldFailImportingWhenCustomerRecordSizeIsBiggerThanExpected stamp: 'AS 11/14/2022 19:47:55'!
PASSED!

!testRun: #ImportTest #test07ShouldFailImportingWhenAddressRecordSizeIsSmallerThanExpected stamp: 'AS 11/14/2022 19:47:56'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:47:58'!
ERROR!

self class expectedAddressRecordSize!
!CustomerImporter methodsFor: 'assertions' stamp: 'AS 11/14/2022 19:48:44' prior: 50558652!
assertAddressRecordHasExpectedSize

	^record size < self class expectedAddressRecordSize ifTrue: [self error: self class differentThanExpectedAddressRecordSizeErrorMessage ]! !

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 19:48:47'!
PASSED!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 19:48:47'!
PASSED!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 19:48:47'!
PASSED!

!testRun: #ImportTest #test05ShouldFailImportingWhenCustomerRecordSizeIsSmallerThanExpected stamp: 'AS 11/14/2022 19:48:47'!
PASSED!

!testRun: #ImportTest #test06ShouldFailImportingWhenCustomerRecordSizeIsBiggerThanExpected stamp: 'AS 11/14/2022 19:48:47'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:48:48'!
PASSED!

!testRun: #ImportTest #test07ShouldFailImportingWhenAddressRecordSizeIsSmallerThanExpected stamp: 'AS 11/14/2022 19:48:48'!
FAILURE!

!testRun: #ImportTest #test07ShouldFailImportingWhenAddressRecordSizeIsSmallerThanExpected stamp: 'AS 11/14/2022 19:48:48'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/14/2022 19:49:23' prior: 50558527!
test07ShouldFailImportingWhenAddressRecordSizeIsSmallerThanExpected

	self should: [(CustomerImporter from: self lessThanExpectedAddressRecordSizeData into: session) value ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: CustomerImporter differentThanExpectedAddressRecordSizeErrorMessage equals: anError messageText.
							self assert: 0 equals: (session selectAllOfType: Address ) size.   
							self assert: 1 equals: (session selectAllOfType: Customer) size.].! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:49:28'!
PASSED!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 19:49:28'!
PASSED!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 19:49:28'!
PASSED!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 19:49:28'!
PASSED!

!testRun: #ImportTest #test05ShouldFailImportingWhenCustomerRecordSizeIsSmallerThanExpected stamp: 'AS 11/14/2022 19:49:28'!
PASSED!

!testRun: #ImportTest #test06ShouldFailImportingWhenCustomerRecordSizeIsBiggerThanExpected stamp: 'AS 11/14/2022 19:49:28'!
PASSED!

!testRun: #ImportTest #test07ShouldFailImportingWhenAddressRecordSizeIsSmallerThanExpected stamp: 'AS 11/14/2022 19:49:29'!
PASSED!

----SNAPSHOT----(14 November 2022 19:49:38) CuisUniversity-5510.image priorSource: 7252190!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/14/2022 19:50:09'!
test08ShouldFailImportingWhenAddressRecordSizeIsBiggerThanExpected

	self should: [(CustomerImporter from: self biggerThanExpectedAddressRecordSizeData into: session) value ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: CustomerImporter differentThanExpectedAddressRecordSizeErrorMessage equals: anError messageText.
							self assert: 0 equals: (session selectAllOfType: Address ) size.   
							self assert: 1 equals: (session selectAllOfType: Customer) size.].! !

!testRun: #ImportTest #test08ShouldFailImportingWhenAddressRecordSizeIsBiggerThanExpected stamp: 'AS 11/14/2022 19:50:11'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'AS 11/14/2022 19:50:20'!
biggerThanExpectedAddressRecordSizeData
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'test data' stamp: 'AS 11/14/2022 19:50:41' prior: 50558800!
biggerThanExpectedAddressRecordSizeData
		^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs,X'! !

!testRun: #ImportTest #test08ShouldFailImportingWhenAddressRecordSizeIsBiggerThanExpected stamp: 'AS 11/14/2022 19:50:42'!
FAILURE!
!CustomerImporter methodsFor: 'assertions' stamp: 'AS 11/14/2022 19:51:01' prior: 50558692!
assertAddressRecordHasExpectedSize

	^record size = self class expectedAddressRecordSize ifFalse: [self error: self class differentThanExpectedAddressRecordSizeErrorMessage ]! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:51:02'!
PASSED!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 19:51:02'!
PASSED!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 19:51:03'!
PASSED!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 19:51:03'!
PASSED!

!testRun: #ImportTest #test05ShouldFailImportingWhenCustomerRecordSizeIsSmallerThanExpected stamp: 'AS 11/14/2022 19:51:03'!
PASSED!

!testRun: #ImportTest #test06ShouldFailImportingWhenCustomerRecordSizeIsBiggerThanExpected stamp: 'AS 11/14/2022 19:51:03'!
PASSED!

!testRun: #ImportTest #test07ShouldFailImportingWhenAddressRecordSizeIsSmallerThanExpected stamp: 'AS 11/14/2022 19:51:03'!
PASSED!

!testRun: #ImportTest #test08ShouldFailImportingWhenAddressRecordSizeIsBiggerThanExpected stamp: 'AS 11/14/2022 19:51:03'!
PASSED!
!ImportTest methodsFor: 'test data' stamp: 'AS 11/14/2022 19:51:21'!
biggerThanExpectedCustomerRecordSizeData
	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444,X'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/14/2022 19:51:21' prior: 50558459!
test06ShouldFailImportingWhenCustomerRecordSizeIsBiggerThanExpected

	self should: [(CustomerImporter from: self biggerThanExpectedCustomerRecordSizeData into: session) value ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: CustomerImporter differentThanExpectedCustomerRecordSizeErrorMessage equals: anError messageText.
							   self assert: 0 equals: (session selectAllOfType: Customer) size].! !

!methodRemoval: ImportTest #moreThanExpectedCustomerRecordSizeData stamp: 'AS 11/14/2022 19:51:21'!
moreThanExpectedCustomerRecordSizeData
	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444,X'!
!ImportTest methodsFor: 'test data' stamp: 'AS 11/14/2022 19:51:31'!
smallerThanExpectedAddressRecordSizeData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/14/2022 19:51:31' prior: 50558730!
test07ShouldFailImportingWhenAddressRecordSizeIsSmallerThanExpected

	self should: [(CustomerImporter from: self smallerThanExpectedAddressRecordSizeData into: session) value ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: CustomerImporter differentThanExpectedAddressRecordSizeErrorMessage equals: anError messageText.
							self assert: 0 equals: (session selectAllOfType: Address ) size.   
							self assert: 1 equals: (session selectAllOfType: Customer) size.].! !

!methodRemoval: ImportTest #lessThanExpectedAddressRecordSizeData stamp: 'AS 11/14/2022 19:51:31'!
lessThanExpectedAddressRecordSizeData

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636'!
!ImportTest methodsFor: 'test data' stamp: 'AS 11/14/2022 19:51:41'!
smallerThanExpectedCustomerRecordSizeData
	^ ReadStream on:
'C,Pepe,Sanchez,D'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/14/2022 19:51:41' prior: 50558493!
test05ShouldFailImportingWhenCustomerRecordSizeIsSmallerThanExpected

	self should: [(CustomerImporter from: self smallerThanExpectedCustomerRecordSizeData into: session) value ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: CustomerImporter differentThanExpectedCustomerRecordSizeErrorMessage equals: anError messageText.
							   self assert: 0 equals: (session selectAllOfType: Customer) size].! !

!methodRemoval: ImportTest #lessThanExpectedCustomerRecordSizeData stamp: 'AS 11/14/2022 19:51:41'!
lessThanExpectedCustomerRecordSizeData
	^ ReadStream on:
'C,Pepe,Sanchez,D'!

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 19:51:43'!
PASSED!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 19:51:43'!
PASSED!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 19:51:43'!
PASSED!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 19:51:43'!
PASSED!

!testRun: #ImportTest #test05ShouldFailImportingWhenCustomerRecordSizeIsSmallerThanExpected stamp: 'AS 11/14/2022 19:51:44'!
PASSED!

!testRun: #ImportTest #test06ShouldFailImportingWhenCustomerRecordSizeIsBiggerThanExpected stamp: 'AS 11/14/2022 19:51:44'!
PASSED!

!testRun: #ImportTest #test07ShouldFailImportingWhenAddressRecordSizeIsSmallerThanExpected stamp: 'AS 11/14/2022 19:51:44'!
PASSED!

!testRun: #ImportTest #test08ShouldFailImportingWhenAddressRecordSizeIsBiggerThanExpected stamp: 'AS 11/14/2022 19:51:44'!
PASSED!

----SNAPSHOT----(14 November 2022 19:52:07) CuisUniversity-5510.image priorSource: 7267938!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/14/2022 20:10:55'!
test09ShouldFailImportingAddressWithoutRespectiveCustomer

	self should: [(CustomerImporter from: self addressRecordWithoutCustomerData into: session) value ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: CustomerImporter canNotImportAddressWithoutCustomerErrorMessage equals: anError messageText.
							self assert: 0 equals: (session selectAllOfType: Address ) size.   
							self assert: 0 equals: (session selectAllOfType: Customer) size.].! !

!testRun: #ImportTest #test09ShouldFailImportingAddressWithoutRespectiveCustomer stamp: 'AS 11/14/2022 20:11:00'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'AS 11/14/2022 20:11:03'!
addressRecordWithoutCustomerData
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'test data' stamp: 'AS 11/14/2022 20:11:50' prior: 50558996!
addressRecordWithoutCustomerData
		^ ReadStream on:
'A,San Martin,3322,Olivos,1636,BsAs'! !

!testRun: #ImportTest #test09ShouldFailImportingAddressWithoutRespectiveCustomer stamp: 'AS 11/14/2022 20:11:52'!
ERROR!
!CustomerImporter methodsFor: 'import' stamp: 'AS 11/14/2022 20:14:25' prior: 50558594!
importRecord

	self assertRecordIsNotEmpty.
	
	(self isCustomerRecord) ifTrue: [ self assertCustomerRecordHasExpectedSize.^self importCustomer].
		(self isAddressRecord) ifTrue: [ self assertAddressRecordHasExpectedSize.
								newCustomer ifNil: [self error: self class canNotImportAddressWithoutCustomerErrorMessage].
								^self importAddress].
		self invalidRecordTypeErrorSignal.
		! !

!testRun: #ImportTest #test09ShouldFailImportingAddressWithoutRespectiveCustomer stamp: 'AS 11/14/2022 20:14:26'!
ERROR!
!CustomerImporter class methodsFor: 'error message' stamp: 'AS 11/14/2022 20:14:32'!
canNotImportAddressWithoutCustomerErrorMessage
	self shouldBeImplemented.! !
!CustomerImporter class methodsFor: 'error message' stamp: 'AS 11/14/2022 20:15:02' prior: 50559030!
canNotImportAddressWithoutCustomerErrorMessage
	
	^'Must have a customer to import address to!!'! !

!testRun: #ImportTest #test09ShouldFailImportingAddressWithoutRespectiveCustomer stamp: 'AS 11/14/2022 20:15:04'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 20:15:04'!
PASSED!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 20:15:04'!
PASSED!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 20:15:05'!
PASSED!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 20:15:05'!
PASSED!

!testRun: #ImportTest #test05ShouldFailImportingWhenCustomerRecordSizeIsSmallerThanExpected stamp: 'AS 11/14/2022 20:15:05'!
PASSED!

!testRun: #ImportTest #test06ShouldFailImportingWhenCustomerRecordSizeIsBiggerThanExpected stamp: 'AS 11/14/2022 20:15:05'!
PASSED!

!testRun: #ImportTest #test07ShouldFailImportingWhenAddressRecordSizeIsSmallerThanExpected stamp: 'AS 11/14/2022 20:15:05'!
PASSED!

!testRun: #ImportTest #test08ShouldFailImportingWhenAddressRecordSizeIsBiggerThanExpected stamp: 'AS 11/14/2022 20:15:05'!
PASSED!

!testRun: #ImportTest #test09ShouldFailImportingAddressWithoutRespectiveCustomer stamp: 'AS 11/14/2022 20:15:06'!
PASSED!
!CustomerImporter methodsFor: 'import' stamp: 'AS 11/14/2022 20:15:53'!
canNotImportAddressWithoutCustomerErrorSignal

	^ self error: self class canNotImportAddressWithoutCustomerErrorMessage! !
!CustomerImporter methodsFor: 'import' stamp: 'AS 11/14/2022 20:15:53' prior: 50559011!
importRecord

	self assertRecordIsNotEmpty.
	
	(self isCustomerRecord) ifTrue: [ self assertCustomerRecordHasExpectedSize.^self importCustomer].
		(self isAddressRecord) ifTrue: [ self assertAddressRecordHasExpectedSize.
								newCustomer ifNil: [self canNotImportAddressWithoutCustomerErrorSignal].
								^self importAddress].
		self invalidRecordTypeErrorSignal.
		! !
!CustomerImporter methodsFor: 'import' stamp: 'AS 11/14/2022 20:16:46'!
assertCustomerWasImported

	^ newCustomer ifNil: [self canNotImportAddressWithoutCustomerErrorSignal]! !
!CustomerImporter methodsFor: 'import' stamp: 'AS 11/14/2022 20:16:46' prior: 50559086!
importRecord

	self assertRecordIsNotEmpty.
	
	(self isCustomerRecord) ifTrue: [ self assertCustomerRecordHasExpectedSize.^self importCustomer].
		(self isAddressRecord) ifTrue: [ self assertAddressRecordHasExpectedSize.
								self assertCustomerWasImported.
								^self importAddress].
		self invalidRecordTypeErrorSignal.
		! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/14/2022 20:16:57'!
PASSED!

!testRun: #ImportTest #test02ShouldFailImportingInvalidRecordType stamp: 'AS 11/14/2022 20:16:58'!
PASSED!

!testRun: #ImportTest #test03ShouldFailImportingWithRepeatedRecordType stamp: 'AS 11/14/2022 20:16:58'!
PASSED!

!testRun: #ImportTest #test04ShouldFailImportingWithEmptyRecordType stamp: 'AS 11/14/2022 20:16:58'!
PASSED!

!testRun: #ImportTest #test05ShouldFailImportingWhenCustomerRecordSizeIsSmallerThanExpected stamp: 'AS 11/14/2022 20:16:58'!
PASSED!

!testRun: #ImportTest #test06ShouldFailImportingWhenCustomerRecordSizeIsBiggerThanExpected stamp: 'AS 11/14/2022 20:16:58'!
PASSED!

!testRun: #ImportTest #test07ShouldFailImportingWhenAddressRecordSizeIsSmallerThanExpected stamp: 'AS 11/14/2022 20:16:58'!
PASSED!

!testRun: #ImportTest #test08ShouldFailImportingWhenAddressRecordSizeIsBiggerThanExpected stamp: 'AS 11/14/2022 20:16:59'!
PASSED!

!testRun: #ImportTest #test09ShouldFailImportingAddressWithoutRespectiveCustomer stamp: 'AS 11/14/2022 20:16:59'!
PASSED!

----SNAPSHOT----(14 November 2022 20:17:06) CuisUniversity-5510.image priorSource: 7274261!