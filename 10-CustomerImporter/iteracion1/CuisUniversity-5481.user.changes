

----QUIT----(11 September 2022 19:10:09) CuisUniversity-5481.image priorSource: 2810882!

----STARTUP---- (11 September 2022 19:10:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5481.image!


----QUIT----(11 September 2022 19:10:10) CuisUniversity-5481.image priorSource: 7059465!

----STARTUP---- (10 November 2022 19:19:22) as /home/andisici/Documents/2022/ing-2c2022/cuisCustomerImporter/CuisUniversity-5481.image!


----End fileIn of /home/andisici/Documents/2022/ing-2c2022/cuisCustomerImporter/CustomerImporter.st----!

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:19:44'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:19:44'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:20:11'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:20:11'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:21:31'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:21:33'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:21:42'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/10/2022 19:24:02'!
validData

	^ StandardFileStream new open: 'input.txt' forWrite: false! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/10/2022 19:24:02' prior: 50552314!
importCustomers

	| inputStream  newCustomer line |
	inputStream := self validData.
	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.
			session persist: newCustomer].

		line := inputStream nextLine. ].
	
inputStream close! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/10/2022 19:29:47' prior: 50552594!
importCustomers

	| inputStream  newCustomer line |
	inputStream := self validData.
	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].

		line := inputStream nextLine. ].
	
inputStream close! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:29:47'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:29:48'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 19:30:10' prior: 50552285!
test01Import
	
	| customerPepe customerPepeAddresses firstAddress |
	
	self importCustomers. 
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	customerPepe := (session select: [:aCustomer | aCustomer idIs: '22333444'] ofType: Customer) anyOne. 
	self assert: (customerPepe firstNameIs: 'Pepe').
	self assert: (customerPepe lastNameIs: 'Sanchez').
	self assert: (customerPepe idTypeIs: 'D').
	
	customerPepeAddresses := customerPepe addresses ifEmpty: [self fail].
	firstAddress := customerPepeAddresses anyOne.
	
	self assert: (firstAddress streetNameIs: 'San Martin').
	self assert: (firstAddress streetNumberIs: 3322).
	self assert: (firstAddress townIs: 'Olivos').
	self assert: (firstAddress zipCodeIs: 1636).
	self assert: (firstAddress provinceIs: 'BsAs').! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:30:11'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:30:12'!
PASSED!

!methodRemoval: Address #province stamp: 'AS 11/10/2022 19:30:30'!
province

	^province!

!methodRemoval: Address #streetName stamp: 'AS 11/10/2022 19:30:32'!
streetName

	^streetName !

!methodRemoval: Address #streetNumber stamp: 'AS 11/10/2022 19:30:35'!
streetNumber

	^streetNumber !

!methodRemoval: Address #town stamp: 'AS 11/10/2022 19:30:37'!
town

	^town!

!methodRemoval: Address #zipCode stamp: 'AS 11/10/2022 19:30:43'!
zipCode

	^zipCode!

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:30:46'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/10/2022 19:31:38' prior: 50552588!
validData

	^ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:31:40'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/10/2022 19:31:53' prior: 50552629!
importCustomers

	|   newCustomer line |
	inputStream := self validData.
	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].

		line := inputStream nextLine. ].
	
inputStream close! !

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'AS 11/10/2022 19:31:53'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'session inputStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/10/2022 19:32:04' prior: 50552730!
importCustomers

	|   newCustomer line |
	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].

		line := inputStream nextLine. ].
	
inputStream close! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/10/2022 19:33:06' prior: 50552349 overrides: 16961394!
setUp
	
	inputStream := self validData.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:33:07'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 19:38:14' prior: 50552668!
test01Import
	
	| customerPepe customerPepeAddresses firstAddress |
	
	self importCustomers. 
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	customerPepe := (session select: [:aCustomer | aCustomer idIs: '22333444'] ofType: Customer) anyOne. 
	self assert: (customerPepe firstNameIs: 'Pepe').
	self assert: (customerPepe lastNameIs: 'Sanchez').
	self assert: (customerPepe idTypeIs: 'D').
	
	customerPepeAddresses := customerPepe addressWithStreetName: 'San Martin' ifNone: [self fail].
	firstAddress := customerPepeAddresses anyOne.
	
	self assert: (firstAddress streetNameIs: 'San Martin').
	self assert: (firstAddress streetNumberIs: 3322).
	self assert: (firstAddress townIs: 'Olivos').
	self assert: (firstAddress zipCodeIs: 1636).
	self assert: (firstAddress provinceIs: 'BsAs').! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:38:17'!
ERROR!
!Customer methodsFor: 'addresses' stamp: 'AS 11/10/2022 19:38:20'!
addressWithStreetName: aString ifNone: aBlockClosure 
	self shouldBeImplemented.! !
!Customer methodsFor: 'addresses' stamp: 'AS 11/10/2022 19:38:44' prior: 50552844!
addressWithStreetName: aStreetName ifNone: aNoneBlock

	^addresses first! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:38:45'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 19:39:04' prior: 50552814!
test01Import
	
	| customerPepe firstAddress |
	
	self importCustomers. 
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	customerPepe := (session select: [:aCustomer | aCustomer idIs: '22333444'] ofType: Customer) anyOne. 
	self assert: (customerPepe firstNameIs: 'Pepe').
	self assert: (customerPepe lastNameIs: 'Sanchez').
	self assert: (customerPepe idTypeIs: 'D').
	
	firstAddress := customerPepe addressWithStreetName: 'San Martin' ifNone: [self fail].
	
	self assert: (firstAddress streetNameIs: 'San Martin').
	self assert: (firstAddress streetNumberIs: 3322).
	self assert: (firstAddress townIs: 'Olivos').
	self assert: (firstAddress zipCodeIs: 1636).
	self assert: (firstAddress provinceIs: 'BsAs').! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:39:07'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:39:07'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 19:40:10' prior: 50552858!
test01Import
	
	| customerPepe customerfirstAddress |
	
	self importCustomers. 
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	customerPepe := (session select: [:aCustomer | aCustomer idIs: '22333444'] ofType: Customer) anyOne. 
	self assert: (customerPepe firstNameIs: 'Pepe').
	self assert: (customerPepe lastNameIs: 'Sanchez').
	self assert: (customerPepe idTypeIs: 'D').
	
	customerfirstAddress := customerPepe addressWithStreetName: 'San Martin' ifNone: [self fail].
	
	self assert: (customerfirstAddress streetNameIs: 'San Martin').
	self assert: (customerfirstAddress streetNumberIs: 3322).
	self assert: (customerfirstAddress townIs: 'Olivos').
	self assert: (customerfirstAddress zipCodeIs: 1636).
	self assert: (customerfirstAddress provinceIs: 'BsAs').! !
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 19:43:21' prior: 50552889!
test01Import
	
	| customerPepe customerfirstAddress |
	
	self importCustomers. 
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	customerPepe := (session select: [:aCustomer | aCustomer idIs: '22333444'] ofType: Customer) anyOne. 
	self assert: (customerPepe firstNameIs: 'Pepe').
	self assert: (customerPepe lastNameIs: 'Sanchez').
	self assert: (customerPepe idTypeIs: 'D').
	
	customerfirstAddress := customerPepe addressWithStreetName: 'San Martin' ifNone: [self fail].
	
	self assert: (customerfirstAddress streetNumberIs: 3322).
	self assert: (customerfirstAddress townIs: 'Olivos').
	self assert: (customerfirstAddress zipCodeIs: 1636).
	self assert: (customerfirstAddress provinceIs: 'BsAs').! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:43:21'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:43:22'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 19:43:34' prior: 50552917!
test01Import
	
	| customerPepe customerPepeFirstAddress |
	
	self importCustomers. 
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	customerPepe := (session select: [:aCustomer | aCustomer idIs: '22333444'] ofType: Customer) anyOne. 
	self assert: (customerPepe firstNameIs: 'Pepe').
	self assert: (customerPepe lastNameIs: 'Sanchez').
	self assert: (customerPepe idTypeIs: 'D').
	
	customerPepeFirstAddress := customerPepe addressWithStreetName: 'San Martin' ifNone: [self fail].
	
	self assert: (customerPepeFirstAddress streetNumberIs: 3322).
	self assert: (customerPepeFirstAddress townIs: 'Olivos').
	self assert: (customerPepeFirstAddress zipCodeIs: 1636).
	self assert: (customerPepeFirstAddress provinceIs: 'BsAs').! !
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 19:44:42' prior: 50552948!
test01Import
	
	| customerPepe customerPepeFirstAddress customerPepeSecondAddress |
	
	self importCustomers. 
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	customerPepe := (session select: [:aCustomer | aCustomer idIs: '22333444'] ofType: Customer) anyOne. 
	self assert: (customerPepe firstNameIs: 'Pepe').
	self assert: (customerPepe lastNameIs: 'Sanchez').
	self assert: (customerPepe idTypeIs: 'D').
	
	customerPepeFirstAddress := customerPepe addressWithStreetName: 'San Martin' ifNone: [self fail].
	
	self assert: (customerPepeFirstAddress streetNumberIs: 3322).
	self assert: (customerPepeFirstAddress townIs: 'Olivos').
	self assert: (customerPepeFirstAddress zipCodeIs: 1636).
	self assert: (customerPepeFirstAddress provinceIs: 'BsAs').
	
	customerPepeSecondAddress := customerPepe addressWithStreetName: 'Maipu' ifNone: [self fail].
	
	self assert: (customerPepeSecondAddress streetNumberIs: 888).
	self assert: (customerPepeSecondAddress townIs: 'Florida').
	self assert: (customerPepeSecondAddress zipCodeIs: 1122).
	self assert: (customerPepeSecondAddress provinceIs: 'Buenos Aires').! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:44:44'!
FAILURE!
!Customer methodsFor: 'addresses' stamp: 'AS 11/10/2022 19:45:21' prior: 50552850!
addressWithStreetName: aStreetName ifNone: aNoneBlock

	^addresses select: [:anAddress | anAddress streetNameIs: aStreetName ].! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:45:26'!
ERROR!
!Customer methodsFor: 'addresses' stamp: 'AS 11/10/2022 19:45:49' prior: 50553015!
addressWithStreetName: aStreetName ifNone: aNoneBlock
	self halt.
	^addresses select: [:anAddress | anAddress streetNameIs: aStreetName ].! !

^addresses select: [:anAddress | anAddress streetNameIs: aStreetName ]!

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:46:21'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:46:42'!
ERROR!
!Customer methodsFor: 'addresses' stamp: 'AS 11/10/2022 19:47:35' prior: 50553025!
addressWithStreetName: aStreetName ifNone: aNoneBlock
	self halt.
	^addresses select: [:anAddress | anAddress streetNameIs: aStreetName.].! !

^addresses select: [:anAddress | anAddress streetNameIs: aStreetName.]!
!Customer methodsFor: 'addresses' stamp: 'AS 11/10/2022 19:48:43' prior: 50553040!
addressWithStreetName: aStreetName ifNone: aNoneBlock
	self halt.
	^(addresses select: [:anAddress | anAddress streetNameIs: aStreetName.]) anyOne.! !
!Customer methodsFor: 'addresses' stamp: 'AS 11/10/2022 19:49:59' prior: 50553050!
addressWithStreetName: aStreetName ifNone: aNoneBlock
	
	^(addresses select: [:anAddress | anAddress streetNameIs: aStreetName.]) anyOne.! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:50:03'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:50:04'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 19:50:59'!
assertCustomerPepeWasCorrectlyImported
	
	| customerPepe customerPepeFirstAddress customerPepeSecondAddress |
	
	customerPepe := (session select: [:aCustomer | aCustomer idIs: '22333444'] ofType: Customer) anyOne. 
	self assert: (customerPepe firstNameIs: 'Pepe').
	self assert: (customerPepe lastNameIs: 'Sanchez').
	self assert: (customerPepe idTypeIs: 'D').
	
	customerPepeFirstAddress := customerPepe addressWithStreetName: 'San Martin' ifNone: [self fail].
	
	self assert: (customerPepeFirstAddress streetNumberIs: 3322).
	self assert: (customerPepeFirstAddress townIs: 'Olivos').
	self assert: (customerPepeFirstAddress zipCodeIs: 1636).
	self assert: (customerPepeFirstAddress provinceIs: 'BsAs').
	
	customerPepeSecondAddress := customerPepe addressWithStreetName: 'Maipu' ifNone: [self fail].
	
	self assert: (customerPepeSecondAddress streetNumberIs: 888).
	self assert: (customerPepeSecondAddress townIs: 'Florida').
	self assert: (customerPepeSecondAddress zipCodeIs: 1122).
	self assert: (customerPepeSecondAddress provinceIs: 'Buenos Aires').! !
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 19:51:07' prior: 50552974!
test01Import
	
	
	
	self importCustomers. 
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	self assertCustomerPepeWasCorrectlyImported ! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:51:11'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:51:11'!
PASSED!

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'AS 11/10/2022 19:52:07'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'session readStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/10/2022 19:52:07' prior: 50552771!
importCustomers

	|   newCustomer line |
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].

		line := readStream nextLine. ].
	
readStream close! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/10/2022 19:52:07' prior: 50552804 overrides: 16961394!
setUp
	
	readStream := self validData.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'AS 11/10/2022 19:52:47'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'AS 11/10/2022 19:52:47'!
from: aReadStream into: aSession
	^self new initializeFrom: aReadStream into: aSession! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'AS 11/10/2022 19:52:47'!
initializeFrom: aReadStream into: aSession
	session := aSession.
	readStream := aReadStream.! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'AS 11/10/2022 19:52:47' overrides: 16902254!
value

	|   newCustomer line |
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.].

		line := readStream nextLine. ].
	
readStream close! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/10/2022 19:52:47' prior: 50553127!
importCustomers
	(CustomerImporter from: readStream into: session) value! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:52:49'!
PASSED!

!methodRemoval: ImportTest #importCustomers stamp: 'AS 11/10/2022 19:53:06'!
importCustomers
	(CustomerImporter from: readStream into: session) value!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 19:53:06' prior: 50553106!
test01Import
	
	
	
	(CustomerImporter from: readStream into: session) value. 
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	self assertCustomerPepeWasCorrectlyImported ! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:53:08'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:53:09'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 19:53:13' prior: 50553234!
test01Import
	
	
	(CustomerImporter from: readStream into: session) value. 
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	self assertCustomerPepeWasCorrectlyImported ! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:53:14'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:53:15'!
PASSED!

----SNAPSHOT----(10 November 2022 19:54:16) CuisUniversity-5481.image priorSource: 7059698!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 19:57:11'!
assertCustomerJuanPerezWasCorrectlyImported
	
	| customerPepe customerPepeFirstAddress customerPepeSecondAddress |
	
	customerPepe := (session select: [:aCustomer | aCustomer idIs: '23-25666777-9'] ofType: Customer) anyOne. 
	self assert: (customerPepe firstNameIs: 'Juan').
	self assert: (customerPepe lastNameIs: 'Perez').
	self assert: (customerPepe idTypeIs: 'C').! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:57:15'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 19:57:59' prior: 50553264!
assertCustomerJuanPerezWasCorrectlyImported
	
	| customerPepe customerPepeFirstAddress |
	
	customerPepe := (session select: [:aCustomer | aCustomer idIs: '23-25666777-9'] ofType: Customer) anyOne. 
	self assert: (customerPepe firstNameIs: 'Juan').
	self assert: (customerPepe lastNameIs: 'Perez').
	self assert: (customerPepe idTypeIs: 'C').

	customerPepeFirstAddress := customerPepe addressWithStreetName: 'Alem' ifNone: [self fail].
	
	self assert: (customerPepeFirstAddress streetNumberIs: 1122).
	self assert: (customerPepeFirstAddress townIs: 'CABA').
	self assert: (customerPepeFirstAddress zipCodeIs: 1001).
	self assert: (customerPepeFirstAddress provinceIs: 'CABA').
! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 19:58:03'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 19:58:21'!
assertCustomerPepeSanchezWasCorrectlyImported
	
	| customerPepe customerPepeFirstAddress customerPepeSecondAddress |
	
	customerPepe := (session select: [:aCustomer | aCustomer idIs: '22333444'] ofType: Customer) anyOne. 
	self assert: (customerPepe firstNameIs: 'Pepe').
	self assert: (customerPepe lastNameIs: 'Sanchez').
	self assert: (customerPepe idTypeIs: 'D').
	
	customerPepeFirstAddress := customerPepe addressWithStreetName: 'San Martin' ifNone: [self fail].
	
	self assert: (customerPepeFirstAddress streetNumberIs: 3322).
	self assert: (customerPepeFirstAddress townIs: 'Olivos').
	self assert: (customerPepeFirstAddress zipCodeIs: 1636).
	self assert: (customerPepeFirstAddress provinceIs: 'BsAs').
	
	customerPepeSecondAddress := customerPepe addressWithStreetName: 'Maipu' ifNone: [self fail].
	
	self assert: (customerPepeSecondAddress streetNumberIs: 888).
	self assert: (customerPepeSecondAddress townIs: 'Florida').
	self assert: (customerPepeSecondAddress zipCodeIs: 1122).
	self assert: (customerPepeSecondAddress provinceIs: 'Buenos Aires').! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/10/2022 19:58:21' prior: 50553248!
test01Import
	
	
	(CustomerImporter from: readStream into: session) value. 
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	self assertCustomerPepeSanchezWasCorrectlyImported ! !

!methodRemoval: ImportTest #assertCustomerPepeWasCorrectlyImported stamp: 'AS 11/10/2022 19:58:21'!
assertCustomerPepeWasCorrectlyImported
	
	| customerPepe customerPepeFirstAddress customerPepeSecondAddress |
	
	customerPepe := (session select: [:aCustomer | aCustomer idIs: '22333444'] ofType: Customer) anyOne. 
	self assert: (customerPepe firstNameIs: 'Pepe').
	self assert: (customerPepe lastNameIs: 'Sanchez').
	self assert: (customerPepe idTypeIs: 'D').
	
	customerPepeFirstAddress := customerPepe addressWithStreetName: 'San Martin' ifNone: [self fail].
	
	self assert: (customerPepeFirstAddress streetNumberIs: 3322).
	self assert: (customerPepeFirstAddress townIs: 'Olivos').
	self assert: (customerPepeFirstAddress zipCodeIs: 1636).
	self assert: (customerPepeFirstAddress provinceIs: 'BsAs').
	
	customerPepeSecondAddress := customerPepe addressWithStreetName: 'Maipu' ifNone: [self fail].
	
	self assert: (customerPepeSecondAddress streetNumberIs: 888).
	self assert: (customerPepeSecondAddress townIs: 'Florida').
	self assert: (customerPepeSecondAddress zipCodeIs: 1122).
	self assert: (customerPepeSecondAddress provinceIs: 'Buenos Aires').!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 20:01:17'!
assertImportedCustomerWithId: aCustomerId nameIs: aCustomerFirstName lastNameIs: aCustomerLastName idTypeIs: aCustomerIdType
	
	| customerPepe |
	
	customerPepe := (session select: [:aCustomer | aCustomer idIs: aCustomerId] ofType: Customer) anyOne. 
	self assert: (customerPepe firstNameIs: aCustomerFirstName).
	self assert: (customerPepe lastNameIs: aCustomerLastName).
	self assert: (customerPepe idTypeIs: aCustomerIdType).
! !
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 20:01:24' prior: 50553389!
assertImportedCustomerWithId: aCustomerId nameIs: aCustomerFirstName lastNameIs: aCustomerLastName idTypeIs: aCustomerIdType
	
	| customer |
	
	customer := (session select: [:aCustomer | aCustomer idIs: aCustomerId] ofType: Customer) anyOne. 
	self assert: (customer firstNameIs: aCustomerFirstName).
	self assert: (customer lastNameIs: aCustomerLastName).
	self assert: (customer idTypeIs: aCustomerIdType).
! !
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 20:02:01' prior: 50553307!
assertCustomerPepeSanchezWasCorrectlyImported
	
	| customerPepe customerPepeFirstAddress customerPepeSecondAddress |
	
	self assertImportedCustomerWithId: '22333444' nameIs: 'Pepe' lastNameIs: 'Sanchez' idTypeIs: 'D'.
	
	customerPepe := (session select: [:aCustomer | aCustomer idIs: '22333444'] ofType: Customer) anyOne. 
	self assert: (customerPepe firstNameIs: 'Pepe').
	self assert: (customerPepe lastNameIs: 'Sanchez').
	self assert: (customerPepe idTypeIs: 'D').
	
	customerPepeFirstAddress := customerPepe addressWithStreetName: 'San Martin' ifNone: [self fail].
	
	self assert: (customerPepeFirstAddress streetNumberIs: 3322).
	self assert: (customerPepeFirstAddress townIs: 'Olivos').
	self assert: (customerPepeFirstAddress zipCodeIs: 1636).
	self assert: (customerPepeFirstAddress provinceIs: 'BsAs').
	
	customerPepeSecondAddress := customerPepe addressWithStreetName: 'Maipu' ifNone: [self fail].
	
	self assert: (customerPepeSecondAddress streetNumberIs: 888).
	self assert: (customerPepeSecondAddress townIs: 'Florida').
	self assert: (customerPepeSecondAddress zipCodeIs: 1122).
	self assert: (customerPepeSecondAddress provinceIs: 'Buenos Aires').! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 20:02:01'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 20:02:05' prior: 50553422!
assertCustomerPepeSanchezWasCorrectlyImported
	
	| customerPepe customerPepeFirstAddress customerPepeSecondAddress |
	
	self assertImportedCustomerWithId: '22333444' nameIs: 'Pepe' lastNameIs: 'Sanchez' idTypeIs: 'D'.
	
	customerPepeFirstAddress := customerPepe addressWithStreetName: 'San Martin' ifNone: [self fail].
	
	self assert: (customerPepeFirstAddress streetNumberIs: 3322).
	self assert: (customerPepeFirstAddress townIs: 'Olivos').
	self assert: (customerPepeFirstAddress zipCodeIs: 1636).
	self assert: (customerPepeFirstAddress provinceIs: 'BsAs').
	
	customerPepeSecondAddress := customerPepe addressWithStreetName: 'Maipu' ifNone: [self fail].
	
	self assert: (customerPepeSecondAddress streetNumberIs: 888).
	self assert: (customerPepeSecondAddress townIs: 'Florida').
	self assert: (customerPepeSecondAddress zipCodeIs: 1122).
	self assert: (customerPepeSecondAddress provinceIs: 'Buenos Aires').! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 20:02:09'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 20:02:10'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 20:02:26' prior: 50553464!
assertCustomerPepeSanchezWasCorrectlyImported
	
	| customerPepe customerPepeFirstAddress customerPepeSecondAddress |
	
	self assertImportedCustomerWithId: '22333444' nameIs: 'Pepe' lastNameIs: 'Sanchez' idTypeIs: 'D'.
	
	customerPepe := (session select: [:aCustomer | aCustomer idIs: '22333444'] ofType: Customer) anyOne. 
	customerPepeFirstAddress := customerPepe addressWithStreetName: 'San Martin' ifNone: [self fail].
	
	self assert: (customerPepeFirstAddress streetNumberIs: 3322).
	self assert: (customerPepeFirstAddress townIs: 'Olivos').
	self assert: (customerPepeFirstAddress zipCodeIs: 1636).
	self assert: (customerPepeFirstAddress provinceIs: 'BsAs').
	
	customerPepeSecondAddress := customerPepe addressWithStreetName: 'Maipu' ifNone: [self fail].
	
	self assert: (customerPepeSecondAddress streetNumberIs: 888).
	self assert: (customerPepeSecondAddress townIs: 'Florida').
	self assert: (customerPepeSecondAddress zipCodeIs: 1122).
	self assert: (customerPepeSecondAddress provinceIs: 'Buenos Aires').! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 20:02:27'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 20:03:31'!
customerWithId: aCustomerId
	
	^(session select: [:aCustomer | aCustomer idIs: aCustomerId] ofType: Customer) anyOne. ! !
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 20:03:49' prior: 50553406!
assertImportedCustomerWithId: aCustomer nameIs: aCustomerFirstName lastNameIs: aCustomerLastName idTypeIs: aCustomerIdType
	
	self assert: (aCustomer firstNameIs: aCustomerFirstName).
	self assert: (aCustomer lastNameIs: aCustomerLastName).
	self assert: (aCustomer idTypeIs: aCustomerIdType).
! !
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 20:04:28' prior: 50553500!
assertCustomerPepeSanchezWasCorrectlyImported
	
	| customerPepe customerPepeFirstAddress customerPepeSecondAddress |
	
	customerPepe := self customerWithId: '22333444'.
	self assertImportedCustomerWithId: customerPepe nameIs: 'Pepe' lastNameIs: 'Sanchez' idTypeIs: 'D'.
	
	customerPepeFirstAddress := customerPepe addressWithStreetName: 'San Martin' ifNone: [self fail].
	
	self assert: (customerPepeFirstAddress streetNumberIs: 3322).
	self assert: (customerPepeFirstAddress townIs: 'Olivos').
	self assert: (customerPepeFirstAddress zipCodeIs: 1636).
	self assert: (customerPepeFirstAddress provinceIs: 'BsAs').
	
	customerPepeSecondAddress := customerPepe addressWithStreetName: 'Maipu' ifNone: [self fail].
	
	self assert: (customerPepeSecondAddress streetNumberIs: 888).
	self assert: (customerPepeSecondAddress townIs: 'Florida').
	self assert: (customerPepeSecondAddress zipCodeIs: 1122).
	self assert: (customerPepeSecondAddress provinceIs: 'Buenos Aires').! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 20:04:29'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 20:04:38'!
assertImportedCustomer: aCustomer nameIs: aCustomerFirstName lastNameIs: aCustomerLastName idTypeIs: aCustomerIdType
	
	self assert: (aCustomer firstNameIs: aCustomerFirstName).
	self assert: (aCustomer lastNameIs: aCustomerLastName).
	self assert: (aCustomer idTypeIs: aCustomerIdType).
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/10/2022 20:04:38' prior: 50553556!
assertCustomerPepeSanchezWasCorrectlyImported
	
	| customerPepe customerPepeFirstAddress customerPepeSecondAddress |
	
	customerPepe := self customerWithId: '22333444'.
	self assertImportedCustomer: customerPepe nameIs: 'Pepe' lastNameIs: 'Sanchez' idTypeIs: 'D'.
	
	customerPepeFirstAddress := customerPepe addressWithStreetName: 'San Martin' ifNone: [self fail].
	
	self assert: (customerPepeFirstAddress streetNumberIs: 3322).
	self assert: (customerPepeFirstAddress townIs: 'Olivos').
	self assert: (customerPepeFirstAddress zipCodeIs: 1636).
	self assert: (customerPepeFirstAddress provinceIs: 'BsAs').
	
	customerPepeSecondAddress := customerPepe addressWithStreetName: 'Maipu' ifNone: [self fail].
	
	self assert: (customerPepeSecondAddress streetNumberIs: 888).
	self assert: (customerPepeSecondAddress townIs: 'Florida').
	self assert: (customerPepeSecondAddress zipCodeIs: 1122).
	self assert: (customerPepeSecondAddress provinceIs: 'Buenos Aires').! !

!methodRemoval: ImportTest #assertImportedCustomerWithId:nameIs:lastNameIs:idTypeIs: stamp: 'AS 11/10/2022 20:04:38'!
assertImportedCustomerWithId: aCustomer nameIs: aCustomerFirstName lastNameIs: aCustomerLastName idTypeIs: aCustomerIdType
	
	self assert: (aCustomer firstNameIs: aCustomerFirstName).
	self assert: (aCustomer lastNameIs: aCustomerLastName).
	self assert: (aCustomer idTypeIs: aCustomerIdType).
!

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 20:04:40'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 20:05:14' prior: 50553281!
assertCustomerJuanPerezWasCorrectlyImported
	
	| customerJuanPerez customerPepeFirstAddress |
	
	customerJuanPerez := (session select: [:aCustomer | aCustomer idIs: '23-25666777-9'] ofType: Customer) anyOne. 
	self assert: (customerJuanPerez firstNameIs: 'Juan').
	self assert: (customerJuanPerez lastNameIs: 'Perez').
	self assert: (customerJuanPerez idTypeIs: 'C').

	customerPepeFirstAddress := customerJuanPerez addressWithStreetName: 'Alem' ifNone: [self fail].
	
	self assert: (customerPepeFirstAddress streetNumberIs: 1122).
	self assert: (customerPepeFirstAddress townIs: 'CABA').
	self assert: (customerPepeFirstAddress zipCodeIs: 1001).
	self assert: (customerPepeFirstAddress provinceIs: 'CABA').
! !
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 20:06:01' prior: 50553653!
assertCustomerJuanPerezWasCorrectlyImported
	
	| customerJuanPerez customerPepeFirstAddress |
	
	customerJuanPerez := self customerWithId: '23-25666777-9'.
	self assertImportedCustomer: customerJuanPerez nameIs: 'Juan' lastNameIs: 'Perez' idTypeIs: 'C'.

	customerPepeFirstAddress := customerJuanPerez addressWithStreetName: 'Alem' ifNone: [self fail].
	
	self assert: (customerPepeFirstAddress streetNumberIs: 1122).
	self assert: (customerPepeFirstAddress townIs: 'CABA').
	self assert: (customerPepeFirstAddress zipCodeIs: 1001).
	self assert: (customerPepeFirstAddress provinceIs: 'CABA').
! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 20:06:01'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 20:06:28'!
assertImportedCustomer: aCustomer importedNameIs: aCustomerFirstName lastNameIs: aCustomerLastName idTypeIs: aCustomerIdType
	
	self assert: (aCustomer firstNameIs: aCustomerFirstName).
	self assert: (aCustomer lastNameIs: aCustomerLastName).
	self assert: (aCustomer idTypeIs: aCustomerIdType).
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/10/2022 20:06:29' prior: 50553604!
assertCustomerPepeSanchezWasCorrectlyImported
	
	| customerPepe customerPepeFirstAddress customerPepeSecondAddress |
	
	customerPepe := self customerWithId: '22333444'.
	self assertImportedCustomer: customerPepe importedNameIs: 'Pepe' lastNameIs: 'Sanchez' idTypeIs: 'D'.
	
	customerPepeFirstAddress := customerPepe addressWithStreetName: 'San Martin' ifNone: [self fail].
	
	self assert: (customerPepeFirstAddress streetNumberIs: 3322).
	self assert: (customerPepeFirstAddress townIs: 'Olivos').
	self assert: (customerPepeFirstAddress zipCodeIs: 1636).
	self assert: (customerPepeFirstAddress provinceIs: 'BsAs').
	
	customerPepeSecondAddress := customerPepe addressWithStreetName: 'Maipu' ifNone: [self fail].
	
	self assert: (customerPepeSecondAddress streetNumberIs: 888).
	self assert: (customerPepeSecondAddress townIs: 'Florida').
	self assert: (customerPepeSecondAddress zipCodeIs: 1122).
	self assert: (customerPepeSecondAddress provinceIs: 'Buenos Aires').! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/10/2022 20:06:29' prior: 50553678!
assertCustomerJuanPerezWasCorrectlyImported
	
	| customerJuanPerez customerPepeFirstAddress |
	
	customerJuanPerez := self customerWithId: '23-25666777-9'.
	self assertImportedCustomer: customerJuanPerez importedNameIs: 'Juan' lastNameIs: 'Perez' idTypeIs: 'C'.

	customerPepeFirstAddress := customerJuanPerez addressWithStreetName: 'Alem' ifNone: [self fail].
	
	self assert: (customerPepeFirstAddress streetNumberIs: 1122).
	self assert: (customerPepeFirstAddress townIs: 'CABA').
	self assert: (customerPepeFirstAddress zipCodeIs: 1001).
	self assert: (customerPepeFirstAddress provinceIs: 'CABA').
! !

!methodRemoval: ImportTest #assertImportedCustomer:nameIs:lastNameIs:idTypeIs: stamp: 'AS 11/10/2022 20:06:29'!
assertImportedCustomer: aCustomer nameIs: aCustomerFirstName lastNameIs: aCustomerLastName idTypeIs: aCustomerIdType
	
	self assert: (aCustomer firstNameIs: aCustomerFirstName).
	self assert: (aCustomer lastNameIs: aCustomerLastName).
	self assert: (aCustomer idTypeIs: aCustomerIdType).
!

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 20:06:45'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 20:07:37'!
assertAddress: customerPepeFirstAddress

	self assert: (customerPepeFirstAddress streetNumberIs: 3322).
	self assert: (customerPepeFirstAddress townIs: 'Olivos').
	self assert: (customerPepeFirstAddress zipCodeIs: 1636).
	self assert: (customerPepeFirstAddress provinceIs: 'BsAs')! !
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 20:07:37' prior: 50553715!
assertCustomerPepeSanchezWasCorrectlyImported
	
	| customerPepe customerPepeFirstAddress customerPepeSecondAddress |
	
	customerPepe := self customerWithId: '22333444'.
	self assertImportedCustomer: customerPepe importedNameIs: 'Pepe' lastNameIs: 'Sanchez' idTypeIs: 'D'.
	
	customerPepeFirstAddress := customerPepe addressWithStreetName: 'San Martin' ifNone: [self fail].
	
	self assertAddress: customerPepeFirstAddress.
	
	customerPepeSecondAddress := customerPepe addressWithStreetName: 'Maipu' ifNone: [self fail].
	
	self assert: (customerPepeSecondAddress streetNumberIs: 888).
	self assert: (customerPepeSecondAddress townIs: 'Florida').
	self assert: (customerPepeSecondAddress zipCodeIs: 1122).
	self assert: (customerPepeSecondAddress provinceIs: 'Buenos Aires').! !
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 20:08:07'!
assertAddress: customerPepeFirstAddress streetNumberIs: aStreetNumber 

	self assert: (customerPepeFirstAddress streetNumberIs: 3322).
	self assert: (customerPepeFirstAddress townIs: 'Olivos').
	self assert: (customerPepeFirstAddress zipCodeIs: 1636).
	self assert: (customerPepeFirstAddress provinceIs: 'BsAs')! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/10/2022 20:08:07' prior: 50553797!
assertCustomerPepeSanchezWasCorrectlyImported
	
	| customerPepe customerPepeFirstAddress customerPepeSecondAddress |
	
	customerPepe := self customerWithId: '22333444'.
	self assertImportedCustomer: customerPepe importedNameIs: 'Pepe' lastNameIs: 'Sanchez' idTypeIs: 'D'.
	
	customerPepeFirstAddress := customerPepe addressWithStreetName: 'San Martin' ifNone: [self fail].
	
	self assertAddress: customerPepeFirstAddress streetNumberIs: 3322.
	
	customerPepeSecondAddress := customerPepe addressWithStreetName: 'Maipu' ifNone: [self fail].
	
	self assert: (customerPepeSecondAddress streetNumberIs: 888).
	self assert: (customerPepeSecondAddress townIs: 'Florida').
	self assert: (customerPepeSecondAddress zipCodeIs: 1122).
	self assert: (customerPepeSecondAddress provinceIs: 'Buenos Aires').! !

!methodRemoval: ImportTest #assertAddress: stamp: 'AS 11/10/2022 20:08:07'!
assertAddress: customerPepeFirstAddress

	self assert: (customerPepeFirstAddress streetNumberIs: 3322).
	self assert: (customerPepeFirstAddress townIs: 'Olivos').
	self assert: (customerPepeFirstAddress zipCodeIs: 1636).
	self assert: (customerPepeFirstAddress provinceIs: 'BsAs')!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/10/2022 20:08:07' prior: 50553824!
assertAddress: customerPepeFirstAddress streetNumberIs: aStreetNumber 

	self assert: (customerPepeFirstAddress streetNumberIs: aStreetNumber).
	self assert: (customerPepeFirstAddress townIs: 'Olivos').
	self assert: (customerPepeFirstAddress zipCodeIs: 1636).
	self assert: (customerPepeFirstAddress provinceIs: 'BsAs')! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 20:08:09'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 20:08:47'!
assertAddress: customerPepeFirstAddress streetNumberIs: aStreetNumber townIs: aTown  

	self assert: (customerPepeFirstAddress streetNumberIs: aStreetNumber).
	self assert: (customerPepeFirstAddress townIs: 'Olivos').
	self assert: (customerPepeFirstAddress zipCodeIs: 1636).
	self assert: (customerPepeFirstAddress provinceIs: 'BsAs')! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/10/2022 20:08:47' prior: 50553837!
assertCustomerPepeSanchezWasCorrectlyImported
	
	| customerPepe customerPepeFirstAddress customerPepeSecondAddress |
	
	customerPepe := self customerWithId: '22333444'.
	self assertImportedCustomer: customerPepe importedNameIs: 'Pepe' lastNameIs: 'Sanchez' idTypeIs: 'D'.
	
	customerPepeFirstAddress := customerPepe addressWithStreetName: 'San Martin' ifNone: [self fail].
	
	self assertAddress: customerPepeFirstAddress streetNumberIs: 3322 townIs: 'Olivos'.
	
	customerPepeSecondAddress := customerPepe addressWithStreetName: 'Maipu' ifNone: [self fail].
	
	self assert: (customerPepeSecondAddress streetNumberIs: 888).
	self assert: (customerPepeSecondAddress townIs: 'Florida').
	self assert: (customerPepeSecondAddress zipCodeIs: 1122).
	self assert: (customerPepeSecondAddress provinceIs: 'Buenos Aires').! !

!methodRemoval: ImportTest #assertAddress:streetNumberIs: stamp: 'AS 11/10/2022 20:08:47'!
assertAddress: customerPepeFirstAddress streetNumberIs: aStreetNumber 

	self assert: (customerPepeFirstAddress streetNumberIs: aStreetNumber).
	self assert: (customerPepeFirstAddress townIs: 'Olivos').
	self assert: (customerPepeFirstAddress zipCodeIs: 1636).
	self assert: (customerPepeFirstAddress provinceIs: 'BsAs')!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/10/2022 20:08:47' prior: 50553892!
assertAddress: customerPepeFirstAddress streetNumberIs: aStreetNumber townIs: aTown  

	self assert: (customerPepeFirstAddress streetNumberIs: aStreetNumber).
	self assert: (customerPepeFirstAddress townIs: aTown).
	self assert: (customerPepeFirstAddress zipCodeIs: 1636).
	self assert: (customerPepeFirstAddress provinceIs: 'BsAs')! !
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 20:09:05'!
assertAddress: customerPepeFirstAddress streetNumberIs: aStreetNumber townIs: aTown zipCodeIs: aZipCode   

	self assert: (customerPepeFirstAddress streetNumberIs: aStreetNumber).
	self assert: (customerPepeFirstAddress townIs: aTown).
	self assert: (customerPepeFirstAddress zipCodeIs: 1636).
	self assert: (customerPepeFirstAddress provinceIs: 'BsAs')! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/10/2022 20:09:05' prior: 50553906!
assertCustomerPepeSanchezWasCorrectlyImported
	
	| customerPepe customerPepeFirstAddress customerPepeSecondAddress |
	
	customerPepe := self customerWithId: '22333444'.
	self assertImportedCustomer: customerPepe importedNameIs: 'Pepe' lastNameIs: 'Sanchez' idTypeIs: 'D'.
	
	customerPepeFirstAddress := customerPepe addressWithStreetName: 'San Martin' ifNone: [self fail].
	
	self assertAddress: customerPepeFirstAddress streetNumberIs: 3322 townIs: 'Olivos' zipCodeIs: 1636.
	
	customerPepeSecondAddress := customerPepe addressWithStreetName: 'Maipu' ifNone: [self fail].
	
	self assert: (customerPepeSecondAddress streetNumberIs: 888).
	self assert: (customerPepeSecondAddress townIs: 'Florida').
	self assert: (customerPepeSecondAddress zipCodeIs: 1122).
	self assert: (customerPepeSecondAddress provinceIs: 'Buenos Aires').! !

!methodRemoval: ImportTest #assertAddress:streetNumberIs:townIs: stamp: 'AS 11/10/2022 20:09:05'!
assertAddress: customerPepeFirstAddress streetNumberIs: aStreetNumber townIs: aTown  

	self assert: (customerPepeFirstAddress streetNumberIs: aStreetNumber).
	self assert: (customerPepeFirstAddress townIs: aTown).
	self assert: (customerPepeFirstAddress zipCodeIs: 1636).
	self assert: (customerPepeFirstAddress provinceIs: 'BsAs')!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/10/2022 20:09:05' prior: 50553961!
assertAddress: customerPepeFirstAddress streetNumberIs: aStreetNumber townIs: aTown zipCodeIs: aZipCode   

	self assert: (customerPepeFirstAddress streetNumberIs: aStreetNumber).
	self assert: (customerPepeFirstAddress townIs: aTown).
	self assert: (customerPepeFirstAddress zipCodeIs: aZipCode).
	self assert: (customerPepeFirstAddress provinceIs: 'BsAs')! !
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 20:09:33'!
assertAddress: customerPepeFirstAddress streetNumberIs: aStreetNumber townIs: aTown zipCodeIs: aZipCode provinceIs: provinceIs    

	self assert: (customerPepeFirstAddress streetNumberIs: aStreetNumber).
	self assert: (customerPepeFirstAddress townIs: aTown).
	self assert: (customerPepeFirstAddress zipCodeIs: aZipCode).
	self assert: (customerPepeFirstAddress provinceIs: 'BsAs')! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/10/2022 20:09:33' prior: 50553976!
assertCustomerPepeSanchezWasCorrectlyImported
	
	| customerPepe customerPepeFirstAddress customerPepeSecondAddress |
	
	customerPepe := self customerWithId: '22333444'.
	self assertImportedCustomer: customerPepe importedNameIs: 'Pepe' lastNameIs: 'Sanchez' idTypeIs: 'D'.
	
	customerPepeFirstAddress := customerPepe addressWithStreetName: 'San Martin' ifNone: [self fail].
	
	self assertAddress: customerPepeFirstAddress streetNumberIs: 3322 townIs: 'Olivos' zipCodeIs: 1636 provinceIs: 'BsAs'.
	
	customerPepeSecondAddress := customerPepe addressWithStreetName: 'Maipu' ifNone: [self fail].
	
	self assert: (customerPepeSecondAddress streetNumberIs: 888).
	self assert: (customerPepeSecondAddress townIs: 'Florida').
	self assert: (customerPepeSecondAddress zipCodeIs: 1122).
	self assert: (customerPepeSecondAddress provinceIs: 'Buenos Aires').! !

!methodRemoval: ImportTest #assertAddress:streetNumberIs:townIs:zipCodeIs: stamp: 'AS 11/10/2022 20:09:33'!
assertAddress: customerPepeFirstAddress streetNumberIs: aStreetNumber townIs: aTown zipCodeIs: aZipCode   

	self assert: (customerPepeFirstAddress streetNumberIs: aStreetNumber).
	self assert: (customerPepeFirstAddress townIs: aTown).
	self assert: (customerPepeFirstAddress zipCodeIs: aZipCode).
	self assert: (customerPepeFirstAddress provinceIs: 'BsAs')!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/10/2022 20:09:33' prior: 50554033!
assertAddress: customerPepeFirstAddress streetNumberIs: aStreetNumber townIs: aTown zipCodeIs: aZipCode provinceIs: provinceIs    

	self assert: (customerPepeFirstAddress streetNumberIs: aStreetNumber).
	self assert: (customerPepeFirstAddress townIs: aTown).
	self assert: (customerPepeFirstAddress zipCodeIs: aZipCode).
	self assert: (customerPepeFirstAddress provinceIs: provinceIs)! !
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 20:09:37' prior: 50554093!
assertAddress: customerPepeFirstAddress streetNumberIs: aStreetNumber townIs: aTown zipCodeIs: aZipCode provinceIs: aProvince    

	self assert: (customerPepeFirstAddress streetNumberIs: aStreetNumber).
	self assert: (customerPepeFirstAddress townIs: aTown).
	self assert: (customerPepeFirstAddress zipCodeIs: aZipCode).
	self assert: (customerPepeFirstAddress provinceIs: aProvince)! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 20:09:39'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 20:15:27' prior: 50554048!
assertCustomerPepeSanchezWasCorrectlyImported
	
	| customerPepe customerPepeFirstAddress customerPepeSecondAddress |
	
	customerPepe := self customerWithId: '22333444'.
	self assertImportedCustomer: customerPepe importedNameIs: 'Pepe' lastNameIs: 'Sanchez' idTypeIs: 'D'.
	
	customerPepeFirstAddress := customerPepe addressWithStreetName: 'San Martin' ifNone: [self fail].
	
	self assertAddress: customerPepeFirstAddress streetNumberIs: 3322 townIs: 'Olivos' zipCodeIs: 1636 provinceIs: 'BsAs'.
	
	customerPepeSecondAddress := customerPepe addressWithStreetName: 'Maipu' ifNone: [self fail].
	
	self assertAddress: customerPepeSecondAddress streetNumberIs: 888 townIs: 'Florida' zipCodeIs: 1122 provinceIs: 'Buenos Aires'.! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 20:15:28'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 20:15:34' prior: 50554126!
assertCustomerPepeSanchezWasCorrectlyImported
	
	| customerPepe customerPepeFirstAddress customerPepeSecondAddress |
	
	customerPepe := self customerWithId: '22333444'.
	self assertImportedCustomer: customerPepe importedNameIs: 'Pepe' lastNameIs: 'Sanchez' idTypeIs: 'D'.
	
	customerPepeFirstAddress := customerPepe addressWithStreetName: 'San Martin' ifNone: [self fail].
	self assertAddress: customerPepeFirstAddress streetNumberIs: 3322 townIs: 'Olivos' zipCodeIs: 1636 provinceIs: 'BsAs'.
	
	customerPepeSecondAddress := customerPepe addressWithStreetName: 'Maipu' ifNone: [self fail].
	self assertAddress: customerPepeSecondAddress streetNumberIs: 888 townIs: 'Florida' zipCodeIs: 1122 provinceIs: 'Buenos Aires'.! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 20:15:35'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 20:18:04' prior: 50553749!
assertCustomerJuanPerezWasCorrectlyImported
	
	| customerJuanPerez customerPepeFirstAddress |
	
	customerJuanPerez := self customerWithId: '23-25666777-9'.
	self assertImportedCustomer: customerJuanPerez importedNameIs: 'Juan' lastNameIs: 'Perez' idTypeIs: 'C'.

	customerPepeFirstAddress := customerJuanPerez addressWithStreetName: 'Alem' ifNone: [self fail].
	
	self assertAddress: customerPepeFirstAddress streetNumberIs: 1122 townIs: 'CABA'  zipCodeIs: 1001 provinceIs: 'CABA'.! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 20:18:04'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 20:18:13' prior: 50554182!
assertCustomerJuanPerezWasCorrectlyImported
	
	| customerJuanPerez customerPepeFirstAddress |
	
	customerJuanPerez := self customerWithId: '23-25666777-9'.
	self assertImportedCustomer: customerJuanPerez importedNameIs: 'Juan' lastNameIs: 'Perez' idTypeIs: 'C'.

	customerPepeFirstAddress := customerJuanPerez addressWithStreetName: 'Alem' ifNone: [self fail].
	self assertAddress: customerPepeFirstAddress streetNumberIs: 1122 townIs: 'CABA'  zipCodeIs: 1001 provinceIs: 'CABA'.! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 20:18:13'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 20:18:35'!
assertImportedAddress: customerPepeFirstAddress importedStreetNumberIs: aStreetNumber townIs: aTown zipCodeIs: aZipCode provinceIs: aProvince    

	self assert: (customerPepeFirstAddress streetNumberIs: aStreetNumber).
	self assert: (customerPepeFirstAddress townIs: aTown).
	self assert: (customerPepeFirstAddress zipCodeIs: aZipCode).
	self assert: (customerPepeFirstAddress provinceIs: aProvince)! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/10/2022 20:18:35' prior: 50554154!
assertCustomerPepeSanchezWasCorrectlyImported
	
	| customerPepe customerPepeFirstAddress customerPepeSecondAddress |
	
	customerPepe := self customerWithId: '22333444'.
	self assertImportedCustomer: customerPepe importedNameIs: 'Pepe' lastNameIs: 'Sanchez' idTypeIs: 'D'.
	
	customerPepeFirstAddress := customerPepe addressWithStreetName: 'San Martin' ifNone: [self fail].
	self assertImportedAddress: customerPepeFirstAddress importedStreetNumberIs: 3322 townIs: 'Olivos' zipCodeIs: 1636 provinceIs: 'BsAs'.
	
	customerPepeSecondAddress := customerPepe addressWithStreetName: 'Maipu' ifNone: [self fail].
	self assertImportedAddress: customerPepeSecondAddress importedStreetNumberIs: 888 townIs: 'Florida' zipCodeIs: 1122 provinceIs: 'Buenos Aires'.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/10/2022 20:18:35' prior: 50554203!
assertCustomerJuanPerezWasCorrectlyImported
	
	| customerJuanPerez customerPepeFirstAddress |
	
	customerJuanPerez := self customerWithId: '23-25666777-9'.
	self assertImportedCustomer: customerJuanPerez importedNameIs: 'Juan' lastNameIs: 'Perez' idTypeIs: 'C'.

	customerPepeFirstAddress := customerJuanPerez addressWithStreetName: 'Alem' ifNone: [self fail].
	self assertImportedAddress: customerPepeFirstAddress importedStreetNumberIs: 1122 townIs: 'CABA'  zipCodeIs: 1001 provinceIs: 'CABA'.! !

!methodRemoval: ImportTest #assertAddress:streetNumberIs:townIs:zipCodeIs:provinceIs: stamp: 'AS 11/10/2022 20:18:35'!
assertAddress: customerPepeFirstAddress streetNumberIs: aStreetNumber townIs: aTown zipCodeIs: aZipCode provinceIs: aProvince    

	self assert: (customerPepeFirstAddress streetNumberIs: aStreetNumber).
	self assert: (customerPepeFirstAddress townIs: aTown).
	self assert: (customerPepeFirstAddress zipCodeIs: aZipCode).
	self assert: (customerPepeFirstAddress provinceIs: aProvince)!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 20:22:29' prior: 50553344!
test01Import
	
	
	(CustomerImporter from: readStream into: session) value. 
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	self assertCustomerPepeSanchezWasCorrectlyImported .
	self assertCustomerJuanPerezWasCorrectlyImported ! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 20:22:30'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 20:22:31'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 20:22:35' prior: 50554300!
test01Import
	
	
	(CustomerImporter from: readStream into: session) value. 
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	self assertCustomerPepeSanchezWasCorrectlyImported.
	self assertCustomerJuanPerezWasCorrectlyImported.! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 20:22:35'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 20:22:36'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 20:22:50'!
assertNumberOfImportedCustomersIs

	^ self assert: 2 equals: (session selectAllOfType: Customer) size! !
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 20:22:50' prior: 50554316!
test01Import
	
	
	(CustomerImporter from: readStream into: session) value. 
	
	self assertNumberOfImportedCustomersIs.
	
	self assertCustomerPepeSanchezWasCorrectlyImported.
	self assertCustomerJuanPerezWasCorrectlyImported.! !
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 20:23:08'!
assertNumberOfImportedCustomersIs: aNumberOfCustomers

	^ self assert: 2 equals: (session selectAllOfType: Customer) size! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/10/2022 20:23:08' prior: 50554337!
test01Import
	
	
	(CustomerImporter from: readStream into: session) value. 
	
	self assertNumberOfImportedCustomersIs: 2.
	
	self assertCustomerPepeSanchezWasCorrectlyImported.
	self assertCustomerJuanPerezWasCorrectlyImported.! !

!methodRemoval: ImportTest #assertNumberOfImportedCustomersIs stamp: 'AS 11/10/2022 20:23:08'!
assertNumberOfImportedCustomersIs

	^ self assert: 2 equals: (session selectAllOfType: Customer) size!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 11/10/2022 20:23:08' prior: 50554347!
assertNumberOfImportedCustomersIs: aNumberOfCustomers

	^ self assert: aNumberOfCustomers equals: (session selectAllOfType: Customer) size! !
!ImportTest methodsFor: 'tests' stamp: 'AS 11/10/2022 20:23:12' prior: 50554354!
test01Import
	
	
	(CustomerImporter from: readStream into: session) value. 
	
	self assertNumberOfImportedCustomersIs: 2.
	self assertCustomerPepeSanchezWasCorrectlyImported.
	self assertCustomerJuanPerezWasCorrectlyImported.! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 20:23:13'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 20:23:14'!
PASSED!
!ImportTest methodsFor: 'assertions' stamp: 'AS 11/10/2022 20:23:39' prior: 50554266!
assertCustomerJuanPerezWasCorrectlyImported
	
	| customerJuanPerez customerPepeFirstAddress |
	
	self assertImportedCustomer: (self customerWithId: '23-25666777-9') importedNameIs: 'Juan' lastNameIs: 'Perez' idTypeIs: 'C'.

	customerPepeFirstAddress := customerJuanPerez addressWithStreetName: 'Alem' ifNone: [self fail].
	self assertImportedAddress: customerPepeFirstAddress importedStreetNumberIs: 1122 townIs: 'CABA'  zipCodeIs: 1001 provinceIs: 'CABA'.! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 20:23:41'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 20:23:42'!
ERROR!
!ImportTest methodsFor: 'assertions' stamp: 'AS 11/10/2022 20:23:48' prior: 50554393!
assertCustomerJuanPerezWasCorrectlyImported
	
	| customerJuanPerez customerPepeFirstAddress |
	
	customerJuanPerez := self customerWithId: '23-25666777-9'.
	self assertImportedCustomer: customerJuanPerez importedNameIs: 'Juan' lastNameIs: 'Perez' idTypeIs: 'C'.

	customerPepeFirstAddress := customerJuanPerez addressWithStreetName: 'Alem' ifNone: [self fail].
	self assertImportedAddress: customerPepeFirstAddress importedStreetNumberIs: 1122 townIs: 'CABA'  zipCodeIs: 1001 provinceIs: 'CABA'.! !

!testRun: #ImportTest #test01Import stamp: 'AS 11/10/2022 20:23:48'!
PASSED!

----SNAPSHOT----(10 November 2022 20:24:42) CuisUniversity-5481.image priorSource: 7091550!