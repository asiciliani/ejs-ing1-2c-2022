

----QUIT----(11 September 2022 19:10:09) CuisUniversity-5481.image priorSource: 2810882!

----STARTUP---- (11 September 2022 19:10:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5481.image!


----QUIT----(11 September 2022 19:10:10) CuisUniversity-5481.image priorSource: 7059465!

----STARTUP---- (27 October 2022 19:09:23) as /home/andisici/Documents/2022/ing-2c2022/linux64/CuisUniversity-5481.image!


TestCase subclass: #CartTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTests category: 'TusLibros' stamp: 'AS 10/27/2022 20:37:26'!
TestCase subclass: #CartTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'AS 10/27/2022 20:39:54'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTests methodsFor: 'nil' stamp: 'AS 10/27/2022 20:39:20'!
test01CartIsEmptyWhenCreated

	self assert: Cart new isEmpty.! !

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 20:40:12'!
ERROR!
!Cart methodsFor: 'creation' stamp: 'AS 10/27/2022 20:40:19'!
isEmpty
	self shouldBeImplemented.! !
!Cart methodsFor: 'creation' stamp: 'AS 10/27/2022 20:40:52' prior: 50552297!
isEmpty
	
	^true! !

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 20:40:54'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 20:40:54'!
PASSED!
!CartTests methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 20:43:42'!
test02CartIsNotEmptyAfterAddingElement
	
	| cart |
	cart := Cart new.
	cart add: 'element'.
	
	self deny: Cart new isEmpty.! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 20:43:53' prior: 50552310!
test02CartIsNotEmptyAfterAddingElement
	
	| cart |
	cart := Cart new.
	cart add: 'element'.
	
	self deny: cart isEmpty.! !

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingElement stamp: 'AS 10/27/2022 20:44:04'!
ERROR!
!Cart methodsFor: 'adding' stamp: 'AS 10/27/2022 20:44:22'!
add: aString 
	self shouldBeImplemented.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'AS 10/27/2022 20:44:36'!
Object subclass: #Cart
	instanceVariableNames: 'element'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'adding' stamp: 'AS 10/27/2022 20:44:35' prior: 50552326!
add: anElement 
	element := anElement.! !

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingElement stamp: 'AS 10/27/2022 20:44:37'!
FAILURE!
!Cart methodsFor: 'creation' stamp: 'AS 10/27/2022 20:45:24' prior: 50552301!
isEmpty
	
	^element isNil ! !

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 20:45:25'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingElement stamp: 'AS 10/27/2022 20:45:25'!
PASSED!
!CartTests methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 20:46:33'!
test03CartSizeIsAmountOfNewAddedElements
	
	| cart |
	cart := Cart new.
	cart add: 'element1'.
	cart add: 'element2'.
	
	self assert: 2 equals: cart size.! !

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedElements stamp: 'AS 10/27/2022 20:46:36'!
ERROR!
!Cart methodsFor: 'creation' stamp: 'AS 10/27/2022 20:47:02' overrides: 16901663!
size
	
	^element size ! !

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 20:47:18'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingElement stamp: 'AS 10/27/2022 20:47:18'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedElements stamp: 'AS 10/27/2022 20:47:18'!
FAILURE!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedElements stamp: 'AS 10/27/2022 20:47:18'!
FAILURE!
!Cart methodsFor: 'adding' stamp: 'AS 10/27/2022 20:47:52' prior: 50552337!
add: anElement 

	element add: anElement.! !
!Cart methodsFor: 'adding' stamp: 'AS 10/27/2022 20:48:07'!
initialization

	element := OrderedCollection new.! !
!Cart methodsFor: 'initialization' stamp: 'AS 10/27/2022 20:48:54' overrides: 16920235!
initialize

	element := OrderedCollection new.! !

!methodRemoval: Cart #initialization stamp: 'AS 10/27/2022 20:48:57'!
initialization

	element := OrderedCollection new.!
!Cart methodsFor: 'size' stamp: 'AS 10/27/2022 20:49:11' prior: 50552344!
isEmpty
	
	^element isEmpty ! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'AS 10/27/2022 20:49:14'!
Object subclass: #Cart
	instanceVariableNames: 'elements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 20:49:14' prior: 50552398!
isEmpty
	
	^elements isEmpty ! !
!Cart methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 20:49:14' prior: 50552390 overrides: 16920235!
initialize

	elements := OrderedCollection new.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 20:49:14' prior: 50552381!
add: anElement 

	elements add: anElement.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 20:49:14' prior: 50552365 overrides: 16901663!
size
	
	^elements size ! !

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 20:49:22'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingElement stamp: 'AS 10/27/2022 20:49:22'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedElements stamp: 'AS 10/27/2022 20:49:22'!
PASSED!

----SNAPSHOT----(27 October 2022 20:49:35) CuisUniversity-5481.image priorSource: 7059698!
!CartTests methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 20:49:57' prior: 50552317!
test02CartIsNotEmptyAfterAddingElement
	
	| cart |
	cart := Cart new.
	cart add: 'element1'.
	
	self deny: cart isEmpty.! !
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 20:50:31'!
element1

	^ 'element1'! !
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 20:50:31' prior: 50552354!
test03CartSizeIsAmountOfNewAddedElements
	
	| cart |
	cart := Cart new.
	cart add: self element1.
	cart add: 'element2'.
	
	self assert: 2 equals: cart size.! !
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 20:50:31' prior: 50552441!
test02CartIsNotEmptyAfterAddingElement
	
	| cart |
	cart := Cart new.
	cart add: self element1.
	
	self deny: cart isEmpty.! !
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 20:50:43'!
element2

	^ 'element2'! !
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 20:50:43' prior: 50552451!
test03CartSizeIsAmountOfNewAddedElements
	
	| cart |
	cart := Cart new.
	cart add: self element1.
	cart add: self element2.
	
	self assert: 2 equals: cart size.! !
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 20:51:30' prior: 50552469!
test03CartSizeIsAmountOfNewAddedElements
	
	| cart |
	cart := Cart new.
	cart add: self element1.
	cart add: self element2.
	
	self assert: 2 equals: cart size.
	self deny: cart isEmpty ! !

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedElements stamp: 'AS 10/27/2022 20:51:30'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 20:51:30'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingElement stamp: 'AS 10/27/2022 20:51:30'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedElements stamp: 'AS 10/27/2022 20:51:30'!
PASSED!

----SNAPSHOT----(27 October 2022 20:53:33) CuisUniversity-5481.image priorSource: 7065159!

----STARTUP---- (27 October 2022 21:05:58) as /home/andisici/Documents/2022/ing-2c2022/cuisTusLibros/CuisUniversity-5481.image!


----QUIT----(27 October 2022 21:06:23) CuisUniversity-5481.image priorSource: 7067123!

----STARTUP---- (27 October 2022 21:06:39) as /home/andisici/Documents/2022/ing-2c2022/cuisTusLibros/CuisUniversity-5481.image!

!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 21:09:52'!
test04CanNotAddItemNotInStoreCatalog
	
	| cart catalog |
	
	catalog := OrderedCollection new.
	cart := Cart withCatalog: catalog.
	
	self should: [cart add: self elementNotInStore]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: Cart canNotAddItemNotSoldByStoreErrorMessage equals: anError messageText.
							   self assert: cart isEmpty].! !

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 21:10:14'!
ERROR!
!Cart class methodsFor: 'instance creation' stamp: 'AS 10/27/2022 21:10:18'!
withCatalog: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCatalog: anOrderedCollection ! !
!Cart class methodsFor: 'instance creation' stamp: 'AS 10/27/2022 21:10:30' prior: 50552602!
withCatalog: aStoreCatalog

	^self new initializeWithCatalog: aStoreCatalog ! !

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 21:10:31'!
ERROR!

!classDefinition: #Cart category: 'TusLibros' stamp: 'AS 10/27/2022 21:10:36'!
Object subclass: #Cart
	instanceVariableNames: 'elements storeCatalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialization' stamp: 'AS 10/27/2022 21:10:36'!
initializeWithCatalog: aStoreCatalog 
	self shouldBeImplemented.
	storeCatalog := aStoreCatalog.! !
!Cart methodsFor: 'initialization' stamp: 'AS 10/27/2022 21:10:39' prior: 50552626!
initializeWithCatalog: aStoreCatalog 

	storeCatalog := aStoreCatalog.! !

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 21:10:40'!
ERROR!
!CartTests methodsFor: 'support' stamp: 'AS 10/27/2022 21:10:43'!
elementNotInStore
	self shouldBeImplemented.! !
!CartTests methodsFor: 'support' stamp: 'AS 10/27/2022 21:10:55' prior: 50552640!
elementNotInStore
	
	^'itemNotSoldByStore'! !

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 21:10:57'!
FAILURE!
!Cart methodsFor: 'adding' stamp: 'AS 10/27/2022 21:12:28' prior: 50552419!
add: anElement 

	(storeCatalog includes: anElement) ifFalse: [self error: self class canNotAddItemNotSoldByStoreErrorMessage].
	
	elements add: anElement.! !

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 21:12:29'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingElement stamp: 'AS 10/27/2022 21:12:29'!
ERROR!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedElements stamp: 'AS 10/27/2022 21:12:29'!
ERROR!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 21:12:29'!
ERROR!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingElement stamp: 'AS 10/27/2022 21:12:31'!
ERROR!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 21:12:39'!
ERROR!
!Cart class methodsFor: 'error message' stamp: 'AS 10/27/2022 21:12:49'!
canNotAddItemNotSoldByStoreErrorMessage
	self shouldBeImplemented.! !
!Cart class methodsFor: 'error message' stamp: 'AS 10/27/2022 21:13:01' prior: 50552679!
canNotAddItemNotSoldByStoreErrorMessage
	
	^'Item not sold by Store!!'! !

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 21:13:02'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingElement stamp: 'AS 10/27/2022 21:13:05'!
ERROR!
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 21:14:25' prior: 50552459!
test02CartIsNotEmptyAfterAddingElement
	
	| cart catalog|
	
	catalog := OrderedCollection with: self element1.
	cart := Cart withCatalog: catalog.
	
	cart add: self element1.
	
	self deny: cart isEmpty.! !

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingElement stamp: 'AS 10/27/2022 21:14:28'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 21:15:10' prior: 50552477!
test03CartSizeIsAmountOfNewAddedElements
	
	| cart catalog |
	
	catalog := OrderedCollection with: self element1 with: self element2.
	cart := Cart withCatalog: catalog.
	
	cart add: self element1.
	cart add: self element2.
	
	self assert: 2 equals: cart size.
	self deny: cart isEmpty ! !

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedElements stamp: 'AS 10/27/2022 21:15:10'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 21:15:10'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingElement stamp: 'AS 10/27/2022 21:15:10'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedElements stamp: 'AS 10/27/2022 21:15:10'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 21:15:10'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 21:16:16' prior: 50552290!
test01CartIsEmptyWhenCreated
	
	| cart |
	cart := Cart withCatalog: OrderedCollection new.
	
	self assert: cart isEmpty.! !

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 21:16:19'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 21:16:19'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingElement stamp: 'AS 10/27/2022 21:16:19'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedElements stamp: 'AS 10/27/2022 21:16:19'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 21:16:19'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 21:16:36'!
test02CartIsNotEmptyAfterAddingItems
	
	| cart catalog|
	
	catalog := OrderedCollection with: self element1.
	cart := Cart withCatalog: catalog.
	
	cart add: self element1.
	
	self deny: cart isEmpty.! !

!methodRemoval: CartTests #test02CartIsNotEmptyAfterAddingElement stamp: 'AS 10/27/2022 21:16:36'!
test02CartIsNotEmptyAfterAddingElement
	
	| cart catalog|
	
	catalog := OrderedCollection with: self element1.
	cart := Cart withCatalog: catalog.
	
	cart add: self element1.
	
	self deny: cart isEmpty.!
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 21:16:43'!
test03CartSizeIsAmountOfNewAddedItems
	
	| cart catalog |
	
	catalog := OrderedCollection with: self element1 with: self element2.
	cart := Cart withCatalog: catalog.
	
	cart add: self element1.
	cart add: self element2.
	
	self assert: 2 equals: cart size.
	self deny: cart isEmpty ! !

!methodRemoval: CartTests #test03CartSizeIsAmountOfNewAddedElements stamp: 'AS 10/27/2022 21:16:43'!
test03CartSizeIsAmountOfNewAddedElements
	
	| cart catalog |
	
	catalog := OrderedCollection with: self element1 with: self element2.
	cart := Cart withCatalog: catalog.
	
	cart add: self element1.
	cart add: self element2.
	
	self assert: 2 equals: cart size.
	self deny: cart isEmpty !
!CartTests methodsFor: 'support' stamp: 'AS 10/27/2022 21:16:57'!
element1SoldByStore

	^ 'element1'! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 21:16:57' prior: 50552759!
test02CartIsNotEmptyAfterAddingItems
	
	| cart catalog|
	
	catalog := OrderedCollection with: self element1SoldByStore.
	cart := Cart withCatalog: catalog.
	
	cart add: self element1SoldByStore.
	
	self deny: cart isEmpty.! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 21:16:57' prior: 50552777!
test03CartSizeIsAmountOfNewAddedItems
	
	| cart catalog |
	
	catalog := OrderedCollection with: self element1SoldByStore with: self element2.
	cart := Cart withCatalog: catalog.
	
	cart add: self element1SoldByStore.
	cart add: self element2.
	
	self assert: 2 equals: cart size.
	self deny: cart isEmpty ! !

!methodRemoval: CartTests #element1 stamp: 'AS 10/27/2022 21:16:57'!
element1

	^ 'element1'!
!CartTests methodsFor: 'support' stamp: 'AS 10/27/2022 21:17:17'!
item2SoldByStore

	^ 'element2'! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 21:17:17' prior: 50552816!
test03CartSizeIsAmountOfNewAddedItems
	
	| cart catalog |
	
	catalog := OrderedCollection with: self element1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: catalog.
	
	cart add: self element1SoldByStore.
	cart add: self item2SoldByStore.
	
	self assert: 2 equals: cart size.
	self deny: cart isEmpty ! !

!methodRemoval: CartTests #element2 stamp: 'AS 10/27/2022 21:17:17'!
element2

	^ 'element2'!
!CartTests methodsFor: 'support' stamp: 'AS 10/27/2022 21:17:35'!
item1SoldByStore

	^ 'element1'! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 21:17:35' prior: 50552806!
test02CartIsNotEmptyAfterAddingItems
	
	| cart catalog|
	
	catalog := OrderedCollection with: self item1SoldByStore.
	cart := Cart withCatalog: catalog.
	
	cart add: self item1SoldByStore.
	
	self deny: cart isEmpty.! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 21:17:35' prior: 50552836!
test03CartSizeIsAmountOfNewAddedItems
	
	| cart catalog |
	
	catalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: catalog.
	
	cart add: self item1SoldByStore.
	cart add: self item2SoldByStore.
	
	self assert: 2 equals: cart size.
	self deny: cart isEmpty ! !

!methodRemoval: CartTests #element1SoldByStore stamp: 'AS 10/27/2022 21:17:35'!
element1SoldByStore

	^ 'element1'!
!CartTests methodsFor: 'support' stamp: 'AS 10/27/2022 21:17:51'!
itemNotSoldByStore
	
	^'itemNotSoldByStore'! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 21:17:51' prior: 50552584!
test04CanNotAddItemNotInStoreCatalog
	
	| cart catalog |
	
	catalog := OrderedCollection new.
	cart := Cart withCatalog: catalog.
	
	self should: [cart add: self itemNotSoldByStore]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: Cart canNotAddItemNotSoldByStoreErrorMessage equals: anError messageText.
							   self assert: cart isEmpty].! !

!methodRemoval: CartTests #elementNotInStore stamp: 'AS 10/27/2022 21:17:51'!
elementNotInStore
	
	^'itemNotSoldByStore'!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 21:17:56'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/27/2022 21:17:56'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/27/2022 21:17:56'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 21:17:56'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 21:18:30' prior: 50552737!
test01CartIsEmptyWhenCreated
	
	| emptyCart |
	emptyCart := Cart withCatalog: OrderedCollection new.
	
	self assert: emptyCart isEmpty.! !

!classDefinition: #CartTests category: 'TusLibros' stamp: 'AS 10/27/2022 21:18:57'!
TestCase subclass: #CartTests
	instanceVariableNames: 'catalog1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTests category: 'TusLibros' stamp: 'AS 10/27/2022 21:18:59'!
TestCase subclass: #CartTests
	instanceVariableNames: 'catalog1 cart1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 21:18:54' overrides: 16961394!
setUp
	
	catalog1 := OrderedCollection with: self item1SoldByStore.
	cart1 := Cart withCatalog: catalog1.! !
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 21:19:16' prior: 50552940 overrides: 16961394!
setUp
	
	catalog1 := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart1 := Cart withCatalog: catalog1.! !

!classDefinition: #CartTests category: 'TusLibros' stamp: 'AS 10/27/2022 21:19:28'!
TestCase subclass: #CartTests
	instanceVariableNames: 'storeCatalog cart1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTests methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 21:19:28' prior: 50552947 overrides: 16961394!
setUp
	
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart1 := Cart withCatalog: storeCatalog.! !
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 21:19:39' prior: 50552857!
test02CartIsNotEmptyAfterAddingItems
	
	cart1 add: self item1SoldByStore.
	
	self deny: cart1 isEmpty.! !

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/27/2022 21:19:41'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 21:19:41'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/27/2022 21:19:41'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/27/2022 21:19:41'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 21:19:41'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 21:19:57' prior: 50552867!
test03CartSizeIsAmountOfNewAddedItems
	
	cart1 add: self item1SoldByStore.
	cart1 add: self item2SoldByStore.
	
	self assert: 2 equals: cart1 size.
	self deny: cart1 isEmpty ! !

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/27/2022 21:19:59'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 21:19:59'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/27/2022 21:19:59'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/27/2022 21:19:59'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 21:19:59'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 21:20:11' prior: 50552888!
test04CanNotAddItemNotInStoreCatalog
	
	self should: [cart1 add: self itemNotSoldByStore]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: Cart canNotAddItemNotSoldByStoreErrorMessage equals: anError messageText.
							   self assert: cart1 isEmpty].! !

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 21:20:11'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 21:20:11'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/27/2022 21:20:11'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/27/2022 21:20:11'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 21:20:11'!
PASSED!

!classDefinition: #CartTests category: 'TusLibros' stamp: 'AS 10/27/2022 21:20:23'!
TestCase subclass: #CartTests
	instanceVariableNames: 'storeCatalog cartWithItems'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTests methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 21:20:23' prior: 50553017!
test04CanNotAddItemNotInStoreCatalog
	
	self should: [cartWithItems add: self itemNotSoldByStore]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: Cart canNotAddItemNotSoldByStoreErrorMessage equals: anError messageText.
							   self assert: cartWithItems isEmpty].! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 21:20:23' prior: 50552963 overrides: 16961394!
setUp
	
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cartWithItems := Cart withCatalog: storeCatalog.! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 21:20:23' prior: 50552993!
test03CartSizeIsAmountOfNewAddedItems
	
	cartWithItems add: self item1SoldByStore.
	cartWithItems add: self item2SoldByStore.
	
	self assert: 2 equals: cartWithItems size.
	self deny: cartWithItems isEmpty ! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 21:20:23' prior: 50552971!
test02CartIsNotEmptyAfterAddingItems
	
	cartWithItems add: self item1SoldByStore.
	
	self deny: cartWithItems isEmpty.! !

!classDefinition: #CartTests category: 'TusLibros' stamp: 'AS 10/27/2022 21:20:48'!
TestCase subclass: #CartTests
	instanceVariableNames: 'storeCatalog cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTests methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 21:20:48' prior: 50553052!
test04CanNotAddItemNotInStoreCatalog
	
	self should: [cart add: self itemNotSoldByStore]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: Cart canNotAddItemNotSoldByStoreErrorMessage equals: anError messageText.
							   self assert: cart isEmpty].! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 21:20:48' prior: 50553066 overrides: 16961394!
setUp
	
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 21:20:48' prior: 50553074!
test03CartSizeIsAmountOfNewAddedItems
	
	cart add: self item1SoldByStore.
	cart add: self item2SoldByStore.
	
	self assert: 2 equals: cart size.
	self deny: cart isEmpty ! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 21:20:48' prior: 50553084!
test02CartIsNotEmptyAfterAddingItems
	
	cart add: self item1SoldByStore.
	
	self deny: cart isEmpty.! !
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 21:20:54' prior: 50552919!
test01CartIsEmptyWhenCreated
	
	self assert: cart isEmpty.! !

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 21:20:54'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 21:20:54'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/27/2022 21:20:54'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/27/2022 21:20:54'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 21:20:54'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 21:21:19'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 21:21:22'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/27/2022 21:21:22'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/27/2022 21:21:22'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 21:21:22'!
PASSED!

----SNAPSHOT----(27 October 2022 21:21:30) CuisUniversity-5481.image priorSource: 7069651!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 21:23:04'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/27/2022 21:23:04'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/27/2022 21:23:04'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 21:23:04'!
PASSED!

----SNAPSHOT----(27 October 2022 21:23:11) CuisUniversity-5481.image priorSource: 7088601!
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 21:26:25'!
test05CanAddToCartManyOfSameItem
	
	cart add: 5 of: self item1SoldByStore.
	
	self assert: 5 equals: cart size.
	self deny: cart isEmpty ! !

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/27/2022 21:26:27'!
ERROR!
!Cart methodsFor: 'adding' stamp: 'AS 10/27/2022 21:26:31'!
add: aSmallInteger of: aString 
	self shouldBeImplemented.! !
!Cart methodsFor: 'adding' stamp: 'AS 10/27/2022 21:27:13' prior: 50553197!
add: anAmoutOfItemToAdd of: anItem 
	
	anAmoutOfItemToAdd timesRepeat: [self add: anItem].! !

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/27/2022 21:27:21'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 21:27:21'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/27/2022 21:27:21'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/27/2022 21:27:21'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 21:27:21'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/27/2022 21:27:21'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 21:28:57'!
test06CanNotAddNegativeQuantityOfItem
	
	self should: [cart add: -1 of: self itemSoldByStore]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: Cart canNotAddItemNegativeQuantityOfItem equals: anError messageText.
							   self assert: cart isEmpty].! !

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/27/2022 21:31:32'!
ERROR!
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 21:31:42' prior: 50553226!
test06CanNotAddNegativeQuantityOfItem
	
	self should: [cart add: -1 of: self item1SoldByStore]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: Cart canNotAddItemNegativeQuantityOfItem equals: anError messageText.
							   self assert: cart isEmpty].! !

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/27/2022 21:31:42'!
FAILURE!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/27/2022 21:31:46'!
FAILURE!
!Cart methodsFor: 'adding' stamp: 'AS 10/27/2022 21:33:29' prior: 50553202!
add: anAmoutOfItemToAdd of: anItem 
	(anAmoutOfItemToAdd < 0) ifTrue: [self error: self class canNotAddItemNegativeQuantityOfItem].
	anAmoutOfItemToAdd timesRepeat: [self add: anItem].! !

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/27/2022 21:33:30'!
ERROR!
!Cart class methodsFor: 'error message' stamp: 'AS 10/27/2022 21:33:35'!
canNotAddItemNegativeQuantityOfItem
	self shouldBeImplemented.! !
!Cart class methodsFor: 'error message' stamp: 'AS 10/27/2022 21:34:02' prior: 50553271!
canNotAddItemNegativeQuantityOfItem
	
	^'Quantity of item to add must be positive!!'! !

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/27/2022 21:34:03'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 21:34:03'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/27/2022 21:34:03'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/27/2022 21:34:03'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 21:34:03'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/27/2022 21:34:03'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/27/2022 21:34:03'!
PASSED!
!Cart class methodsFor: 'error message' stamp: 'AS 10/27/2022 21:35:08'!
quantityOfItemToAddMustBePositiveErrorMessage
	
	^'Quantity of item to add must be positive!!'! !
!Cart methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 21:35:08' prior: 50553259!
add: anAmoutOfItemToAdd of: anItem 
	(anAmoutOfItemToAdd < 0) ifTrue: [self error: self class quantityOfItemToAddMustBePositiveErrorMessage].
	anAmoutOfItemToAdd timesRepeat: [self add: anItem].! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 21:35:08' prior: 50553241!
test06CanNotAddNegativeQuantityOfItem
	
	self should: [cart add: -1 of: self item1SoldByStore]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: Cart quantityOfItemToAddMustBePositiveErrorMessage equals: anError messageText.
							   self assert: cart isEmpty].! !

!methodRemoval: Cart class #canNotAddItemNegativeQuantityOfItem stamp: 'AS 10/27/2022 21:35:08'!
canNotAddItemNegativeQuantityOfItem
	
	^'Quantity of item to add must be positive!!'!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/27/2022 21:35:12'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 21:35:12'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/27/2022 21:35:12'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/27/2022 21:35:12'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 21:35:12'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/27/2022 21:35:12'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/27/2022 21:35:12'!
PASSED!
!Cart methodsFor: 'adding' stamp: 'AS 10/27/2022 21:35:38'!
canNotAddItemNotSoldByStoreErrorSignal

	^ self error: self class canNotAddItemNotSoldByStoreErrorMessage! !
!Cart methodsFor: 'adding' stamp: 'AS 10/27/2022 21:35:38' prior: 50552652!
add: anElement 

	(storeCatalog includes: anElement) ifFalse: [self canNotAddItemNotSoldByStoreErrorSignal].
	
	elements add: anElement.! !
!Cart methodsFor: 'adding' stamp: 'AS 10/27/2022 21:35:58'!
assertIsSoldByStore: anElement

	^ (storeCatalog includes: anElement) ifFalse: [self canNotAddItemNotSoldByStoreErrorSignal]! !
!Cart methodsFor: 'adding' stamp: 'AS 10/27/2022 21:35:58' prior: 50553364!
add: anElement 

	self assertIsSoldByStore: anElement.
	
	elements add: anElement.! !
!Cart methodsFor: 'adding' stamp: 'AS 10/27/2022 21:36:28' prior: 50553378!
add: anItemToAddToCart 

	self assertIsSoldByStore: anItemToAddToCart.
	
	elements add: anItemToAddToCart.! !
!Cart methodsFor: 'adding' stamp: 'AS 10/27/2022 21:36:38' prior: 50553384!
add: anItemToAddToCart 

	self assertIsSoldByStore: anItemToAddToCart.
	elements add: anItemToAddToCart.! !
!Cart methodsFor: 'adding' stamp: 'AS 10/27/2022 21:37:06'!
quantityOfItemToAddMustBePositiveErrorSignal

	^ self error: self class quantityOfItemToAddMustBePositiveErrorMessage! !
!Cart methodsFor: 'adding' stamp: 'AS 10/27/2022 21:37:06' prior: 50553309!
add: anAmoutOfItemToAdd of: anItem 
	(anAmoutOfItemToAdd < 0) ifTrue: [self quantityOfItemToAddMustBePositiveErrorSignal].
	anAmoutOfItemToAdd timesRepeat: [self add: anItem].! !
!Cart methodsFor: 'adding' stamp: 'AS 10/27/2022 21:37:33'!
assertIsNotNegative: anAmoutOfItemToAdd

	^ (anAmoutOfItemToAdd < 0) ifTrue: [self quantityOfItemToAddMustBePositiveErrorSignal]! !
!Cart methodsFor: 'adding' stamp: 'AS 10/27/2022 21:37:33' prior: 50553403!
add: anAmoutOfItemToAdd of: anItem 
	self assertIsNotNegative: anAmoutOfItemToAdd.
	anAmoutOfItemToAdd timesRepeat: [self add: anItem].! !
!Cart methodsFor: 'adding' stamp: 'AS 10/27/2022 21:37:41' prior: 50553418!
add: aQuantityOfItemToAdd of: anItem 
	self assertIsNotNegative: aQuantityOfItemToAdd.
	aQuantityOfItemToAdd timesRepeat: [self add: anItem].! !
!Cart methodsFor: 'adding' stamp: 'AS 10/27/2022 21:37:52' prior: 50553425!
add: aQuantityOfItemToAdd of: anItem 

	self assertIsNotNegative: aQuantityOfItemToAdd.
	
	aQuantityOfItemToAdd timesRepeat: [self add: anItem].! !

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 21:37:52'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/27/2022 21:37:52'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/27/2022 21:37:52'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 21:37:52'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/27/2022 21:37:52'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/27/2022 21:37:52'!
PASSED!
!Cart methodsFor: 'adding' stamp: 'AS 10/27/2022 21:38:04' prior: 50553411!
assertIsNotNegative: aQuantityOfItemToAdd

	^ (aQuantityOfItemToAdd < 0) ifTrue: [self quantityOfItemToAddMustBePositiveErrorSignal]! !

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 21:38:07'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/27/2022 21:38:07'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/27/2022 21:38:07'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 21:38:07'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/27/2022 21:38:07'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/27/2022 21:38:07'!
PASSED!
!Cart methodsFor: 'initialization' stamp: 'AS 10/27/2022 21:38:37' prior: 50552632!
initializeWithCatalog: aStoreCatalog 
	
	elements := OrderedCollection new.
	storeCatalog := aStoreCatalog.! !

!methodRemoval: Cart #initialize stamp: 'AS 10/27/2022 21:38:41'!
initialize

	elements := OrderedCollection new.!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 21:38:44'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/27/2022 21:38:44'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/27/2022 21:38:44'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 21:38:44'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/27/2022 21:38:44'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/27/2022 21:38:44'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 21:39:08'!
test07CanNotAddZeroQuantityOfItem
	
	self should: [cart add: 0 of: self item1SoldByStore]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: Cart quantityOfItemToAddMustBePositiveErrorMessage equals: anError messageText.
							   self assert: cart isEmpty].! !

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/27/2022 21:39:09'!
FAILURE!
!Cart methodsFor: 'adding' stamp: 'AS 10/27/2022 21:39:48' prior: 50553432!
add: aQuantityOfItemToAdd of: anItem 

	self assertIsNotNegative: aQuantityOfItemToAdd.
	aQuantityOfItemToAdd isZero ifTrue: [self quantityOfItemToAddMustBePositiveErrorSignal].
	
	aQuantityOfItemToAdd timesRepeat: [self add: anItem].! !

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/27/2022 21:39:54'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 21:39:54'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/27/2022 21:39:54'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/27/2022 21:39:54'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 21:39:54'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/27/2022 21:39:54'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/27/2022 21:39:54'!
PASSED!

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/27/2022 21:39:54'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 21:40:08'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/27/2022 21:40:08'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/27/2022 21:40:08'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 21:40:08'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/27/2022 21:40:08'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/27/2022 21:40:08'!
PASSED!

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/27/2022 21:40:08'!
PASSED!

----SNAPSHOT----(27 October 2022 21:40:16) CuisUniversity-5481.image priorSource: 7089090!
!Cart methodsFor: 'adding' stamp: 'AS 10/27/2022 21:43:03'!
assertIsNotZero: aQuantityOfItemToAdd

	^ aQuantityOfItemToAdd isZero ifTrue: [self quantityOfItemToAddMustBePositiveErrorSignal]! !
!Cart methodsFor: 'adding' stamp: 'AS 10/27/2022 21:43:03' prior: 50553527!
add: aQuantityOfItemToAdd of: anItem 

	self assertIsNotNegative: aQuantityOfItemToAdd.
	self assertIsNotZero: aQuantityOfItemToAdd.
	
	aQuantityOfItemToAdd timesRepeat: [self add: anItem].! !
!Cart methodsFor: 'adding' stamp: 'AS 10/27/2022 21:43:48'!
assertIsPositive: aQuantityOfItemToAdd

	self assertIsNotNegative: aQuantityOfItemToAdd.
	self assertIsNotZero: aQuantityOfItemToAdd! !
!Cart methodsFor: 'adding' stamp: 'AS 10/27/2022 21:43:48' prior: 50553593!
add: aQuantityOfItemToAdd of: anItem 

	self assertIsPositive: aQuantityOfItemToAdd.
	
	aQuantityOfItemToAdd timesRepeat: [self add: anItem].! !

----SNAPSHOT----(27 October 2022 21:44:54) CuisUniversity-5481.image priorSource: 7101851!

----QUIT----(27 October 2022 21:46:36) CuisUniversity-5481.image priorSource: 7102864!

----STARTUP---- (27 October 2022 21:48:07) as /home/andisici/Documents/2022/ing-2c2022/cuisTusLibros/CuisUniversity-5481.image!


----SNAPSHOT----(27 October 2022 21:48:23) CuisUniversity-5481.image priorSource: 7102956!
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 21:49:47'!
shouldFailAddingOfItemQuantity: aQuantityOfItemToAdd
	
	self should: [cart add: aQuantityOfItemToAdd of: self item1SoldByStore]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: Cart quantityOfItemToAddMustBePositiveErrorMessage equals: anError messageText.
							   self assert: cart isEmpty].! !
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 21:49:57' prior: 50553319!
test06CanNotAddNegativeQuantityOfItem
	
	self shouldFailAddingOfItemQuantity: -1! !

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/27/2022 21:49:57'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 21:49:57'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/27/2022 21:49:57'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/27/2022 21:49:57'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 21:49:57'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/27/2022 21:49:57'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/27/2022 21:49:57'!
PASSED!

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/27/2022 21:49:57'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 21:50:05' prior: 50553512!
test07CanNotAddZeroQuantityOfItem
	
	self shouldFailAddingOfItemQuantity: 	0! !

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/27/2022 21:50:05'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 21:50:05'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/27/2022 21:50:05'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/27/2022 21:50:05'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 21:50:05'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/27/2022 21:50:05'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/27/2022 21:50:05'!
PASSED!

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/27/2022 21:50:05'!
PASSED!
!CartTests methodsFor: 'support' stamp: 'AS 10/27/2022 21:51:23'!
shouldFailWithMustBePositiveQuantityOfItemAddingQuantityOfItem: aQuantityOfItemToAdd
	
	self should: [cart add: aQuantityOfItemToAdd of: self item1SoldByStore]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: Cart quantityOfItemToAddMustBePositiveErrorMessage equals: anError messageText.
							   self assert: cart isEmpty].! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 21:51:23' prior: 50553641!
test06CanNotAddNegativeQuantityOfItem
	
	self shouldFailWithMustBePositiveQuantityOfItemAddingQuantityOfItem: -1! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 21:51:23' prior: 50553671!
test07CanNotAddZeroQuantityOfItem
	
	self shouldFailWithMustBePositiveQuantityOfItemAddingQuantityOfItem: 	0! !

!methodRemoval: CartTests #shouldFailAddingOfItemQuantity: stamp: 'AS 10/27/2022 21:51:23'!
shouldFailAddingOfItemQuantity: aQuantityOfItemToAdd
	
	self should: [cart add: aQuantityOfItemToAdd of: self item1SoldByStore]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: Cart quantityOfItemToAddMustBePositiveErrorMessage equals: anError messageText.
							   self assert: cart isEmpty].!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 21:51:27'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/27/2022 21:51:27'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/27/2022 21:51:27'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 21:51:27'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/27/2022 21:51:27'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/27/2022 21:51:27'!
PASSED!

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/27/2022 21:51:27'!
PASSED!

----SNAPSHOT----(27 October 2022 21:51:36) CuisUniversity-5481.image priorSource: 7103174!

----QUIT----(27 October 2022 21:52:37) CuisUniversity-5481.image priorSource: 7107628!

----STARTUP---- (27 October 2022 21:54:33) as /home/andisici/Documents/2022/ing-2c2022/cuisTusLibros/CuisUniversity-5481.image!

!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 21:56:06'!
test08CanGetCartItems
	
	cart add: 2 of: self item1SoldByStore.
	cart add: self item2SoldByStore.
	
	self assert: (OrderedCollection with: self item1SoldByStore with: self item1SoldByStore with: self item2SoldByStore) equals: cart content.
	
	self assert: 3 equals: cart size.
	self deny: cart isEmpty ! !

!testRun: #CartTests #test08CanGetCartItems stamp: 'AS 10/27/2022 21:56:07'!
ERROR!
!Cart methodsFor: 'content' stamp: 'AS 10/27/2022 21:56:17'!
content
	self shouldBeImplemented.! !
!Cart methodsFor: 'content' stamp: 'AS 10/27/2022 21:56:27' prior: 50553789!
content
	
	^elements ! !

!testRun: #CartTests #test08CanGetCartItems stamp: 'AS 10/27/2022 21:56:29'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 21:56:29'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/27/2022 21:56:29'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/27/2022 21:56:29'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 21:56:29'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/27/2022 21:56:29'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/27/2022 21:56:29'!
PASSED!

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/27/2022 21:56:29'!
PASSED!

!testRun: #CartTests #test08CanGetCartItems stamp: 'AS 10/27/2022 21:56:29'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 21:56:36' prior: 50553774!
test08CanGetCartItems
	
	cart add: 2 of: self item1SoldByStore.
	cart add: self item2SoldByStore.
	
	self assert: (Set with: self item1SoldByStore with: self item1SoldByStore with: self item2SoldByStore) equals: cart content.
	
	self assert: 3 equals: cart size.
	self deny: cart isEmpty ! !

!testRun: #CartTests #test08CanGetCartItems stamp: 'AS 10/27/2022 21:56:36'!
FAILURE!
!Cart methodsFor: 'initialization' stamp: 'AS 10/27/2022 21:56:43' prior: 50553484!
initializeWithCatalog: aStoreCatalog 
	
	elements := Set new.
	storeCatalog := aStoreCatalog.! !

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 21:56:43'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/27/2022 21:56:43'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/27/2022 21:56:43'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 21:56:43'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/27/2022 21:56:43'!
FAILURE!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/27/2022 21:56:43'!
PASSED!

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/27/2022 21:56:43'!
PASSED!

!testRun: #CartTests #test08CanGetCartItems stamp: 'AS 10/27/2022 21:56:43'!
FAILURE!

!testRun: #CartTests #test08CanGetCartItems stamp: 'AS 10/27/2022 21:56:48'!
FAILURE!
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 22:01:53' prior: 50553824!
test08CanGetCartItems
	
	cart add: 2 of: self item1SoldByStore.
	cart add: self item2SoldByStore.
	
	self assert: (Bag with: self item1SoldByStore with: self item1SoldByStore with: self item2SoldByStore) equals: cart content.
	
	self assert: 3 equals: cart size.
	self deny: cart isEmpty ! !
!Cart methodsFor: 'initialization' stamp: 'AS 10/27/2022 22:02:01' prior: 50553839!
initializeWithCatalog: aStoreCatalog 
	
	elements := Bag new.
	storeCatalog := aStoreCatalog.! !

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 22:02:01'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/27/2022 22:02:01'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/27/2022 22:02:01'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 22:02:01'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/27/2022 22:02:01'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/27/2022 22:02:01'!
PASSED!

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/27/2022 22:02:01'!
PASSED!

!testRun: #CartTests #test08CanGetCartItems stamp: 'AS 10/27/2022 22:02:01'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 22:02:45'!
test08CanGetItemsInCart
	
	cart add: 2 of: self item1SoldByStore.
	cart add: self item2SoldByStore.
	
	self assert: (Bag with: self item1SoldByStore with: self item1SoldByStore with: self item2SoldByStore) equals: cart content.
	
	self assert: 3 equals: cart size.
	self deny: cart isEmpty ! !

!methodRemoval: CartTests #test08CanGetCartItems stamp: 'AS 10/27/2022 22:02:45'!
test08CanGetCartItems
	
	cart add: 2 of: self item1SoldByStore.
	cart add: self item2SoldByStore.
	
	self assert: (Bag with: self item1SoldByStore with: self item1SoldByStore with: self item2SoldByStore) equals: cart content.
	
	self assert: 3 equals: cart size.
	self deny: cart isEmpty !

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 22:02:49'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/27/2022 22:02:49'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/27/2022 22:02:49'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 22:02:49'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/27/2022 22:02:49'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/27/2022 22:02:49'!
PASSED!

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/27/2022 22:02:49'!
PASSED!

!testRun: #CartTests #test08CanGetItemsInCart stamp: 'AS 10/27/2022 22:02:49'!
PASSED!

----SNAPSHOT----(27 October 2022 22:03:14) CuisUniversity-5481.image priorSource: 7107720!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 23:09:11'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/27/2022 23:09:11'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/27/2022 23:09:11'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 23:09:11'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/27/2022 23:09:11'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/27/2022 23:09:11'!
PASSED!

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/27/2022 23:09:11'!
PASSED!

!testRun: #CartTests #test08CanGetItemsInCart stamp: 'AS 10/27/2022 23:09:11'!
PASSED!
!Cart methodsFor: 'initialization' stamp: 'AS 10/27/2022 23:09:26' prior: 50553884!
initializeWithCatalog: aStoreCatalog 
	
	elements := OrderedCollection new.
	storeCatalog := aStoreCatalog.! !
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 23:09:34' prior: 50553914!
test08CanGetItemsInCart
	
	cart add: 2 of: self item1SoldByStore.
	cart add: self item2SoldByStore.
	
	self assert: (OrderedCollection with: self item1SoldByStore with: self item1SoldByStore with: self item2SoldByStore) equals: cart content.
	
	self assert: 3 equals: cart size.
	self deny: cart isEmpty ! !

!testRun: #CartTests #test08CanGetItemsInCart stamp: 'AS 10/27/2022 23:09:34'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 23:09:34'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/27/2022 23:09:34'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/27/2022 23:09:34'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 23:09:34'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/27/2022 23:09:34'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/27/2022 23:09:34'!
PASSED!

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/27/2022 23:09:34'!
PASSED!

!testRun: #CartTests #test08CanGetItemsInCart stamp: 'AS 10/27/2022 23:09:34'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 23:12:45'!
test09CartContentIsTheSameEvenWhenAddingInDifferentOrder
	
	| cart2 |
	
	cart2 := Cart withCatalog: storeCatalog.
	
	cart add: 2 of: self item1SoldByStore.
	cart add: self item2SoldByStore.
	
	cart2 add: self item2SoldByStore.
	cart2 add: 2 of: self item1SoldByStore.
	
	self assert: cart2 content equals: cart content.
	
	self assert: 3 equals: cart size.
	self deny: cart isEmpty ! !

!testRun: #CartTests #test09CartContentIsTheSameEvenWhenAddingInDifferentOrder stamp: 'AS 10/27/2022 23:12:47'!
FAILURE!
!Cart methodsFor: 'initialization' stamp: 'AS 10/27/2022 23:13:01' prior: 50553990!
initializeWithCatalog: aStoreCatalog 
	
	elements := Bag new.
	storeCatalog := aStoreCatalog.! !

!testRun: #CartTests #test09CartContentIsTheSameEvenWhenAddingInDifferentOrder stamp: 'AS 10/27/2022 23:13:05'!
PASSED!

!testRun: #CartTests #test08CanGetItemsInCart stamp: 'AS 10/27/2022 23:13:14'!
FAILURE!

!testRun: #CartTests #test08CanGetItemsInCart stamp: 'AS 10/27/2022 23:13:14'!
FAILURE!
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 23:13:21' prior: 50553996!
test08CanGetItemsInCart
	
	cart add: 2 of: self item1SoldByStore.
	cart add: self item2SoldByStore.
	
	self assert: (Bag with: self item1SoldByStore with: self item1SoldByStore with: self item2SoldByStore) equals: cart content.
	
	self assert: 3 equals: cart size.
	self deny: cart isEmpty ! !

!testRun: #CartTests #test08CanGetItemsInCart stamp: 'AS 10/27/2022 23:13:21'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 23:13:21'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/27/2022 23:13:21'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/27/2022 23:13:21'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 23:13:21'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/27/2022 23:13:21'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/27/2022 23:13:21'!
PASSED!

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/27/2022 23:13:21'!
PASSED!

!testRun: #CartTests #test08CanGetItemsInCart stamp: 'AS 10/27/2022 23:13:21'!
PASSED!

!testRun: #CartTests #test09CartContentIsTheSameEvenWhenAddingInDifferentOrder stamp: 'AS 10/27/2022 23:13:21'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 23:13:40' prior: 50554035!
test09CartContentIsTheSameEvenWhenAddingInDifferentOrder
	
	| cart2 |
	
	cart2 := cart copy.
	
	cart add: 2 of: self item1SoldByStore.
	cart add: self item2SoldByStore.
	
	cart2 add: self item2SoldByStore.
	cart2 add: 2 of: self item1SoldByStore.
	
	self assert: cart2 content equals: cart content.
	
	self assert: 3 equals: cart size.
	self deny: cart isEmpty ! !

!testRun: #CartTests #test09CartContentIsTheSameEvenWhenAddingInDifferentOrder stamp: 'AS 10/27/2022 23:13:40'!
FAILURE!

!testRun: #CartTests #test09CartContentIsTheSameEvenWhenAddingInDifferentOrder stamp: 'AS 10/27/2022 23:13:44'!
FAILURE!
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 23:14:18' prior: 50554112!
test09CartContentIsTheSameEvenWhenAddingInDifferentOrder
	
	| cart2 |
	
	cart2 := Cart withCatalog: storeCatalog.
	
	cart add: 2 of: self item1SoldByStore.
	cart add: self item2SoldByStore.
	
	cart2 add: self item2SoldByStore.
	cart2 add: 2 of: self item1SoldByStore.
	
	self assert: cart2 content equals: cart content.
	
	self assert: 3 equals: cart size.
	self deny: cart isEmpty ! !

!testRun: #CartTests #test09CartContentIsTheSameEvenWhenAddingInDifferentOrder stamp: 'AS 10/27/2022 23:14:18'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 23:14:18'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/27/2022 23:14:18'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/27/2022 23:14:18'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 23:14:18'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/27/2022 23:14:18'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/27/2022 23:14:18'!
PASSED!

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/27/2022 23:14:18'!
PASSED!

!testRun: #CartTests #test08CanGetItemsInCart stamp: 'AS 10/27/2022 23:14:18'!
PASSED!

!testRun: #CartTests #test09CartContentIsTheSameEvenWhenAddingInDifferentOrder stamp: 'AS 10/27/2022 23:14:18'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'AS 10/27/2022 23:15:12' prior: 50554134!
test09CartContentIsTheSameEvenWhenAddingInDifferentOrder
	
	| cart2 |
	
	cart2 := Cart withCatalog: storeCatalog.
	
	cart add: 2 of: self item1SoldByStore.
	cart add: self item2SoldByStore.
	
	cart2 add: self item2SoldByStore.
	cart2 add: 2 of: self item1SoldByStore.
	
	self assert: cart2 content equals: cart content.
	self assert: 3 equals: cart size.
	self deny: cart isEmpty ! !

!testRun: #CartTests #test09CartContentIsTheSameEvenWhenAddingInDifferentOrder stamp: 'AS 10/27/2022 23:15:12'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 23:15:12'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/27/2022 23:15:12'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/27/2022 23:15:12'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 23:15:12'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/27/2022 23:15:12'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/27/2022 23:15:12'!
PASSED!

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/27/2022 23:15:12'!
PASSED!

!testRun: #CartTests #test08CanGetItemsInCart stamp: 'AS 10/27/2022 23:15:12'!
PASSED!

!testRun: #CartTests #test09CartContentIsTheSameEvenWhenAddingInDifferentOrder stamp: 'AS 10/27/2022 23:15:12'!
PASSED!

----SNAPSHOT----(27 October 2022 23:15:25) CuisUniversity-5481.image priorSource: 7113960!

!classDefinition: #Cart category: 'TusLibros' stamp: 'AS 10/27/2022 23:16:18'!
Object subclass: #Cart
	instanceVariableNames: 'items storeCatalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 23:16:18' prior: 50552424 overrides: 16901663!
size
	
	^items size ! !
!Cart methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 23:16:18' prior: 50553793!
content
	
	^items ! !
!Cart methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 23:16:18' prior: 50552409!
isEmpty
	
	^items isEmpty ! !
!Cart methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 23:16:18' prior: 50554054!
initializeWithCatalog: aStoreCatalog 
	
	items := Bag new.
	storeCatalog := aStoreCatalog.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'AS 10/27/2022 23:16:18' prior: 50553390!
add: anItemToAddToCart 

	self assertIsSoldByStore: anItemToAddToCart.
	items add: anItemToAddToCart.! !

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 23:16:21'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/27/2022 23:16:21'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/27/2022 23:16:21'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 23:16:21'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/27/2022 23:16:21'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/27/2022 23:16:21'!
PASSED!

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/27/2022 23:16:21'!
PASSED!

!testRun: #CartTests #test08CanGetItemsInCart stamp: 'AS 10/27/2022 23:16:21'!
PASSED!

!testRun: #CartTests #test09CartContentIsTheSameEvenWhenAddingInDifferentOrder stamp: 'AS 10/27/2022 23:16:21'!
PASSED!
!CartTests methodsFor: 'support' stamp: 'AS 10/27/2022 23:16:38' prior: 50552852!
item1SoldByStore

	^ 'item1'! !
!CartTests methodsFor: 'support' stamp: 'AS 10/27/2022 23:16:42' prior: 50552831!
item2SoldByStore

	^ 'item2'! !

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 23:16:42'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/27/2022 23:16:42'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/27/2022 23:16:42'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 23:16:42'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/27/2022 23:16:42'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/27/2022 23:16:42'!
PASSED!

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/27/2022 23:16:42'!
PASSED!

!testRun: #CartTests #test08CanGetItemsInCart stamp: 'AS 10/27/2022 23:16:42'!
PASSED!

!testRun: #CartTests #test09CartContentIsTheSameEvenWhenAddingInDifferentOrder stamp: 'AS 10/27/2022 23:16:42'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/27/2022 23:16:46'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/27/2022 23:16:46'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/27/2022 23:16:46'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/27/2022 23:16:46'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/27/2022 23:16:46'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/27/2022 23:16:46'!
PASSED!

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/27/2022 23:16:46'!
PASSED!

!testRun: #CartTests #test08CanGetItemsInCart stamp: 'AS 10/27/2022 23:16:46'!
PASSED!

!testRun: #CartTests #test09CartContentIsTheSameEvenWhenAddingInDifferentOrder stamp: 'AS 10/27/2022 23:16:46'!
PASSED!

----SNAPSHOT----(27 October 2022 23:16:53) CuisUniversity-5481.image priorSource: 7122463!

----SNAPSHOT----(27 October 2022 23:19:49) CuisUniversity-5481.image priorSource: 7126573!

----QUIT----(27 October 2022 23:19:52) CuisUniversity-5481.image priorSource: 7126665!

----STARTUP---- (31 October 2022 17:11:35) as /home/andisici/Documents/2022/ing-2c2022/cuisTusLibros/CuisUniversity-5481.image!


!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/31/2022 17:11:46'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/31/2022 17:11:46'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/31/2022 17:11:46'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/31/2022 17:11:46'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/31/2022 17:11:46'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/31/2022 17:11:46'!
PASSED!

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/31/2022 17:11:46'!
PASSED!

!testRun: #CartTests #test08CanGetItemsInCart stamp: 'AS 10/31/2022 17:11:46'!
PASSED!

!testRun: #CartTests #test09CartContentIsTheSameEvenWhenAddingInDifferentOrder stamp: 'AS 10/31/2022 17:11:46'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'AS 10/31/2022 17:40:35' prior: 50553128!
test02CartIsNotEmptyAfterAddingItems
	
	cart add: self item1SoldByStore.
	
	self deny: cart isEmpty.
	self assert: cart includes: self item1SoldByStore ! !

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/31/2022 17:40:35'!
ERROR!
!Cart methodsFor: 'content' stamp: 'AS 10/31/2022 17:40:42'!
includes: aString 
	self shouldBeImplemented.! !
!Cart methodsFor: 'content' stamp: 'AS 10/31/2022 17:40:58' prior: 50554407!
includes: anItem
	
	^items includes: anItem ! !

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/31/2022 17:40:59'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/31/2022 17:40:59'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/31/2022 17:40:59'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/31/2022 17:40:59'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/31/2022 17:40:59'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/31/2022 17:40:59'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/31/2022 17:40:59'!
PASSED!

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/31/2022 17:40:59'!
PASSED!

!testRun: #CartTests #test08CanGetItemsInCart stamp: 'AS 10/31/2022 17:40:59'!
PASSED!

!testRun: #CartTests #test09CartContentIsTheSameEvenWhenAddingInDifferentOrder stamp: 'AS 10/31/2022 17:40:59'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'AS 10/31/2022 17:41:56'!
test02CartIsNotEmptyAfterAddingItemsAndIncludesThem
	
	cart add: self item1SoldByStore.
	
	self deny: cart isEmpty.
	self assert: cart includes: self item1SoldByStore ! !

!methodRemoval: CartTests #test02CartIsNotEmptyAfterAddingItems stamp: 'AS 10/31/2022 17:41:56'!
test02CartIsNotEmptyAfterAddingItems
	
	cart add: self item1SoldByStore.
	
	self deny: cart isEmpty.
	self assert: cart includes: self item1SoldByStore !
!CartTests methodsFor: 'tests' stamp: 'AS 10/31/2022 17:47:45'!
test10CanNotAddNonIntegerQuantityOfItem
	
	self should: [cart add: 1.5 of: self item1SoldByStore]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: Cart quantityOfItemToAddMustBePositiveIntegerErrorMessage equals: anError messageText.
							   self assert: cart isEmpty].! !

!testRun: #CartTests #test10CanNotAddNonIntegerQuantityOfItem stamp: 'AS 10/31/2022 17:47:46'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'AS 10/31/2022 17:49:28' prior: 50553601!
assertIsPositive: aQuantityOfItemToAdd

	self assertIsNotNegative: aQuantityOfItemToAdd.
	self assertIsNotZero: aQuantityOfItemToAdd.
	aQuantityOfItemToAdd isInteger ifFalse: [self error: self class quantityOfItemToAddMustBePositiveIntegerErrorMessage].! !

!testRun: #CartTests #test10CanNotAddNonIntegerQuantityOfItem stamp: 'AS 10/31/2022 17:49:53'!
ERROR!
!Cart class methodsFor: 'error message' stamp: 'AS 10/31/2022 17:50:03'!
quantityOfItemToAddMustBePositiveIntegerErrorMessage
	self shouldBeImplemented.! !
!Cart class methodsFor: 'error message' stamp: 'AS 10/31/2022 17:50:55' prior: 50554492!
quantityOfItemToAddMustBePositiveIntegerErrorMessage
	
	^'Quantity of item to add must be a positive integer!!'! !

!testRun: #CartTests #test10CanNotAddNonIntegerQuantityOfItem stamp: 'AS 10/31/2022 17:50:56'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/31/2022 17:50:56'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItemsAndIncludesThem stamp: 'AS 10/31/2022 17:50:56'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/31/2022 17:50:56'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/31/2022 17:50:56'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/31/2022 17:50:56'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/31/2022 17:50:56'!
PASSED!

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/31/2022 17:50:56'!
PASSED!

!testRun: #CartTests #test08CanGetItemsInCart stamp: 'AS 10/31/2022 17:50:56'!
PASSED!

!testRun: #CartTests #test09CartContentIsTheSameEvenWhenAddingInDifferentOrder stamp: 'AS 10/31/2022 17:50:56'!
PASSED!

!testRun: #CartTests #test10CanNotAddNonIntegerQuantityOfItem stamp: 'AS 10/31/2022 17:50:56'!
PASSED!
!Cart methodsFor: 'assertions' stamp: 'AS 10/31/2022 17:52:37'!
quantityOfItemToAddMustBePositiveIntegerErrorSignal

	^ self error: self class quantityOfItemToAddMustBePositiveIntegerErrorMessage! !
!Cart methodsFor: 'assertions' stamp: 'AS 10/31/2022 17:52:37' prior: 50554478!
assertIsPositive: aQuantityOfItemToAdd

	self assertIsNotNegative: aQuantityOfItemToAdd.
	self assertIsNotZero: aQuantityOfItemToAdd.
	aQuantityOfItemToAdd isInteger ifFalse: [self quantityOfItemToAddMustBePositiveIntegerErrorSignal].! !
!Cart methodsFor: 'assertions' stamp: 'AS 10/31/2022 17:53:12'!
assertIsPositiveInteger: aQuantityOfItemToAdd

	self assertIsNotNegative: aQuantityOfItemToAdd.
	self assertIsNotZero: aQuantityOfItemToAdd.
	aQuantityOfItemToAdd isInteger ifFalse: [self quantityOfItemToAddMustBePositiveIntegerErrorSignal].! !
!Cart methodsFor: 'as yet unclassified' stamp: 'AS 10/31/2022 17:53:12' prior: 50553608!
add: aQuantityOfItemToAdd of: anItem 

	self assertIsPositiveInteger: aQuantityOfItemToAdd.
	
	aQuantityOfItemToAdd timesRepeat: [self add: anItem].! !

!methodRemoval: Cart #assertIsPositive: stamp: 'AS 10/31/2022 17:53:12'!
assertIsPositive: aQuantityOfItemToAdd

	self assertIsNotNegative: aQuantityOfItemToAdd.
	self assertIsNotZero: aQuantityOfItemToAdd.
	aQuantityOfItemToAdd isInteger ifFalse: [self quantityOfItemToAddMustBePositiveIntegerErrorSignal].!
!Cart methodsFor: 'assertions' stamp: 'AS 10/31/2022 17:53:28'!
assertIsInteger: aQuantityOfItemToAdd

	^ aQuantityOfItemToAdd isInteger ifFalse: [self quantityOfItemToAddMustBePositiveIntegerErrorSignal]! !
!Cart methodsFor: 'assertions' stamp: 'AS 10/31/2022 17:53:28' prior: 50554556!
assertIsPositiveInteger: aQuantityOfItemToAdd

	self assertIsNotNegative: aQuantityOfItemToAdd.
	self assertIsNotZero: aQuantityOfItemToAdd.
	self assertIsInteger: aQuantityOfItemToAdd.! !

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/31/2022 17:53:32'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItemsAndIncludesThem stamp: 'AS 10/31/2022 17:53:32'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/31/2022 17:53:32'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/31/2022 17:53:32'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/31/2022 17:53:32'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/31/2022 17:53:32'!
PASSED!

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/31/2022 17:53:32'!
PASSED!

!testRun: #CartTests #test08CanGetItemsInCart stamp: 'AS 10/31/2022 17:53:32'!
PASSED!

!testRun: #CartTests #test09CartContentIsTheSameEvenWhenAddingInDifferentOrder stamp: 'AS 10/31/2022 17:53:32'!
PASSED!

!testRun: #CartTests #test10CanNotAddNonIntegerQuantityOfItem stamp: 'AS 10/31/2022 17:53:32'!
PASSED!

----SNAPSHOT----(31 October 2022 17:53:47) CuisUniversity-5481.image priorSource: 7126757!
!CartTests methodsFor: 'tests' stamp: 'AS 10/31/2022 17:56:47' prior: 50554462!
test10CanNotAddNonIntegerQuantityOfItem
	
	self should: [cart add: 1.5 of: self item1SoldByStore]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cart quantityOfItemToAddMustBePositiveIntegerErrorMessage.
							   self assert: cart isEmpty].! !

!testRun: #CartTests #test10CanNotAddNonIntegerQuantityOfItem stamp: 'AS 10/31/2022 17:56:48'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/31/2022 17:56:48'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItemsAndIncludesThem stamp: 'AS 10/31/2022 17:56:48'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/31/2022 17:56:48'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/31/2022 17:56:48'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/31/2022 17:56:48'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/31/2022 17:56:48'!
PASSED!

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/31/2022 17:56:48'!
PASSED!

!testRun: #CartTests #test08CanGetItemsInCart stamp: 'AS 10/31/2022 17:56:48'!
PASSED!

!testRun: #CartTests #test09CartContentIsTheSameEvenWhenAddingInDifferentOrder stamp: 'AS 10/31/2022 17:56:48'!
PASSED!

!testRun: #CartTests #test10CanNotAddNonIntegerQuantityOfItem stamp: 'AS 10/31/2022 17:56:48'!
PASSED!
!CartTests methodsFor: 'support' stamp: 'AS 10/31/2022 17:57:12' prior: 50553701!
shouldFailWithMustBePositiveQuantityOfItemAddingQuantityOfItem: aQuantityOfItemToAdd
	
	self should: [cart add: aQuantityOfItemToAdd of: self item1SoldByStore]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cart quantityOfItemToAddMustBePositiveErrorMessage.
							   self assert: cart isEmpty].! !

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/31/2022 17:57:12'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItemsAndIncludesThem stamp: 'AS 10/31/2022 17:57:12'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/31/2022 17:57:12'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/31/2022 17:57:12'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/31/2022 17:57:12'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/31/2022 17:57:12'!
PASSED!

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/31/2022 17:57:12'!
PASSED!

!testRun: #CartTests #test08CanGetItemsInCart stamp: 'AS 10/31/2022 17:57:12'!
PASSED!

!testRun: #CartTests #test09CartContentIsTheSameEvenWhenAddingInDifferentOrder stamp: 'AS 10/31/2022 17:57:12'!
PASSED!

!testRun: #CartTests #test10CanNotAddNonIntegerQuantityOfItem stamp: 'AS 10/31/2022 17:57:12'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'AS 10/31/2022 17:57:39' prior: 50553098!
test04CanNotAddItemNotInStoreCatalog
	
	self should: [cart add: self itemNotSoldByStore]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cart canNotAddItemNotSoldByStoreErrorMessage.
							   self assert: cart isEmpty].! !

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/31/2022 17:57:39'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/31/2022 17:57:39'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItemsAndIncludesThem stamp: 'AS 10/31/2022 17:57:39'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/31/2022 17:57:39'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/31/2022 17:57:39'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/31/2022 17:57:39'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/31/2022 17:57:39'!
PASSED!

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/31/2022 17:57:39'!
PASSED!

!testRun: #CartTests #test08CanGetItemsInCart stamp: 'AS 10/31/2022 17:57:39'!
PASSED!

!testRun: #CartTests #test09CartContentIsTheSameEvenWhenAddingInDifferentOrder stamp: 'AS 10/31/2022 17:57:39'!
PASSED!

!testRun: #CartTests #test10CanNotAddNonIntegerQuantityOfItem stamp: 'AS 10/31/2022 17:57:39'!
PASSED!

----SNAPSHOT----(31 October 2022 17:58:02) CuisUniversity-5481.image priorSource: 7135386!

!methodRemoval: CartTests #test09CartContentIsTheSameEvenWhenAddingInDifferentOrder stamp: 'AS 10/31/2022 18:11:34'!
test09CartContentIsTheSameEvenWhenAddingInDifferentOrder
	
	| cart2 |
	
	cart2 := Cart withCatalog: storeCatalog.
	
	cart add: 2 of: self item1SoldByStore.
	cart add: self item2SoldByStore.
	
	cart2 add: self item2SoldByStore.
	cart2 add: 2 of: self item1SoldByStore.
	
	self assert: cart2 content equals: cart content.
	self assert: 3 equals: cart size.
	self deny: cart isEmpty !
!CartTests methodsFor: 'tests' stamp: 'AS 10/31/2022 18:11:42'!
test09CanNotAddNonIntegerQuantityOfItem
	
	self should: [cart add: 1.5 of: self item1SoldByStore]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cart quantityOfItemToAddMustBePositiveIntegerErrorMessage.
							   self assert: cart isEmpty].! !

!methodRemoval: CartTests #test10CanNotAddNonIntegerQuantityOfItem stamp: 'AS 10/31/2022 18:11:42'!
test10CanNotAddNonIntegerQuantityOfItem
	
	self should: [cart add: 1.5 of: self item1SoldByStore]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cart quantityOfItemToAddMustBePositiveIntegerErrorMessage.
							   self assert: cart isEmpty].!

----SNAPSHOT----(31 October 2022 18:11:49) CuisUniversity-5481.image priorSource: 7140001!

TestCase subclass: #CashierTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTests category: 'TusLibros' stamp: 'AS 10/31/2022 18:16:12'!
TestCase subclass: #CashierTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'AS 10/31/2022 18:21:52'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTests methodsFor: 'nil' stamp: 'AS 10/31/2022 18:21:59'!
test01CanNotCheckoutEmptyCart
	
	| storeCatalog cart |
	
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	
	self should: [Cashier checkout: cart]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier canNotCheckoutEmptyCartErrorMessage
							   self assert: cart isNotNil].! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 18:22:00'!
ERROR!

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 18:22:36'!
ERROR!
!CashierTests methodsFor: 'support' stamp: 'AS 10/31/2022 18:22:44'!
item1SoldByStore
	self shouldBeImplemented.! !
!CashierTests methodsFor: 'support' stamp: 'AS 10/31/2022 18:22:53' prior: 50554861!
item1SoldByStore
	^'item1'! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 18:22:56'!
ERROR!
!CashierTests methodsFor: 'support' stamp: 'AS 10/31/2022 18:23:01'!
item2SoldByStore
	self shouldBeImplemented.! !
!CashierTests methodsFor: 'support' stamp: 'AS 10/31/2022 18:23:09' prior: 50554873!
item2SoldByStore
	^'item2'! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 18:23:09'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 18:23:30'!
checkout: aCart 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeCheckout: aCart ! !
!Cashier class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 18:25:06' prior: 50554885!
checkout: aCart
	aCart isEmpty ifTrue: [self error: self class canNotCheckoutEmptyCartErrorMessage].
	^self new initializeCheckout: aCart ! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 18:25:26'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 18:25:36' prior: 50554893!
checkout: aCart
	aCart isEmpty ifTrue: [self error: self canNotCheckoutEmptyCartErrorMessage].
	^self new initializeCheckout: aCart ! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 18:25:38'!
ERROR!
!Cashier class methodsFor: 'error message' stamp: 'AS 10/31/2022 18:25:47'!
canNotCheckoutEmptyCartErrorMessage
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error message' stamp: 'AS 10/31/2022 18:26:07' prior: 50554914!
canNotCheckoutEmptyCartErrorMessage
	^'Can not checkout an empty cart!!'.! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 18:26:08'!
ERROR!
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 10/31/2022 18:26:15' prior: 50554839!
test01CanNotCheckoutEmptyCart
	
	| storeCatalog cart |
	
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	
	self should: [Cashier checkout: cart]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier canNotCheckoutEmptyCartErrorMessage.
							   self assert: cart isNotNil].! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 18:26:17'!
ERROR!
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 10/31/2022 18:26:26' prior: 50554928!
test01CanNotCheckoutEmptyCart
	
	| storeCatalog cart |
	
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	
	self should: [Cashier checkout: cart]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier canNotCheckoutEmptyCartErrorMessage.].! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 18:26:27'!
PASSED!

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 18:26:27'!
PASSED!

----SNAPSHOT----(31 October 2022 18:26:37) CuisUniversity-5481.image priorSource: 7141388!

#((self item1SoldByStore) (self priceOfItem1))!

(Array with: self item1SoldByStore with: self item1Price)!
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 10/31/2022 18:49:54'!
test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard
	
	| storeCatalog cart cashier salesBook priceList creditCard sale |
	
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	
	cart add: self item1SoldByStore.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price).
	creditCard := '12345'.
	
	cashier := Cashier checkout: cart withCard: creditCard usingPriceList: priceList registeringOn: salesBook.
	
	sale := salesBook first.
	self assert: creditCard equals: sale chargedCreditCard.
	self assert: (priceList at: self item1SoldByStore) equals: sale chargedAmount.
	self assert: (Bag with: self item1SoldByStore) equals: sale itemsSold.
	! !

!testRun: #CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 18:50:12'!
ERROR!
!CashierTests methodsFor: 'support' stamp: 'AS 10/31/2022 18:50:39'!
item1Price
	self shouldBeImplemented.! !
!CashierTests methodsFor: 'support' stamp: 'AS 10/31/2022 18:50:48' prior: 50555008!
item1Price
	^5! !

!testRun: #CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 18:50:49'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 18:50:54'!
checkout: aCart withCard: aString usingPriceList: aDictionary registeringOn: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeCheckout: aCart withCard: aString usingPriceList: aDictionary registeringOn: anOrderedCollection ! !
!Cashier class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 18:51:38' prior: 50555019!
checkout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook

	^self new initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook ! !

!testRun: #CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 18:51:39'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'AS 10/31/2022 18:51:53'!
Object subclass: #Cashier
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'AS 10/31/2022 18:51:53'!
Object subclass: #Cashier
	instanceVariableNames: 'cart cardToCharge'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'AS 10/31/2022 18:51:53'!
Object subclass: #Cashier
	instanceVariableNames: 'cart cardToCharge priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'AS 10/31/2022 18:51:53'!
Object subclass: #Cashier
	instanceVariableNames: 'cart cardToCharge priceList salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'AS 10/31/2022 18:51:53'!
initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook 
	self shouldBeImplemented.
	cart := aCart.
	cardToCharge := aCardToCharge.
	priceList := aPriceList.
	salesBook := aSalesBook.! !
!Cashier methodsFor: 'initialization' stamp: 'AS 10/31/2022 18:52:00' prior: 50555074!
initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook 
	
	cart := aCart.
	cardToCharge := aCardToCharge.
	priceList := aPriceList.
	salesBook := aSalesBook.! !

!testRun: #CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 18:52:02'!
ERROR!

!classDefinition: #Sale category: 'TusLibros' stamp: 'AS 10/31/2022 19:12:19'!
Object subclass: #Sale
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'AS 10/31/2022 19:12:12' prior: 50555085!
initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook 
	
	| amountToDebit |
	
	cart := aCart.
	cardToCharge := aCardToCharge.
	priceList := aPriceList.
	salesBook := aSalesBook.
	
	amountToDebit := (cart sum: [:anItem | priceList at: anItem]) .
	self debit: amountToDebit fromCard: cardToCharge.
	salesBook add: (Sale of: cart content havingCharged: amountToDebit on: cardToCharge).! !

!testRun: #CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:12:53'!
ERROR!
!Cashier methodsFor: 'initialization' stamp: 'AS 10/31/2022 19:13:08' prior: 50555105!
initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook 
	
	| amountToDebit |
	
	cart := aCart.
	cardToCharge := aCardToCharge.
	priceList := aPriceList.
	salesBook := aSalesBook.
	
	amountToDebit := (cart content sum: [:anItem | priceList at: anItem]) .
	self debit: amountToDebit fromCard: cardToCharge.
	salesBook add: (Sale of: cart content havingCharged: amountToDebit on: cardToCharge).! !

!testRun: #CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:13:09'!
ERROR!

!testRun: #CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:14:12'!
ERROR!

cart content!

priceList!

priceList!

priceList at: 'item1'!

cart content!

cart content!

cart content!
!Cashier methodsFor: 'initialization' stamp: 'AS 10/31/2022 19:16:26' prior: 50555126!
initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook 
	
	| amountToDebit |
	
	cart := aCart.
	cardToCharge := aCardToCharge.
	priceList := aPriceList.
	salesBook := aSalesBook.
	
	amountToDebit := (cart content sum: [:anItem |self halt. priceList at: anItem]) .
	self debit: amountToDebit fromCard: cardToCharge.
	salesBook add: (Sale of: cart content havingCharged: amountToDebit on: cardToCharge).! !

!testRun: #CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:16:28'!
ERROR!
!Cashier methodsFor: 'initialization' stamp: 'AS 10/31/2022 19:17:40' prior: 50555154!
initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook 
	
	| amountToDebit |
	
	cart := aCart.
	cardToCharge := aCardToCharge.
	priceList := aPriceList.
	salesBook := aSalesBook.
	
	amountToDebit := (cart content inject: 0 into: [:accumulatedAmount :anItem | priceList at: anItem]) .
	self debit: amountToDebit fromCard: cardToCharge.
	salesBook add: (Sale of: cart content havingCharged: amountToDebit on: cardToCharge).! !

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/31/2022 19:17:45'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItemsAndIncludesThem stamp: 'AS 10/31/2022 19:17:45'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/31/2022 19:17:45'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/31/2022 19:17:45'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/31/2022 19:17:45'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/31/2022 19:17:45'!
PASSED!

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/31/2022 19:17:45'!
PASSED!

!testRun: #CartTests #test08CanGetItemsInCart stamp: 'AS 10/31/2022 19:17:45'!
PASSED!

!testRun: #CartTests #test09CanNotAddNonIntegerQuantityOfItem stamp: 'AS 10/31/2022 19:17:45'!
PASSED!

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 19:17:45'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:17:45'!
ERROR!

!testRun: #CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:17:45'!
ERROR!
!Cashier methodsFor: 'debit' stamp: 'AS 10/31/2022 19:18:06'!
debit: aSmallInteger fromCard: aString 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'debit' stamp: 'AS 10/31/2022 19:18:13' prior: 50555231!
debit: aSmallInteger fromCard: aString 
	! !
!Cashier methodsFor: 'debit' stamp: 'AS 10/31/2022 19:18:20' prior: 50555236!
debit: anAmountToDebit fromCard: aString 
	! !
!Cashier methodsFor: 'debit' stamp: 'AS 10/31/2022 19:18:33' prior: 50555240!
debit: anAmountToDebit fromCard: aCardToDebitFrom 
	! !

!testRun: #CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:18:35'!
ERROR!
!Sale class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 19:18:53'!
of: aBag havingCharged: aSmallInteger on: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeOf: aBag havingCharged: aSmallInteger on: aString ! !
!Sale class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 19:19:28' prior: 50555252!
of: aBagOfItems havingCharged: aChargedAmount on: aChargedCard 

	^self new initializeOf: aBagOfItems havingCharged: aChargedAmount on: aChargedCard ! !

!testRun: #CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:19:35'!
ERROR!

!classDefinition: #Sale category: 'TusLibros' stamp: 'AS 10/31/2022 19:19:44'!
Object subclass: #Sale
	instanceVariableNames: 'bagOfItems'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: 'TusLibros' stamp: 'AS 10/31/2022 19:19:44'!
Object subclass: #Sale
	instanceVariableNames: 'bagOfItems chargedAmount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: 'TusLibros' stamp: 'AS 10/31/2022 19:19:45'!
Object subclass: #Sale
	instanceVariableNames: 'bagOfItems chargedAmount chargedCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'AS 10/31/2022 19:19:45'!
initializeOf: aBagOfItems havingCharged: aChargedAmount on: aChargedCard 
	self shouldBeImplemented.
	bagOfItems := aBagOfItems.
	chargedAmount := aChargedAmount.
	chargedCard := aChargedCard.! !
!Sale methodsFor: 'initialization' stamp: 'AS 10/31/2022 19:19:50' prior: 50555294!
initializeOf: aBagOfItems havingCharged: aChargedAmount on: aChargedCard 

	bagOfItems := aBagOfItems.
	chargedAmount := aChargedAmount.
	chargedCard := aChargedCard.! !

!testRun: #CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:19:52'!
ERROR!
!Sale methodsFor: 'credit card' stamp: 'AS 10/31/2022 19:19:59'!
chargedCreditCard
	self shouldBeImplemented.! !
!Sale methodsFor: 'credit card' stamp: 'AS 10/31/2022 19:20:05' prior: 50555315!
chargedCreditCard
	^chargedCard ! !

!testRun: #CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:20:08'!
ERROR!
!Sale methodsFor: 'charged amount' stamp: 'AS 10/31/2022 19:20:27'!
chargedAmount
	self shouldBeImplemented.
	^chargedAmount! !
!Sale methodsFor: 'charged amount' stamp: 'AS 10/31/2022 19:20:30' prior: 50555328!
chargedAmount
	^chargedAmount! !

!testRun: #CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:20:31'!
ERROR!
!Sale methodsFor: 'sold items' stamp: 'AS 10/31/2022 19:20:38'!
itemsSold
	self shouldBeImplemented.! !
!Sale methodsFor: 'sold items' stamp: 'AS 10/31/2022 19:20:57' prior: 50555340!
itemsSold
	
	^bagOfItems ! !

!testRun: #CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:20:58'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/31/2022 19:21:00'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItemsAndIncludesThem stamp: 'AS 10/31/2022 19:21:00'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/31/2022 19:21:00'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/31/2022 19:21:00'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/31/2022 19:21:00'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/31/2022 19:21:00'!
PASSED!

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/31/2022 19:21:00'!
PASSED!

!testRun: #CartTests #test08CanGetItemsInCart stamp: 'AS 10/31/2022 19:21:00'!
PASSED!

!testRun: #CartTests #test09CanNotAddNonIntegerQuantityOfItem stamp: 'AS 10/31/2022 19:21:00'!
PASSED!

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 19:21:00'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:21:00'!
PASSED!
!Cashier methodsFor: 'initialization' stamp: 'AS 10/31/2022 19:22:20' prior: 50555175!
initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook 
	
	| amountToDebit |
	
	cart := aCart.
	cardToCharge := aCardToCharge.
	priceList := aPriceList.
	salesBook := aSalesBook.
	
	amountToDebit := 3 .
	self debit: amountToDebit fromCard: cardToCharge.
	salesBook add: (Sale of: cart content havingCharged: amountToDebit on: cardToCharge).! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 19:22:20'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:22:20'!
FAILURE!

!testRun: #CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:22:20'!
FAILURE!
!Cashier methodsFor: 'initialization' stamp: 'AS 10/31/2022 19:22:43' prior: 50555387!
initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook 
	
	| amountToDebit |
	
	cart := aCart.
	cardToCharge := aCardToCharge.
	priceList := aPriceList.
	salesBook := aSalesBook.
	
	amountToDebit := priceList at: cart content first.
	self debit: amountToDebit fromCard: cardToCharge.
	salesBook add: (Sale of: cart content havingCharged: amountToDebit on: cardToCharge).! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 19:22:43'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:22:43'!
ERROR!

!testRun: #CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:22:43'!
ERROR!
!Cashier methodsFor: 'initialization' stamp: 'AS 10/31/2022 19:22:20' prior: 50555413!
initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook 
	
	| amountToDebit |
	
	cart := aCart.
	cardToCharge := aCardToCharge.
	priceList := aPriceList.
	salesBook := aSalesBook.
	
	amountToDebit := 3 .
	self debit: amountToDebit fromCard: cardToCharge.
	salesBook add: (Sale of: cart content havingCharged: amountToDebit on: cardToCharge).! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 19:23:26'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:23:26'!
FAILURE!

!testRun: #CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:23:26'!
FAILURE!
!Cashier methodsFor: 'initialization' stamp: 'AS 10/31/2022 19:17:40' prior: 50555440!
initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook 
	
	| amountToDebit |
	
	cart := aCart.
	cardToCharge := aCardToCharge.
	priceList := aPriceList.
	salesBook := aSalesBook.
	
	amountToDebit := (cart content inject: 0 into: [:accumulatedAmount :anItem | priceList at: anItem]) .
	self debit: amountToDebit fromCard: cardToCharge.
	salesBook add: (Sale of: cart content havingCharged: amountToDebit on: cardToCharge).! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 19:23:41'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:23:41'!
PASSED!
!CashierTests methodsFor: 'tests' stamp: 'AS 10/31/2022 19:25:24' prior: 50554976!
test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard
	
	| storeCatalog cart cashier salesBook priceList creditCard sale |
	
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	
	cart add: self item1SoldByStore.
	cart add: self item2SoldByStore.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	creditCard := '12345'.
	
	cashier := Cashier checkout: cart withCard: creditCard usingPriceList: priceList registeringOn: salesBook.
	
	sale := salesBook first.
	self assert: creditCard equals: sale chargedCreditCard.
	self assert: (priceList at: self item1SoldByStore) + (priceList at: self item2SoldByStore) equals: sale chargedAmount.
	self assert: (Bag with: self item1SoldByStore with: self item2SoldByStore) equals: sale itemsSold.
	! !

!testRun: #CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:25:28'!
ERROR!
!CashierTests methodsFor: 'support' stamp: 'AS 10/31/2022 19:25:34'!
item2Price
	self shouldBeImplemented.! !
!CashierTests methodsFor: 'support' stamp: 'AS 10/31/2022 19:25:38' prior: 50555527!
item2Price
	^3! !

!testRun: #CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:25:39'!
FAILURE!

!testRun: #CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:26:02'!
FAILURE!

!testRun: #CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:26:02'!
FAILURE!
!Cashier methodsFor: 'initialization' stamp: 'AS 10/31/2022 19:26:51' prior: 50555466!
initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook 
	
	| amountToDebit |
	
	cart := aCart.
	cardToCharge := aCardToCharge.
	priceList := aPriceList.
	salesBook := aSalesBook.
	self halt.
	amountToDebit := (cart content inject: 0 into: [:accumulatedAmount :anItem | priceList at: anItem]) .
	self debit: amountToDebit fromCard: cardToCharge.
	salesBook add: (Sale of: cart content havingCharged: amountToDebit on: cardToCharge).! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 19:26:52'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:27:08'!
FAILURE!

cart content!

priceList at: anItem!

priceList at: anItem!

priceList at: anItem!
!Cashier methodsFor: 'initialization' stamp: 'AS 10/31/2022 19:34:26' prior: 50555546!
initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook 
	
	| amountToDebit |
	
	cart := aCart.
	cardToCharge := aCardToCharge.
	priceList := aPriceList.
	salesBook := aSalesBook.
	self halt.
	amountToDebit := (cart content inject: 0 into: [:accumulatedAmount :anItem | accumulatedAmount + priceList at: anItem]) .
	self debit: amountToDebit fromCard: cardToCharge.
	salesBook add: (Sale of: cart content havingCharged: amountToDebit on: cardToCharge).! !
!Cashier methodsFor: 'initialization' stamp: 'AS 10/31/2022 19:34:36' prior: 50555574!
initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook 
	
	| amountToDebit |
	
	cart := aCart.
	cardToCharge := aCardToCharge.
	priceList := aPriceList.
	salesBook := aSalesBook.
	amountToDebit := (cart content inject: 0 into: [:accumulatedAmount :anItem | accumulatedAmount + priceList at: anItem]) .
	self debit: amountToDebit fromCard: cardToCharge.
	salesBook add: (Sale of: cart content havingCharged: amountToDebit on: cardToCharge).! !

!testRun: #CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:34:37'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/31/2022 19:34:40'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItemsAndIncludesThem stamp: 'AS 10/31/2022 19:34:40'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/31/2022 19:34:40'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/31/2022 19:34:40'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/31/2022 19:34:40'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/31/2022 19:34:40'!
PASSED!

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/31/2022 19:34:40'!
PASSED!

!testRun: #CartTests #test08CanGetItemsInCart stamp: 'AS 10/31/2022 19:34:40'!
PASSED!

!testRun: #CartTests #test09CanNotAddNonIntegerQuantityOfItem stamp: 'AS 10/31/2022 19:34:40'!
PASSED!

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 19:34:40'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:34:40'!
PASSED!
!CashierTests methodsFor: 'tests' stamp: 'AS 10/31/2022 19:34:53'!
test02CanCheckoutCartWithItemsAndCorrectlyChargeCard
	
	| storeCatalog cart cashier salesBook priceList creditCard sale |
	
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	
	cart add: self item1SoldByStore.
	cart add: self item2SoldByStore.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	creditCard := '12345'.
	
	cashier := Cashier checkout: cart withCard: creditCard usingPriceList: priceList registeringOn: salesBook.
	
	sale := salesBook first.
	self assert: creditCard equals: sale chargedCreditCard.
	self assert: (priceList at: self item1SoldByStore) + (priceList at: self item2SoldByStore) equals: sale chargedAmount.
	self assert: (Bag with: self item1SoldByStore with: self item2SoldByStore) equals: sale itemsSold.
	! !

!methodRemoval: CashierTests #test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:34:53'!
test02CanCheckoutCartWithOneItemAndCorrectlyChargeCard
	
	| storeCatalog cart cashier salesBook priceList creditCard sale |
	
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	
	cart add: self item1SoldByStore.
	cart add: self item2SoldByStore.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	creditCard := '12345'.
	
	cashier := Cashier checkout: cart withCard: creditCard usingPriceList: priceList registeringOn: salesBook.
	
	sale := salesBook first.
	self assert: creditCard equals: sale chargedCreditCard.
	self assert: (priceList at: self item1SoldByStore) + (priceList at: self item2SoldByStore) equals: sale chargedAmount.
	self assert: (Bag with: self item1SoldByStore with: self item2SoldByStore) equals: sale itemsSold.
	!

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 19:34:57'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:34:57'!
PASSED!

!classDefinition: #CashierTests category: 'TusLibros' stamp: 'AS 10/31/2022 19:35:56'!
TestCase subclass: #CashierTests
	instanceVariableNames: 'storeCatalog1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTests category: 'TusLibros' stamp: 'AS 10/31/2022 19:35:59'!
TestCase subclass: #CashierTests
	instanceVariableNames: 'storeCatalog1 cart1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTests methodsFor: 'tests' stamp: 'AS 10/31/2022 19:35:55' overrides: 16961394!
setUp 
	
	storeCatalog1 := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart1 := Cart withCatalog: storeCatalog1.! !
!CashierTests methodsFor: 'tests' stamp: 'AS 10/31/2022 19:36:19' prior: 50554948!
test01CanNotCheckoutEmptyCart
	
	| storeCatalog cart |
	
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	
	self should: [Cashier checkout: cart1]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier canNotCheckoutEmptyCartErrorMessage.].! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 19:36:21'!
PASSED!

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 19:36:21'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:36:21'!
PASSED!
!CashierTests methodsFor: 'tests' stamp: 'AS 10/31/2022 19:36:29' prior: 50555650!
test02CanCheckoutCartWithItemsAndCorrectlyChargeCard
	
	| storeCatalog cart cashier salesBook priceList creditCard sale |
	
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	
	cart1 add: self item1SoldByStore.
	cart1 add: self item2SoldByStore.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	creditCard := '12345'.
	
	cashier := Cashier checkout: cart withCard: creditCard usingPriceList: priceList registeringOn: salesBook.
	
	sale := salesBook first.
	self assert: creditCard equals: sale chargedCreditCard.
	self assert: (priceList at: self item1SoldByStore) + (priceList at: self item2SoldByStore) equals: sale chargedAmount.
	self assert: (Bag with: self item1SoldByStore with: self item2SoldByStore) equals: sale itemsSold.
	! !

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:36:31'!
FAILURE!
!CashierTests methodsFor: 'tests' stamp: 'AS 10/31/2022 19:36:45' prior: 50555771!
test02CanCheckoutCartWithItemsAndCorrectlyChargeCard
	
	| storeCatalog cart cashier salesBook priceList creditCard sale |
	
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	
	cart1 add: self item1SoldByStore.
	cart1 add: self item2SoldByStore.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	creditCard := '12345'.
	
	cashier := Cashier checkout: cart1 withCard: creditCard usingPriceList: priceList registeringOn: salesBook.
	
	sale := salesBook first.
	self assert: creditCard equals: sale chargedCreditCard.
	self assert: (priceList at: self item1SoldByStore) + (priceList at: self item2SoldByStore) equals: sale chargedAmount.
	self assert: (Bag with: self item1SoldByStore with: self item2SoldByStore) equals: sale itemsSold.
	! !

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:36:49'!
PASSED!

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 19:36:49'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:36:49'!
PASSED!
!CashierTests methodsFor: 'tests' stamp: 'AS 10/31/2022 19:36:56' prior: 50555808!
test02CanCheckoutCartWithItemsAndCorrectlyChargeCard
	
	| storeCatalog cart salesBook priceList creditCard sale |
	
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	
	cart1 add: self item1SoldByStore.
	cart1 add: self item2SoldByStore.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	creditCard := '12345'.
	
	Cashier checkout: cart1 withCard: creditCard usingPriceList: priceList registeringOn: salesBook.
	
	sale := salesBook first.
	self assert: creditCard equals: sale chargedCreditCard.
	self assert: (priceList at: self item1SoldByStore) + (priceList at: self item2SoldByStore) equals: sale chargedAmount.
	self assert: (Bag with: self item1SoldByStore with: self item2SoldByStore) equals: sale itemsSold.
	! !

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:36:58'!
PASSED!

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 19:36:58'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:36:58'!
PASSED!
!CashierTests methodsFor: 'tests' stamp: 'AS 10/31/2022 19:37:04' prior: 50555852!
test02CanCheckoutCartWithItemsAndCorrectlyChargeCard
	
	| salesBook priceList creditCard sale |
	
	cart1 add: self item1SoldByStore.
	cart1 add: self item2SoldByStore.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	creditCard := '12345'.
	
	Cashier checkout: cart1 withCard: creditCard usingPriceList: priceList registeringOn: salesBook.
	
	sale := salesBook first.
	self assert: creditCard equals: sale chargedCreditCard.
	self assert: (priceList at: self item1SoldByStore) + (priceList at: self item2SoldByStore) equals: sale chargedAmount.
	self assert: (Bag with: self item1SoldByStore with: self item2SoldByStore) equals: sale itemsSold.
	! !

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:37:06'!
PASSED!

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 19:37:06'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:37:06'!
PASSED!
!CashierTests methodsFor: 'tests' stamp: 'AS 10/31/2022 19:37:12' prior: 50555746!
test01CanNotCheckoutEmptyCart
	
	self should: [Cashier checkout: cart1]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier canNotCheckoutEmptyCartErrorMessage.].! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 19:37:12'!
PASSED!

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 19:37:12'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:37:12'!
PASSED!

!classDefinition: #CashierTests category: 'TusLibros' stamp: 'AS 10/31/2022 19:37:36'!
TestCase subclass: #CashierTests
	instanceVariableNames: 'storeCatalog1 cart1 salesBook1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTests category: 'TusLibros' stamp: 'AS 10/31/2022 19:37:37'!
TestCase subclass: #CashierTests
	instanceVariableNames: 'storeCatalog1 cart1 salesBook1 priceList1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTests category: 'TusLibros' stamp: 'AS 10/31/2022 19:37:38'!
TestCase subclass: #CashierTests
	instanceVariableNames: 'storeCatalog1 cart1 salesBook1 priceList1 creditCard1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTests methodsFor: 'setup' stamp: 'AS 10/31/2022 19:37:34' prior: 50555738 overrides: 16961394!
setUp 
	
	storeCatalog1 := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart1 := Cart withCatalog: storeCatalog1.
	salesBook1 := OrderedCollection new.
	priceList1 := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	creditCard1 := '12345'.! !

!classDefinition: #CashierTests category: 'TusLibros' stamp: 'AS 10/31/2022 19:37:43'!
TestCase subclass: #CashierTests
	instanceVariableNames: 'storeCatalog cart1 salesBook1 priceList1 creditCard1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 10/31/2022 19:37:43' prior: 50555978 overrides: 16961394!
setUp 
	
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart1 := Cart withCatalog: storeCatalog.
	salesBook1 := OrderedCollection new.
	priceList1 := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	creditCard1 := '12345'.! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 19:37:44'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:37:44'!
PASSED!

!classDefinition: #CashierTests category: 'TusLibros' stamp: 'AS 10/31/2022 19:37:47'!
TestCase subclass: #CashierTests
	instanceVariableNames: 'storeCatalog cart salesBook1 priceList1 creditCard1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 10/31/2022 19:37:47' prior: 50556002 overrides: 16961394!
setUp 
	
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	salesBook1 := OrderedCollection new.
	priceList1 := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	creditCard1 := '12345'.! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 10/31/2022 19:37:47' prior: 50555933!
test01CanNotCheckoutEmptyCart
	
	self should: [Cashier checkout: cart]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier canNotCheckoutEmptyCartErrorMessage.].! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 10/31/2022 19:37:47' prior: 50555895!
test02CanCheckoutCartWithItemsAndCorrectlyChargeCard
	
	| salesBook priceList creditCard sale |
	
	cart add: self item1SoldByStore.
	cart add: self item2SoldByStore.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	creditCard := '12345'.
	
	Cashier checkout: cart withCard: creditCard usingPriceList: priceList registeringOn: salesBook.
	
	sale := salesBook first.
	self assert: creditCard equals: sale chargedCreditCard.
	self assert: (priceList at: self item1SoldByStore) + (priceList at: self item2SoldByStore) equals: sale chargedAmount.
	self assert: (Bag with: self item1SoldByStore with: self item2SoldByStore) equals: sale itemsSold.
	! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 19:37:51'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:37:51'!
PASSED!
!CashierTests methodsFor: 'tests' stamp: 'AS 10/31/2022 19:38:23' prior: 50556059!
test02CanCheckoutCartWithItemsAndCorrectlyChargeCard
	
	| sale |
	
	cart add: self item1SoldByStore.
	cart add: self item2SoldByStore.
	salesBook1 := OrderedCollection new.
	priceList1 := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	creditCard1 := '12345'.
	
	Cashier checkout: cart withCard: creditCard1 usingPriceList: priceList1 registeringOn: salesBook1.
	
	sale := salesBook1 first.
	self assert: creditCard1 equals: sale chargedCreditCard.
	self assert: (priceList1 at: self item1SoldByStore) + (priceList1 at: self item2SoldByStore) equals: sale chargedAmount.
	self assert: (Bag with: self item1SoldByStore with: self item2SoldByStore) equals: sale itemsSold.
	! !

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:38:28'!
PASSED!

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 19:38:28'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:38:28'!
PASSED!
!CashierTests methodsFor: 'setup' stamp: 'AS 10/31/2022 19:38:39' overrides: 16961402!
tearDown
	
	salesBook1 := OrderedCollection new.! !

!classDefinition: #CashierTests category: 'TusLibros' stamp: 'AS 10/31/2022 19:38:59'!
TestCase subclass: #CashierTests
	instanceVariableNames: 'storeCatalog cart salesBook priceList1 creditCard1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 10/31/2022 19:38:59' prior: 50556033 overrides: 16961394!
setUp 
	
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	salesBook := OrderedCollection new.
	priceList1 := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	creditCard1 := '12345'.! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 10/31/2022 19:38:59' prior: 50556131 overrides: 16961402!
tearDown
	
	salesBook := OrderedCollection new.! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 10/31/2022 19:38:59' prior: 50556093!
test02CanCheckoutCartWithItemsAndCorrectlyChargeCard
	
	| sale |
	
	cart add: self item1SoldByStore.
	cart add: self item2SoldByStore.
	salesBook := OrderedCollection new.
	priceList1 := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	creditCard1 := '12345'.
	
	Cashier checkout: cart withCard: creditCard1 usingPriceList: priceList1 registeringOn: salesBook.
	
	sale := salesBook first.
	self assert: creditCard1 equals: sale chargedCreditCard.
	self assert: (priceList1 at: self item1SoldByStore) + (priceList1 at: self item2SoldByStore) equals: sale chargedAmount.
	self assert: (Bag with: self item1SoldByStore with: self item2SoldByStore) equals: sale itemsSold.
	! !

!classDefinition: #CashierTests category: 'TusLibros' stamp: 'AS 10/31/2022 19:39:01'!
TestCase subclass: #CashierTests
	instanceVariableNames: 'storeCatalog cart salesBook priceList creditCard1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 10/31/2022 19:39:01' prior: 50556165!
test02CanCheckoutCartWithItemsAndCorrectlyChargeCard
	
	| sale |
	
	cart add: self item1SoldByStore.
	cart add: self item2SoldByStore.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	creditCard1 := '12345'.
	
	Cashier checkout: cart withCard: creditCard1 usingPriceList: priceList registeringOn: salesBook.
	
	sale := salesBook first.
	self assert: creditCard1 equals: sale chargedCreditCard.
	self assert: (priceList at: self item1SoldByStore) + (priceList at: self item2SoldByStore) equals: sale chargedAmount.
	self assert: (Bag with: self item1SoldByStore with: self item2SoldByStore) equals: sale itemsSold.
	! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 10/31/2022 19:39:01' prior: 50556145 overrides: 16961394!
setUp 
	
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	creditCard1 := '12345'.! !

!classDefinition: #CashierTests category: 'TusLibros' stamp: 'AS 10/31/2022 19:39:03'!
TestCase subclass: #CashierTests
	instanceVariableNames: 'storeCatalog cart salesBook priceList creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 10/31/2022 19:39:03' prior: 50556201!
test02CanCheckoutCartWithItemsAndCorrectlyChargeCard
	
	| sale |
	
	cart add: self item1SoldByStore.
	cart add: self item2SoldByStore.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	creditCard := '12345'.
	
	Cashier checkout: cart withCard: creditCard usingPriceList: priceList registeringOn: salesBook.
	
	sale := salesBook first.
	self assert: creditCard equals: sale chargedCreditCard.
	self assert: (priceList at: self item1SoldByStore) + (priceList at: self item2SoldByStore) equals: sale chargedAmount.
	self assert: (Bag with: self item1SoldByStore with: self item2SoldByStore) equals: sale itemsSold.
	! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 10/31/2022 19:39:03' prior: 50556229 overrides: 16961394!
setUp 
	
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	creditCard := '12345'.! !
!CashierTests methodsFor: 'tests' stamp: 'AS 10/31/2022 19:39:10' prior: 50556252!
test02CanCheckoutCartWithItemsAndCorrectlyChargeCard
	
	| sale |
	
	Cashier checkout: cart withCard: creditCard usingPriceList: priceList registeringOn: salesBook.
	
	sale := salesBook first.
	self assert: creditCard equals: sale chargedCreditCard.
	self assert: (priceList at: self item1SoldByStore) + (priceList at: self item2SoldByStore) equals: sale chargedAmount.
	self assert: (Bag with: self item1SoldByStore with: self item2SoldByStore) equals: sale itemsSold.
	! !

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:39:10'!
FAILURE!
!CashierTests methodsFor: 'tests' stamp: 'AS 10/31/2022 19:39:14' prior: 50556294!
test02CanCheckoutCartWithItemsAndCorrectlyChargeCard
	
	| sale |
	
	cart add: self item1SoldByStore.
	cart add: self item2SoldByStore.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	creditCard := '12345'.
	
	Cashier checkout: cart withCard: creditCard usingPriceList: priceList registeringOn: salesBook.
	
	sale := salesBook first.
	self assert: creditCard equals: sale chargedCreditCard.
	self assert: (priceList at: self item1SoldByStore) + (priceList at: self item2SoldByStore) equals: sale chargedAmount.
	self assert: (Bag with: self item1SoldByStore with: self item2SoldByStore) equals: sale itemsSold.
	! !

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:39:14'!
PASSED!

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 19:39:14'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:39:14'!
PASSED!
!CashierTests methodsFor: 'tests' stamp: 'AS 10/31/2022 19:39:19' prior: 50556316!
test02CanCheckoutCartWithItemsAndCorrectlyChargeCard
	
	| sale |
	
	cart add: self item1SoldByStore.
	cart add: self item2SoldByStore.
	Cashier checkout: cart withCard: creditCard usingPriceList: priceList registeringOn: salesBook.
	
	sale := salesBook first.
	self assert: creditCard equals: sale chargedCreditCard.
	self assert: (priceList at: self item1SoldByStore) + (priceList at: self item2SoldByStore) equals: sale chargedAmount.
	self assert: (Bag with: self item1SoldByStore with: self item2SoldByStore) equals: sale itemsSold.
	! !

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:39:19'!
PASSED!

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 19:39:19'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:39:19'!
PASSED!
!CashierTests methodsFor: 'tests' stamp: 'AS 10/31/2022 19:39:22' prior: 50556353!
test02CanCheckoutCartWithItemsAndCorrectlyChargeCard
	
	| sale |
	
	cart add: self item1SoldByStore.
	cart add: self item2SoldByStore.
	
	Cashier checkout: cart withCard: creditCard usingPriceList: priceList registeringOn: salesBook.
	
	sale := salesBook first.
	self assert: creditCard equals: sale chargedCreditCard.
	self assert: (priceList at: self item1SoldByStore) + (priceList at: self item2SoldByStore) equals: sale chargedAmount.
	self assert: (Bag with: self item1SoldByStore with: self item2SoldByStore) equals: sale itemsSold.
	! !

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:39:22'!
PASSED!

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 19:39:22'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:39:22'!
PASSED!

----SNAPSHOT----(31 October 2022 19:39:31) CuisUniversity-5481.image priorSource: 7146185!
!CashierTests methodsFor: 'tests' stamp: 'AS 10/31/2022 19:40:08' prior: 50556048!
test01CanNotCheckoutEmptyCart
	
	self should: [Cashier checkout: cart withCard: creditCard usingPriceList: priceList registeringOn: salesBook]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier canNotCheckoutEmptyCartErrorMessage.].! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 19:40:08'!
FAILURE!
!Cashier class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 19:40:26' prior: 50555032!
checkout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook
	aCart isEmpty ifTrue: [self error: self canNotCheckoutEmptyCartErrorMessage].
	^self new initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook ! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 19:40:27'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:40:27'!
PASSED!

!methodRemoval: Cashier class #checkout: stamp: 'AS 10/31/2022 19:40:39'!
checkout: aCart
	aCart isEmpty ifTrue: [self error: self canNotCheckoutEmptyCartErrorMessage].
	^self new initializeCheckout: aCart !
!Cashier class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 19:40:47' prior: 50556433!
checkout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook

	aCart isEmpty ifTrue: [self error: self canNotCheckoutEmptyCartErrorMessage].
	^self new initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook ! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 19:40:47'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:40:47'!
PASSED!
!Cashier class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 19:41:36'!
canNotCheckoutEmptyCartErrorSignal

	^ self error: self canNotCheckoutEmptyCartErrorMessage! !
!Cashier class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 19:41:36' prior: 50556459!
checkout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook

	aCart isEmpty ifTrue: [self canNotCheckoutEmptyCartErrorSignal].
	^self new initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook ! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 19:41:38'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 19:41:38'!
PASSED!

!classDefinition: #CashierTests category: 'TusLibros' stamp: 'AS 10/31/2022 19:42:04'!
TestCase subclass: #CashierTests
	instanceVariableNames: 'storeCatalog cart salesBook priceList creditCard expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTests methodsFor: 'tests' stamp: 'AS 10/31/2022 19:42:03'!
test03CanNotCheckoutWithExpiredCard
	
	self should: [Cashier checkout: cart withCard: expiredCreditCard usingPriceList: priceList registeringOn: salesBook]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier canNotCheckoutWithExpiredCardErrorMessage.].! !

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 10/31/2022 19:42:09'!
ERROR!
!Cashier class methodsFor: 'error message' stamp: 'AS 10/31/2022 19:42:24'!
canNotCheckoutWithExpiredCardErrorMessage
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error message' stamp: 'AS 10/31/2022 19:42:39' prior: 50556527!
canNotCheckoutWithExpiredCardErrorMessage
	
	^'Can not check out with expired card!!'! !

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 10/31/2022 19:42:40'!
FAILURE!
!CashierTests methodsFor: 'tests' stamp: 'AS 10/31/2022 19:43:00' prior: 50556511!
test03CanNotCheckoutWithExpiredCard
	
	
	cart add: self item1SoldByStore.
	
	self should: [Cashier checkout: cart withCard: expiredCreditCard usingPriceList: priceList registeringOn: salesBook]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier canNotCheckoutWithExpiredCardErrorMessage.].! !
!CashierTests methodsFor: 'tests' stamp: 'AS 10/31/2022 19:43:04' prior: 50556542!
test03CanNotCheckoutWithExpiredCard
	
	cart add: self item1SoldByStore.
	
	self should: [Cashier checkout: cart withCard: expiredCreditCard usingPriceList: priceList registeringOn: salesBook]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier canNotCheckoutWithExpiredCardErrorMessage.].! !

!methodRemoval: CashierTests #tearDown stamp: 'AS 10/31/2022 19:43:26'!
tearDown
	
	salesBook := OrderedCollection new.!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 10/31/2022 19:43:31'!
FAILURE!
!CashierTests methodsFor: 'setup - tear down' stamp: 'AS 10/31/2022 19:44:17' prior: 50556280 overrides: 16961394!
setUp 
	
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	creditCard := '12345'.
	expiredCreditCard := 'expired card'! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'AS 10/31/2022 19:53:11'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTests methodsFor: 'setup - tear down' stamp: 'AS 10/31/2022 19:52:58' prior: 50556578 overrides: 16961394!
setUp 
	
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	creditCard := '12345'.
	expiredCreditCard := CreditCard withExpirationDate: GregorianMonthOfYear year: self today year monthNumber: self today monthNumber - 1.! !

self today year!

self today.!

Time today !

Object today!

	GregorianDate today!

	Date today!

(GregorianMonthOfYear year: Date today year month: Date today month previous)!

	Date today previous !
!CashierTests methodsFor: 'setup - tear down' stamp: 'AS 10/31/2022 20:01:28' prior: 50556601 overrides: 16961394!
setUp 
	
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	creditCard := '12345'.
	expiredCreditCard := CreditCard withExpirationDate: (GregorianMonthOfYear year: Date today year month: Date today month previous).! !
!CreditCard class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 20:01:41'!
withExpirationDate: aGregorianMonthOfYear 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithExpirationDate: aGregorianMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 20:01:47' prior: 50556645!
withExpirationDate: aGregorianMonthOfYear 
	
	^self new initializeWithExpirationDate: aGregorianMonthOfYear ! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'AS 10/31/2022 20:01:57'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationDate gregorianMonthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'intialization' stamp: 'AS 10/31/2022 20:01:57'!
initializeWithExpirationDate: aGregorianMonthOfYear 
	self shouldBeImplemented.
	gregorianMonthOfYear := aGregorianMonthOfYear.! !
!CreditCard methodsFor: 'intialization' stamp: 'AS 10/31/2022 20:02:06' prior: 50556669!
initializeWithExpirationDate: aGregorianMonthOfYear 
	
	expirationDate := aGregorianMonthOfYear.! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 20:02:07'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 20:02:08'!
PASSED!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 10/31/2022 20:02:09'!
FAILURE!
!Cashier class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 20:03:17' prior: 50556484!
checkout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook

	aCart isEmpty ifTrue: [self canNotCheckoutEmptyCartErrorSignal].
	aCardToCharge isExpired ifTrue: [self error: self canNotCheckoutWithExpiredCardErrorMessage].
	^self new initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook ! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 20:03:19'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 20:03:19'!
ERROR!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 10/31/2022 20:03:19'!
ERROR!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 20:03:21'!
ERROR!
!CashierTests methodsFor: 'setup - tear down' stamp: 'AS 10/31/2022 20:03:58' prior: 50556627 overrides: 16961394!
setUp 
	
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	creditCard := CreditCard withExpirationDate: (GregorianMonthOfYear year: Date today year month: Date today month next).
	expiredCreditCard := CreditCard withExpirationDate: (GregorianMonthOfYear year: Date today year month: Date today month previous).! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 20:03:59'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 20:03:59'!
ERROR!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 10/31/2022 20:03:59'!
ERROR!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 20:04:01'!
ERROR!
!CreditCard methodsFor: 'expired' stamp: 'AS 10/31/2022 20:04:07'!
isExpired
	self shouldBeImplemented.! !

expirationDate!

Date today month!

Date today monthOfYear!

	^expirationDate > Date today !

	^expirationDate > Date today!

expirationDate!

expirationDate month!

Date today month!
!CreditCard methodsFor: 'expired' stamp: 'AS 10/31/2022 20:10:50' prior: 50556756!
isExpired
	
	^expirationDate month > Date today month or: [expirationDate year > Date today year].! !

expirationDate year!

Date today year!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 20:11:03'!
ERROR!

expirationDate month!

expirationDate month!

expirationDate!

GregorianMonthOfYear!

GregorianMonthOfYear year: Date today year month: Date today month!
!CreditCard methodsFor: 'expired' stamp: 'AS 10/31/2022 20:15:26' prior: 50556766!
isExpired
	
		^expirationDate >	 GregorianMonthOfYear year: Date today year month: Date today month.! !

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 20:15:27'!
ERROR!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 20:15:48'!
ERROR!

GregorianMonthOfYear!
!CreditCard methodsFor: 'expired' stamp: 'AS 10/31/2022 21:02:40' prior: 50556782!
isExpired
		self halt.
		^expirationDate >	 GregorianMonthOfYear year: Date today year month: Date today month.! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 21:02:41'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:02:49'!
ERROR!
!CreditCard methodsFor: 'expired' stamp: 'AS 10/31/2022 21:03:07' prior: 50556796!
isExpired
		
		^expirationDate >	 GregorianMonthOfYear year: Date today year month: Date today month.! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 21:03:07'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:03:07'!
ERROR!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 10/31/2022 21:03:07'!
ERROR!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:03:09'!
ERROR!

expirationDate!

GregorianMonthOfYear year: Date today year month: Date today month!

expirationDate!

!methodRemoval: CreditCard #isExpired stamp: 'AS 10/31/2022 21:05:37'!
isExpired
		
		^expirationDate >	 GregorianMonthOfYear year: Date today year month: Date today month.!

GregorianDate today year!

Date now!

	Date today!
!CashierTests methodsFor: 'setup - tear down' stamp: 'AS 10/31/2022 21:10:26' prior: 50556722 overrides: 16961394!
setUp 
	
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	creditCard := CreditCard withExpirationDate: GregorianMonthOfYear current next.
	expiredCreditCard := CreditCard withExpirationDate: GregorianMonthOfYear current previous.! !
!Cashier class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 21:11:47'!
checkout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook onDate: aGregorianDate 

	aCart isEmpty ifTrue: [self canNotCheckoutEmptyCartErrorSignal].
	aCardToCharge isExpired ifTrue: [self error: self canNotCheckoutWithExpiredCardErrorMessage].
	^self new initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook ! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 10/31/2022 21:11:47' prior: 50556384!
test02CanCheckoutCartWithItemsAndCorrectlyChargeCard
	
	| sale |
	
	cart add: self item1SoldByStore.
	cart add: self item2SoldByStore.
	
	Cashier checkout: cart withCard: creditCard usingPriceList: priceList registeringOn: salesBook onDate: aGregorianDate.
	
	sale := salesBook first.
	self assert: creditCard equals: sale chargedCreditCard.
	self assert: (priceList at: self item1SoldByStore) + (priceList at: self item2SoldByStore) equals: sale chargedAmount.
	self assert: (Bag with: self item1SoldByStore with: self item2SoldByStore) equals: sale itemsSold.
	! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 10/31/2022 21:11:47' prior: 50556556!
test03CanNotCheckoutWithExpiredCard
	
	cart add: self item1SoldByStore.
	
	self should: [Cashier checkout: cart withCard: expiredCreditCard usingPriceList: priceList registeringOn: salesBook onDate: aGregorianDate]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier canNotCheckoutWithExpiredCardErrorMessage.].! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 10/31/2022 21:11:47' prior: 50556417!
test01CanNotCheckoutEmptyCart
	
	self should: [Cashier checkout: cart withCard: creditCard usingPriceList: priceList registeringOn: salesBook onDate: aGregorianDate]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier canNotCheckoutEmptyCartErrorMessage.].! !

!methodRemoval: Cashier class #checkout:withCard:usingPriceList:registeringOn: stamp: 'AS 10/31/2022 21:11:47'!
checkout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook

	aCart isEmpty ifTrue: [self canNotCheckoutEmptyCartErrorSignal].
	aCardToCharge isExpired ifTrue: [self error: self canNotCheckoutWithExpiredCardErrorMessage].
	^self new initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook !
!CashierTests methodsFor: 'tests' stamp: 'AS 10/31/2022 21:12:44' prior: 50556911!
test01CanNotCheckoutEmptyCart
	
	self should: [Cashier checkout: cart withCard: creditCard usingPriceList: priceList registeringOn: salesBook onDate: FixedGregorianDate today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier canNotCheckoutEmptyCartErrorMessage.].! !
!CashierTests methodsFor: 'tests' stamp: 'AS 10/31/2022 21:12:47' prior: 50556875!
test02CanCheckoutCartWithItemsAndCorrectlyChargeCard
	
	| sale |
	
	cart add: self item1SoldByStore.
	cart add: self item2SoldByStore.
	
	Cashier checkout: cart withCard: creditCard usingPriceList: priceList registeringOn: salesBook onDate: FixedGregorianDate today.
	
	sale := salesBook first.
	self assert: creditCard equals: sale chargedCreditCard.
	self assert: (priceList at: self item1SoldByStore) + (priceList at: self item2SoldByStore) equals: sale chargedAmount.
	self assert: (Bag with: self item1SoldByStore with: self item2SoldByStore) equals: sale itemsSold.
	! !
!CashierTests methodsFor: 'tests' stamp: 'AS 10/31/2022 21:12:50' prior: 50556896!
test03CanNotCheckoutWithExpiredCard
	
	cart add: self item1SoldByStore.
	
	self should: [Cashier checkout: cart withCard: expiredCreditCard usingPriceList: priceList registeringOn: salesBook onDate: FixedGregorianDate today]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier canNotCheckoutWithExpiredCardErrorMessage.].! !
!Cashier class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 21:13:04' prior: 50556859!
checkout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook onDate: aFixedGregorianDate 

	aCart isEmpty ifTrue: [self canNotCheckoutEmptyCartErrorSignal].
	aCardToCharge isExpired ifTrue: [self error: self canNotCheckoutWithExpiredCardErrorMessage].
	^self new initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook ! !
!Cashier class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 21:13:46' prior: 50556990!
checkout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook onDate: aFixedGregorianDate 

	aCart isEmpty ifTrue: [self canNotCheckoutEmptyCartErrorSignal].
	(aCardToCharge isExpiredOn: aFixedGregorianDate) ifTrue: [self error: self canNotCheckoutWithExpiredCardErrorMessage].
	^self new initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook ! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 21:13:47'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:13:47'!
ERROR!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 10/31/2022 21:13:47'!
ERROR!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:13:49'!
ERROR!
!CreditCard methodsFor: 'expired' stamp: 'AS 10/31/2022 21:14:02'!
isExpiredOn: aFixedGregorianDate 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'expired' stamp: 'AS 10/31/2022 21:14:39' prior: 50557036!
isExpiredOn: aFixedGregorianDate 
	^expirationDate > aFixedGregorianDate monthOfYear .! !

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:14:40'!
ERROR!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:15:22'!
ERROR!
!CashierTests methodsFor: 'setup - tear down' stamp: 'AS 10/31/2022 21:16:06' prior: 50556840 overrides: 16961394!
setUp 
	
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	creditCard := CreditCard withExpirationDate: GregorianMonthOfYear current previous.
	expiredCreditCard := CreditCard withExpirationDate: GregorianMonthOfYear current next.! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 21:16:06'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:16:06'!
PASSED!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 10/31/2022 21:16:06'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/31/2022 21:17:49'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItemsAndIncludesThem stamp: 'AS 10/31/2022 21:17:49'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/31/2022 21:17:49'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/31/2022 21:17:49'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/31/2022 21:17:49'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/31/2022 21:17:49'!
PASSED!

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/31/2022 21:17:49'!
PASSED!

!testRun: #CartTests #test08CanGetItemsInCart stamp: 'AS 10/31/2022 21:17:49'!
PASSED!

!testRun: #CartTests #test09CanNotAddNonIntegerQuantityOfItem stamp: 'AS 10/31/2022 21:17:49'!
PASSED!

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 21:17:49'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:17:49'!
PASSED!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 10/31/2022 21:17:49'!
PASSED!

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 21:18:36'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:18:36'!
PASSED!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 10/31/2022 21:18:36'!
PASSED!
!Cashier methodsFor: 'initialization' stamp: 'AS 10/31/2022 21:18:59' prior: 50555593!
initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook 
	
	| amountToDebit |
	
	cart := aCart.
	cardToCharge := aCardToCharge.
	priceList := aPriceList.
	salesBook := aSalesBook.
	amountToDebit := (cart content sum: [:anItem | priceList at: anItem]).
	self debit: amountToDebit fromCard: cardToCharge.
	salesBook add: (Sale of: cart content havingCharged: amountToDebit on: cardToCharge).! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 21:18:59'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:18:59'!
ERROR!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 10/31/2022 21:18:59'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:18:59'!
ERROR!
!Cashier methodsFor: 'initialization' stamp: 'AS 10/31/2022 21:19:47' prior: 50557132!
initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook 
	
	| amountToDebit |
	
	cart := aCart.
	cardToCharge := aCardToCharge.
	priceList := aPriceList.
	salesBook := aSalesBook.
	amountToDebit := (cart content sum: [:anItem | priceList at: anItem]) ifEmpty: 0.
	self debit: amountToDebit fromCard: cardToCharge.
	salesBook add: (Sale of: cart content havingCharged: amountToDebit on: cardToCharge).! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 21:19:47'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:19:47'!
ERROR!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 10/31/2022 21:19:47'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:19:47'!
ERROR!
!Cashier methodsFor: 'initialization' stamp: 'AS 10/31/2022 21:20:37' prior: 50557163!
initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook 
	
	| amountToDebit |
	
	cart := aCart.
	cardToCharge := aCardToCharge.
	priceList := aPriceList.
	salesBook := aSalesBook.self halt.
	amountToDebit := (cart content sum: [:anItem | priceList at: anItem]) ifEmpty: 0.
	self debit: amountToDebit fromCard: cardToCharge.
	salesBook add: (Sale of: cart content havingCharged: amountToDebit on: cardToCharge).! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 21:20:37'!
PASSED!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 10/31/2022 21:20:37'!
PASSED!

a Cart!

cart content!
!Cashier methodsFor: 'initialization' stamp: 'AS 10/31/2022 21:22:04' prior: 50557194!
initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook 
	
	| amountToDebit |
	
	cart := aCart.
	cardToCharge := aCardToCharge.
	priceList := aPriceList.
	salesBook := aSalesBook.self halt.
	amountToDebit := (cart content sum: [:anItem | priceList at: anItem]) ifEmpty: [0].
	self debit: amountToDebit fromCard: cardToCharge.
	salesBook add: (Sale of: cart content havingCharged: amountToDebit on: cardToCharge).! !
!Cashier methodsFor: 'initialization' stamp: 'AS 10/31/2022 21:22:12' prior: 50557219!
initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook 
	
	| amountToDebit |
	
	cart := aCart.
	cardToCharge := aCardToCharge.
	priceList := aPriceList.
	salesBook := aSalesBook.
	amountToDebit := (cart content sum: [:anItem | priceList at: anItem]) ifEmpty: [0].
	self debit: amountToDebit fromCard: cardToCharge.
	salesBook add: (Sale of: cart content havingCharged: amountToDebit on: cardToCharge).! !

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:22:13'!
ERROR!

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 21:22:17'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:22:17'!
ERROR!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 10/31/2022 21:22:17'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:22:17'!
ERROR!
!Cashier methodsFor: 'initialization' stamp: 'AS 10/31/2022 21:23:27' prior: 50557237!
initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook 
	
	| amountToDebit |
	
	cart := aCart.
	cardToCharge := aCardToCharge.
	priceList := aPriceList.
	salesBook := aSalesBook.
	amountToDebit := cart content sum: [:anItem | priceList at: anItem] ifEmpty: [0].
	self debit: amountToDebit fromCard: cardToCharge.
	salesBook add: (Sale of: cart content havingCharged: amountToDebit on: cardToCharge).! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 21:23:27'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:23:27'!
ERROR!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 10/31/2022 21:23:27'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:23:27'!
ERROR!

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 21:23:34'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:23:34'!
ERROR!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 10/31/2022 21:23:34'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:23:34'!
ERROR!
!Cashier methodsFor: 'initialization' stamp: 'AS 10/31/2022 21:23:55' prior: 50557272!
initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook 
	
	| amountToDebit |
	
	cart := aCart.
	cardToCharge := aCardToCharge.
	priceList := aPriceList.
	salesBook := aSalesBook.
	amountToDebit := cart content sum: [:anItem | priceList at: anItem] ifEmpty: 0.
	self debit: amountToDebit fromCard: cardToCharge.
	salesBook add: (Sale of: cart content havingCharged: amountToDebit on: cardToCharge).! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 21:23:55'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:23:55'!
ERROR!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 10/31/2022 21:23:55'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:23:55'!
ERROR!
!Cashier methodsFor: 'initialization' stamp: 'AS 10/31/2022 19:34:36' prior: 50557317!
initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook 
	
	| amountToDebit |
	
	cart := aCart.
	cardToCharge := aCardToCharge.
	priceList := aPriceList.
	salesBook := aSalesBook.
	amountToDebit := (cart content inject: 0 into: [:accumulatedAmount :anItem | accumulatedAmount + priceList at: anItem]) .
	self debit: amountToDebit fromCard: cardToCharge.
	salesBook add: (Sale of: cart content havingCharged: amountToDebit on: cardToCharge).! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 21:24:31'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:24:31'!
PASSED!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 10/31/2022 21:24:31'!
PASSED!

----SNAPSHOT----(31 October 2022 21:24:40) CuisUniversity-5481.image priorSource: 7192432!

----SNAPSHOT----(31 October 2022 21:24:58) CuisUniversity-5481.image priorSource: 7223210!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'AS 10/31/2022 21:26:56'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #CardTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CardTests category: 'TusLibros' stamp: 'AS 10/31/2022 21:32:45'!
TestCase subclass: #CardTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 21:36:37'!
withNumber: aCardNumber withExpirationDate: aGregorianMonthOfYear 
	
	^self new initializeWithExpirationDate: aGregorianMonthOfYear ! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 10/31/2022 21:36:37' prior: 50557055 overrides: 16961394!
setUp 
	
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	creditCard := CreditCard withNumber: 1234567812345678 withExpirationDate: GregorianMonthOfYear current previous.
	expiredCreditCard := CreditCard withNumber: 1234567812345678 withExpirationDate: GregorianMonthOfYear current next.! !

!methodRemoval: CreditCard class #withExpirationDate: stamp: 'AS 10/31/2022 21:36:37'!
withExpirationDate: aGregorianMonthOfYear 
	
	^self new initializeWithExpirationDate: aGregorianMonthOfYear !
!CashierTests methodsFor: 'setup - tear down' stamp: 'AS 10/31/2022 21:36:57' prior: 50557408 overrides: 16961394!
setUp 
	
	| cardNumber |
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	cardNumber := 1234567812345678.
	creditCard := CreditCard withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current previous.
	expiredCreditCard := CreditCard withNumber: 1234567812345678 withExpirationDate: GregorianMonthOfYear current next.! !
!CashierTests methodsFor: 'setup - tear down' stamp: 'AS 10/31/2022 21:37:05' prior: 50557436 overrides: 16961394!
setUp 
	
	| cardNumber |
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	cardNumber := 1234567812345678.
	creditCard := CreditCard withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current previous.
	expiredCreditCard := CreditCard withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current next.! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 21:37:05'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:37:05'!
PASSED!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 10/31/2022 21:37:05'!
PASSED!
!CardTests methodsFor: 'nil' stamp: 'AS 10/31/2022 21:39:58'!
test01CanNotCreateCardWithNumberWithLessThan16Digits

	self should: [CreditCard withNumber: 123456781234567 withExpirationDate: FixedGregorianDate today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cardNumberMustBe16DigitsLongErrorMessage.]! !

!testRun: #CardTests #test01CanNotCreateCardWithNumberWithLessThan16Digits stamp: 'AS 10/31/2022 21:40:02'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 21:40:53' prior: 50557400!
withNumber: aCardNumber withExpirationDate: aGregorianMonthOfYear 
	aCardNumber length < 16 ifTrue: [self error: self cardNumberMustBe16DigitsLongErrorMessage].
	^self new initializeWithExpirationDate: aGregorianMonthOfYear ! !

!testRun: #CardTests #test01CanNotCreateCardWithNumberWithLessThan16Digits stamp: 'AS 10/31/2022 21:40:55'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 21:41:16' prior: 50557507!
withNumber: aCardNumber withExpirationDate: aGregorianMonthOfYear 
	aCardNumber length < 16 ifTrue: [self error: self cardNumberMustBe16DigitsLongErrorMessage].
	^self new initializeWithExpirationDate: aGregorianMonthOfYear ! !
!CardTests methodsFor: 'as yet unclassified' stamp: 'AS 10/31/2022 21:41:24' prior: 50557490!
test01CanNotCreateCardWithNumberWithLessThan16Digits

	self should: [CreditCard withNumber: '123456781234567' withExpirationDate: FixedGregorianDate today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cardNumberMustBe16DigitsLongErrorMessage.]! !
!CashierTests methodsFor: 'setup - tear down' stamp: 'AS 10/31/2022 21:41:34' prior: 50557459 overrides: 16961394!
setUp 
	
	| cardNumber |
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	cardNumber := '1234567812345678'.
	creditCard := CreditCard withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current previous.
	expiredCreditCard := CreditCard withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current next.! !

!testRun: #CardTests #test01CanNotCreateCardWithNumberWithLessThan16Digits stamp: 'AS 10/31/2022 21:41:53'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 21:42:21' prior: 50557521!
withNumber: aCardNumber withExpirationDate: aGregorianMonthOfYear 
	aCardNumber size < 16 ifTrue: [self error: self cardNumberMustBe16DigitsLongErrorMessage].
	^self new initializeWithExpirationDate: aGregorianMonthOfYear ! !

!testRun: #CardTests #test01CanNotCreateCardWithNumberWithLessThan16Digits stamp: 'AS 10/31/2022 21:42:21'!
ERROR!

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 21:42:21'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:42:21'!
PASSED!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 10/31/2022 21:42:21'!
PASSED!

!testRun: #CardTests #test01CanNotCreateCardWithNumberWithLessThan16Digits stamp: 'AS 10/31/2022 21:42:21'!
ERROR!
!CreditCard class methodsFor: 'error message' stamp: 'AS 10/31/2022 21:42:29'!
cardNumberMustBe16DigitsLongErrorMessage
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error message' stamp: 'AS 10/31/2022 21:42:46' prior: 50557599!
cardNumberMustBe16DigitsLongErrorMessage
	
	^'Card number must be 16 digits long'! !

!testRun: #CardTests #test01CanNotCreateCardWithNumberWithLessThan16Digits stamp: 'AS 10/31/2022 21:42:48'!
PASSED!

!testRun: #CardTests #test01CanNotCreateCardWithNumberWithLessThan16Digits stamp: 'AS 10/31/2022 21:43:15'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/31/2022 21:43:15'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItemsAndIncludesThem stamp: 'AS 10/31/2022 21:43:15'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/31/2022 21:43:15'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/31/2022 21:43:15'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/31/2022 21:43:15'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/31/2022 21:43:15'!
PASSED!

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/31/2022 21:43:15'!
PASSED!

!testRun: #CartTests #test08CanGetItemsInCart stamp: 'AS 10/31/2022 21:43:15'!
PASSED!

!testRun: #CartTests #test09CanNotAddNonIntegerQuantityOfItem stamp: 'AS 10/31/2022 21:43:15'!
PASSED!

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 21:43:15'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:43:15'!
PASSED!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 10/31/2022 21:43:15'!
PASSED!

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 21:43:21'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:43:21'!
PASSED!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 10/31/2022 21:43:21'!
PASSED!
!CardTests methodsFor: 'tests' stamp: 'AS 10/31/2022 21:43:57'!
test01CanNotCreateCardWithLessThan16DigitNumber

	self should: [CreditCard withNumber: '123456781234567' withExpirationDate: FixedGregorianDate today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cardNumberMustBe16DigitsLongErrorMessage.]! !

!methodRemoval: CardTests #test01CanNotCreateCardWithNumberWithLessThan16Digits stamp: 'AS 10/31/2022 21:43:57'!
test01CanNotCreateCardWithNumberWithLessThan16Digits

	self should: [CreditCard withNumber: '123456781234567' withExpirationDate: FixedGregorianDate today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cardNumberMustBe16DigitsLongErrorMessage.]!
!CardTests methodsFor: 'tests' stamp: 'AS 10/31/2022 21:44:11'!
test01CanNotCreateCardWithMoreThan16DigitNumber

	self should: [CreditCard withNumber: '12345678123456781' withExpirationDate: FixedGregorianDate today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cardNumberMustBe16DigitsLongErrorMessage.]! !

!testRun: #CardTests #test01CanNotCreateCardWithMoreThan16DigitNumber stamp: 'AS 10/31/2022 21:44:11'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 21:44:45' prior: 50557572!
withNumber: aCardNumber withExpirationDate: aGregorianMonthOfYear 
	(aCardNumber size < 16 or: [aCardNumber size > 16]) ifTrue: [self error: self cardNumberMustBe16DigitsLongErrorMessage].
	^self new initializeWithExpirationDate: aGregorianMonthOfYear ! !

!testRun: #CardTests #test01CanNotCreateCardWithMoreThan16DigitNumber stamp: 'AS 10/31/2022 21:44:50'!
PASSED!

!testRun: #CardTests #test01CanNotCreateCardWithLessThan16DigitNumber stamp: 'AS 10/31/2022 21:44:50'!
PASSED!

!testRun: #CardTests #test01CanNotCreateCardWithMoreThan16DigitNumber stamp: 'AS 10/31/2022 21:44:50'!
PASSED!
!CardTests methodsFor: 'tests' stamp: 'AS 10/31/2022 21:44:58'!
test02CanNotCreateCardWithMoreThan16DigitNumber

	self should: [CreditCard withNumber: '12345678123456781' withExpirationDate: FixedGregorianDate today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cardNumberMustBe16DigitsLongErrorMessage.]! !

!methodRemoval: CardTests #test01CanNotCreateCardWithMoreThan16DigitNumber stamp: 'AS 10/31/2022 21:44:58'!
test01CanNotCreateCardWithMoreThan16DigitNumber

	self should: [CreditCard withNumber: '12345678123456781' withExpirationDate: FixedGregorianDate today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cardNumberMustBe16DigitsLongErrorMessage.]!

!testRun: #CardTests #test02CanNotCreateCardWithMoreThan16DigitNumber stamp: 'AS 10/31/2022 21:45:01'!
PASSED!

!testRun: #CardTests #test01CanNotCreateCardWithLessThan16DigitNumber stamp: 'AS 10/31/2022 21:45:01'!
PASSED!

!testRun: #CardTests #test02CanNotCreateCardWithMoreThan16DigitNumber stamp: 'AS 10/31/2022 21:45:01'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 21:45:57' prior: 50557709!
withNumber: aCardNumber withExpirationDate: aGregorianMonthOfYear 
	aCardNumber size  ~= 16 ifTrue: [self error: self cardNumberMustBe16DigitsLongErrorMessage].
	^self new initializeWithExpirationDate: aGregorianMonthOfYear ! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 21:45:57'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:45:57'!
PASSED!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 10/31/2022 21:45:57'!
PASSED!

!testRun: #CardTests #test01CanNotCreateCardWithLessThan16DigitNumber stamp: 'AS 10/31/2022 21:45:57'!
PASSED!

!testRun: #CardTests #test02CanNotCreateCardWithMoreThan16DigitNumber stamp: 'AS 10/31/2022 21:45:57'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 21:46:14'!
assertIs16DigitsLong: aCardNumber

	^ aCardNumber size  ~= 16 ifTrue: [self error: self cardNumberMustBe16DigitsLongErrorMessage]! !
!CreditCard class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 21:46:14' prior: 50557768!
withNumber: aCardNumber withExpirationDate: aGregorianMonthOfYear 
	self assertIs16DigitsLong: aCardNumber.
	^self new initializeWithExpirationDate: aGregorianMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 21:46:24'!
assertIsSixteenDigitsLong: aCardNumber

	^ aCardNumber size  ~= 16 ifTrue: [self error: self cardNumberMustBe16DigitsLongErrorMessage]! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'AS 10/31/2022 21:46:24' prior: 50557803!
withNumber: aCardNumber withExpirationDate: aGregorianMonthOfYear 
	self assertIsSixteenDigitsLong: aCardNumber.
	^self new initializeWithExpirationDate: aGregorianMonthOfYear ! !

!methodRemoval: CreditCard class #assertIs16DigitsLong: stamp: 'AS 10/31/2022 21:46:24'!
assertIs16DigitsLong: aCardNumber

	^ aCardNumber size  ~= 16 ifTrue: [self error: self cardNumberMustBe16DigitsLongErrorMessage]!

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 21:46:27'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:46:27'!
PASSED!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 10/31/2022 21:46:27'!
PASSED!

!testRun: #CardTests #test01CanNotCreateCardWithLessThan16DigitNumber stamp: 'AS 10/31/2022 21:46:27'!
PASSED!

!testRun: #CardTests #test02CanNotCreateCardWithMoreThan16DigitNumber stamp: 'AS 10/31/2022 21:46:27'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 21:46:30' prior: 50557820!
withNumber: aCardNumber withExpirationDate: aGregorianMonthOfYear 

	self assertIsSixteenDigitsLong: aCardNumber.
	^self new initializeWithExpirationDate: aGregorianMonthOfYear ! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 21:46:30'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:46:30'!
PASSED!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 10/31/2022 21:46:30'!
PASSED!

!testRun: #CardTests #test01CanNotCreateCardWithLessThan16DigitNumber stamp: 'AS 10/31/2022 21:46:30'!
PASSED!

!testRun: #CardTests #test02CanNotCreateCardWithMoreThan16DigitNumber stamp: 'AS 10/31/2022 21:46:30'!
PASSED!
!Cashier class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 21:47:06'!
canNotCheckoutWithExpiredCardErrorSignal

	^ self error: self canNotCheckoutWithExpiredCardErrorMessage! !
!Cashier class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 21:47:06' prior: 50557006!
checkout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook onDate: aFixedGregorianDate 

	aCart isEmpty ifTrue: [self canNotCheckoutEmptyCartErrorSignal].
	(aCardToCharge isExpiredOn: aFixedGregorianDate) ifTrue: [self canNotCheckoutWithExpiredCardErrorSignal].
	^self new initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook ! !
!Cashier class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 21:47:24'!
assertIsNotEmpty: aCart

	^ aCart isEmpty ifTrue: [self canNotCheckoutEmptyCartErrorSignal]! !
!Cashier class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 21:47:24' prior: 50557886!
checkout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook onDate: aFixedGregorianDate 

	self assertIsNotEmpty: aCart.
	(aCardToCharge isExpiredOn: aFixedGregorianDate) ifTrue: [self canNotCheckoutWithExpiredCardErrorSignal].
	^self new initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook ! !
!Cashier class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 21:47:57'!
assertCard: aCardToCharge isNotExpiredOn: aFixedGregorianDate

	^ (aCardToCharge isExpiredOn: aFixedGregorianDate) ifTrue: [self canNotCheckoutWithExpiredCardErrorSignal]! !
!Cashier class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 21:47:57' prior: 50557908!
checkout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook onDate: aFixedGregorianDate 

	self assertIsNotEmpty: aCart.
	self assertCard: aCardToCharge isNotExpiredOn: aFixedGregorianDate.
	^self new initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 21:50:16'!
for: aCardOwnerName withNumber: aCardNumber withExpirationDate: aGregorianMonthOfYear 

	self assertIsSixteenDigitsLong: aCardNumber.
	^self new initializeWithExpirationDate: aGregorianMonthOfYear ! !
!CardTests methodsFor: 'as yet unclassified' stamp: 'AS 10/31/2022 21:50:16' prior: 50557730!
test02CanNotCreateCardWithMoreThan16DigitNumber

	self should: [CreditCard for: 'Homero Simpsons' withNumber: '12345678123456781' withExpirationDate: FixedGregorianDate today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cardNumberMustBe16DigitsLongErrorMessage.]! !
!CardTests methodsFor: 'as yet unclassified' stamp: 'AS 10/31/2022 21:50:16' prior: 50557666!
test01CanNotCreateCardWithLessThan16DigitNumber

	self should: [CreditCard for: 'Homero Simpsons' withNumber: '123456781234567' withExpirationDate: FixedGregorianDate today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cardNumberMustBe16DigitsLongErrorMessage.]! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 10/31/2022 21:50:16' prior: 50557546 overrides: 16961394!
setUp 
	
	| cardNumber |
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	cardNumber := '1234567812345678'.
	creditCard := CreditCard for: 'Homero Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current previous.
	expiredCreditCard := CreditCard for: 'Homero Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current next.! !

!methodRemoval: CreditCard class #withNumber:withExpirationDate: stamp: 'AS 10/31/2022 21:50:16'!
withNumber: aCardNumber withExpirationDate: aGregorianMonthOfYear 

	self assertIsSixteenDigitsLong: aCardNumber.
	^self new initializeWithExpirationDate: aGregorianMonthOfYear !

!testRun: #CardTests #test01CanNotCreateCardWithLessThan16DigitNumber stamp: 'AS 10/31/2022 21:50:36'!
PASSED!

!testRun: #CardTests #test02CanNotCreateCardWithMoreThan16DigitNumber stamp: 'AS 10/31/2022 21:50:36'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 10/31/2022 21:50:36'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItemsAndIncludesThem stamp: 'AS 10/31/2022 21:50:36'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 10/31/2022 21:50:36'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 10/31/2022 21:50:36'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 10/31/2022 21:50:36'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 10/31/2022 21:50:36'!
PASSED!

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 10/31/2022 21:50:36'!
PASSED!

!testRun: #CartTests #test08CanGetItemsInCart stamp: 'AS 10/31/2022 21:50:36'!
PASSED!

!testRun: #CartTests #test09CanNotAddNonIntegerQuantityOfItem stamp: 'AS 10/31/2022 21:50:36'!
PASSED!

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 21:50:36'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:50:36'!
PASSED!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 10/31/2022 21:50:36'!
PASSED!
!CardTests methodsFor: 'tests' stamp: 'AS 10/31/2022 21:51:29'!
test03CanNotCreateCardWithEmptyName

	self should: [CreditCard for: '' withNumber: '12345678123456781' withExpirationDate: FixedGregorianDate today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cardOwnerNameCanNotBeEmptyErrorMessage.]! !

!testRun: #CardTests #test03CanNotCreateCardWithEmptyName stamp: 'AS 10/31/2022 21:51:32'!
ERROR!
!CreditCard class methodsFor: 'error message' stamp: 'AS 10/31/2022 21:51:37'!
cardOwnerNameCanNotBeEmptyErrorMessage
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error message' stamp: 'AS 10/31/2022 21:51:51' prior: 50558078!
cardOwnerNameCanNotBeEmptyErrorMessage
	
	^'Card owner name can not be empty!!'! !

!testRun: #CardTests #test03CanNotCreateCardWithEmptyName stamp: 'AS 10/31/2022 21:51:52'!
FAILURE!
!CardTests methodsFor: 'tests' stamp: 'AS 10/31/2022 21:52:04' prior: 50558062!
test03CanNotCreateCardWithEmptyName

	self should: [CreditCard for: '' withNumber: '1234567812345678' withExpirationDate: FixedGregorianDate today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cardOwnerNameCanNotBeEmptyErrorMessage.]! !

!testRun: #CardTests #test03CanNotCreateCardWithEmptyName stamp: 'AS 10/31/2022 21:52:04'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 21:52:48' prior: 50557946!
for: aCardOwnerName withNumber: aCardNumber withExpirationDate: aGregorianMonthOfYear 

	self assertIsSixteenDigitsLong: aCardNumber.
	aCardOwnerName isEmpty ifTrue: [self error: self cardOwnerNameCanNotBeEmptyErrorMessage].
	^self new initializeWithExpirationDate: aGregorianMonthOfYear ! !

!testRun: #CardTests #test01CanNotCreateCardWithLessThan16DigitNumber stamp: 'AS 10/31/2022 21:52:49'!
PASSED!

!testRun: #CardTests #test02CanNotCreateCardWithMoreThan16DigitNumber stamp: 'AS 10/31/2022 21:52:49'!
PASSED!

!testRun: #CardTests #test03CanNotCreateCardWithEmptyName stamp: 'AS 10/31/2022 21:52:49'!
PASSED!

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 21:52:49'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:52:49'!
PASSED!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 10/31/2022 21:52:49'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 21:53:02'!
cardOwnerNameCanNotBeEmptyErrorSignal

	^ self error: self cardOwnerNameCanNotBeEmptyErrorMessage! !
!CreditCard class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 21:53:02' prior: 50558110!
for: aCardOwnerName withNumber: aCardNumber withExpirationDate: aGregorianMonthOfYear 

	self assertIsSixteenDigitsLong: aCardNumber.
	aCardOwnerName isEmpty ifTrue: [self cardOwnerNameCanNotBeEmptyErrorSignal].
	^self new initializeWithExpirationDate: aGregorianMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 21:53:13'!
cardNumberMustBe16DigitsLongErrorSignal

	^ self error: self cardNumberMustBe16DigitsLongErrorMessage! !
!CreditCard class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 21:53:13' prior: 50557812!
assertIsSixteenDigitsLong: aCardNumber

	^ aCardNumber size  ~= 16 ifTrue: [self cardNumberMustBe16DigitsLongErrorSignal]! !
!CreditCard class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 21:53:44'!
assertIsNotEmpty: aCardOwnerName

	^ aCardOwnerName isEmpty ifTrue: [self cardOwnerNameCanNotBeEmptyErrorSignal]! !
!CreditCard class methodsFor: 'instance creation' stamp: 'AS 10/31/2022 21:53:44' prior: 50558149!
for: aCardOwnerName withNumber: aCardNumber withExpirationDate: aGregorianMonthOfYear 

	self assertIsSixteenDigitsLong: aCardNumber.
	self assertIsNotEmpty: aCardOwnerName.
	^self new initializeWithExpirationDate: aGregorianMonthOfYear ! !

!testRun: #CardTests #test01CanNotCreateCardWithLessThan16DigitNumber stamp: 'AS 10/31/2022 21:53:46'!
PASSED!

!testRun: #CardTests #test02CanNotCreateCardWithMoreThan16DigitNumber stamp: 'AS 10/31/2022 21:53:46'!
PASSED!

!testRun: #CardTests #test03CanNotCreateCardWithEmptyName stamp: 'AS 10/31/2022 21:53:46'!
PASSED!

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 10/31/2022 21:53:46'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 10/31/2022 21:53:46'!
PASSED!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 10/31/2022 21:53:46'!
PASSED!

----SNAPSHOT----(31 October 2022 21:54:01) CuisUniversity-5481.image priorSource: 7223302!

----QUIT----(31 October 2022 21:55:54) CuisUniversity-5481.image priorSource: 7249972!

----STARTUP---- (1 November 2022 23:05:37) as /home/andisici/Documents/2022/ing-2c2022/cuisTusLibros/CuisUniversity-5481.image!

!CardTests methodsFor: 'tests' stamp: 'AS 11/1/2022 23:06:23'!
validOwnerName

	^ 'Homero Simpsons'! !
!CardTests methodsFor: 'tests' stamp: 'AS 11/1/2022 23:06:24' prior: 50557970!
test01CanNotCreateCardWithLessThan16DigitNumber

	self should: [CreditCard for: self validOwnerName withNumber: '123456781234567' withExpirationDate: FixedGregorianDate today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cardNumberMustBe16DigitsLongErrorMessage.]! !
!CardTests methodsFor: 'tests' stamp: 'AS 11/1/2022 23:06:24' prior: 50557956!
test02CanNotCreateCardWithMoreThan16DigitNumber

	self should: [CreditCard for: self validOwnerName withNumber: '12345678123456781' withExpirationDate: FixedGregorianDate today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cardNumberMustBe16DigitsLongErrorMessage.]! !
!CardTests methodsFor: 'tests' stamp: 'AS 11/1/2022 23:06:58'!
lessThan16DigitNumber

	^ '123456781234567'! !
!CardTests methodsFor: 'tests' stamp: 'AS 11/1/2022 23:06:58' prior: 50558226!
test01CanNotCreateCardWithLessThan16DigitNumber

	self should: [CreditCard for: self validOwnerName withNumber: self lessThan16DigitNumber withExpirationDate: FixedGregorianDate today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cardNumberMustBe16DigitsLongErrorMessage.]! !
!CardTests methodsFor: 'tests' stamp: 'AS 11/1/2022 23:07:16'!
overSixteenDigitNumber

	^ '12345678123456781'! !
!CardTests methodsFor: 'tests' stamp: 'AS 11/1/2022 23:07:16' prior: 50558240!
test02CanNotCreateCardWithMoreThan16DigitNumber

	self should: [CreditCard for: self validOwnerName withNumber: self overSixteenDigitNumber withExpirationDate: FixedGregorianDate today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cardNumberMustBe16DigitsLongErrorMessage.]! !
!CardTests methodsFor: 'tests' stamp: 'AS 11/1/2022 23:07:28'!
sixteenDigitNumber

	^ '1234567812345678'! !
!CardTests methodsFor: 'tests' stamp: 'AS 11/1/2022 23:07:28' prior: 50558093!
test03CanNotCreateCardWithEmptyName

	self should: [CreditCard for: '' withNumber: self sixteenDigitNumber withExpirationDate: FixedGregorianDate today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cardOwnerNameCanNotBeEmptyErrorMessage.]! !
!CardTests methodsFor: 'tests' stamp: 'AS 11/1/2022 23:08:32'!
test04CanNotCreateCardWithNameWithSpaces

	self should: [CreditCard for: '  ' withNumber: self sixteenDigitNumber withExpirationDate: FixedGregorianDate today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cardOwnerNameCanNotBeEmptyErrorMessage.]! !

!testRun: #CardTests #test04CanNotCreateCardWithNameWithSpaces stamp: 'AS 11/1/2022 23:08:33'!
FAILURE!

'  ' withoutSeparators !
!CreditCard class methodsFor: 'instance creation' stamp: 'AS 11/1/2022 23:11:53' prior: 50558175!
assertIsNotEmpty: aCardOwnerName

	^aCardOwnerName withoutSeparators isEmpty ifTrue: [self cardOwnerNameCanNotBeEmptyErrorSignal]! !

!testRun: #CardTests #test04CanNotCreateCardWithNameWithSpaces stamp: 'AS 11/1/2022 23:11:54'!
PASSED!

!testRun: #CardTests #test01CanNotCreateCardWithLessThan16DigitNumber stamp: 'AS 11/1/2022 23:11:54'!
PASSED!

!testRun: #CardTests #test02CanNotCreateCardWithMoreThan16DigitNumber stamp: 'AS 11/1/2022 23:11:54'!
PASSED!

!testRun: #CardTests #test03CanNotCreateCardWithEmptyName stamp: 'AS 11/1/2022 23:11:54'!
PASSED!

!testRun: #CardTests #test04CanNotCreateCardWithNameWithSpaces stamp: 'AS 11/1/2022 23:11:54'!
PASSED!
!CardTests methodsFor: 'tests' stamp: 'AS 11/1/2022 23:12:35'!
test04CanNotCreateCardWithNameWithOnlySeparators

	self should: [CreditCard for: '  ' withNumber: self sixteenDigitNumber withExpirationDate: FixedGregorianDate today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cardOwnerNameCanNotBeEmptyErrorMessage.]! !

!methodRemoval: CardTests #test04CanNotCreateCardWithNameWithSpaces stamp: 'AS 11/1/2022 23:12:35'!
test04CanNotCreateCardWithNameWithSpaces

	self should: [CreditCard for: '  ' withNumber: self sixteenDigitNumber withExpirationDate: FixedGregorianDate today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: CreditCard cardOwnerNameCanNotBeEmptyErrorMessage.]!

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 11/1/2022 23:13:19'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 11/1/2022 23:13:19'!
PASSED!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 11/1/2022 23:13:19'!
PASSED!

----SNAPSHOT----(1 November 2022 23:18:21) CuisUniversity-5481.image priorSource: 7250064!
!Cashier class methodsFor: 'instance creation' stamp: 'AS 11/1/2022 23:22:30'!
checkout: aCart chargingWith: aMerchantProcessor withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook onDate: aFixedGregorianDate 

	self assertIsNotEmpty: aCart.
	self assertCard: aCardToCharge isNotExpiredOn: aFixedGregorianDate.
	^self new initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook ! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 11/1/2022 23:22:30' prior: 50556953!
test02CanCheckoutCartWithItemsAndCorrectlyChargeCard
	
	| sale |
	
	cart add: self item1SoldByStore.
	cart add: self item2SoldByStore.
	
	Cashier checkout: cart chargingWith: merchantProcessorDouble withCard: creditCard usingPriceList: priceList registeringOn: salesBook onDate: FixedGregorianDate today.
	
	sale := salesBook first.
	self assert: creditCard equals: sale chargedCreditCard.
	self assert: (priceList at: self item1SoldByStore) + (priceList at: self item2SoldByStore) equals: sale chargedAmount.
	self assert: (Bag with: self item1SoldByStore with: self item2SoldByStore) equals: sale itemsSold.
	! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 11/1/2022 23:22:30' prior: 50556939!
test01CanNotCheckoutEmptyCart
	
	self should: [Cashier checkout: cart chargingWith: merchantProcessorDouble withCard: creditCard usingPriceList: priceList registeringOn: salesBook onDate: FixedGregorianDate today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier canNotCheckoutEmptyCartErrorMessage.].! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 11/1/2022 23:22:30' prior: 50556974!
test03CanNotCheckoutWithExpiredCard
	
	cart add: self item1SoldByStore.
	
	self should: [Cashier checkout: cart chargingWith: merchantProcessorDouble withCard: expiredCreditCard usingPriceList: priceList registeringOn: salesBook onDate: FixedGregorianDate today]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier canNotCheckoutWithExpiredCardErrorMessage.].! !

!methodRemoval: Cashier class #checkout:withCard:usingPriceList:registeringOn:onDate: stamp: 'AS 11/1/2022 23:22:30'!
checkout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook onDate: aFixedGregorianDate 

	self assertIsNotEmpty: aCart.
	self assertCard: aCardToCharge isNotExpiredOn: aFixedGregorianDate.
	^self new initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook !

!classDefinition: #CashierTests category: 'TusLibros' stamp: 'AS 11/1/2022 23:24:30'!
TestCase subclass: #CashierTests
	instanceVariableNames: 'storeCatalog cart salesBook priceList creditCard expiredCreditCard merchantProcessorDouble'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTests methodsFor: 'tests' stamp: 'AS 11/1/2022 23:24:28'!
test04CanNotCheckoutWithExpiredCard
	
	cart add: self item1SoldByStore.
	
	self should: [Cashier checkout: cart chargingWith: merchantProcessorDouble withCard: expiredCreditCard usingPriceList: priceList registeringOn: salesBook onDate: FixedGregorianDate today]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier canNotCheckoutWithStolenCardErrorMessage.].! !

!testRun: #CashierTests #test04CanNotCheckoutWithExpiredCard stamp: 'AS 11/1/2022 23:24:42'!
ERROR!
!Cashier class methodsFor: 'error message' stamp: 'AS 11/1/2022 23:24:53'!
canNotCheckoutWithStolenCardErrorMessage
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error message' stamp: 'AS 11/1/2022 23:26:13' prior: 50558499!
canNotCheckoutWithStolenCardErrorMessage
	
	^'Can not check out with a stolen card!!'! !

!testRun: #CashierTests #test04CanNotCheckoutWithExpiredCard stamp: 'AS 11/1/2022 23:26:15'!
FAILURE!

!testRun: #CashierTests #test04CanNotCheckoutWithExpiredCard stamp: 'AS 11/1/2022 23:26:21'!
FAILURE!
!Cashier methodsFor: 'initialization' stamp: 'AS 11/1/2022 23:28:19'!
initializeCheckout: aCart chargingWith: aMerchantProcessor withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook 
	
	| amountToDebit |
	
	cart := aCart.
	cardToCharge := aCardToCharge.
	priceList := aPriceList.
	salesBook := aSalesBook.
	amountToDebit := (cart content inject: 0 into: [:accumulatedAmount :anItem | accumulatedAmount + priceList at: anItem]) .
	self debit: amountToDebit fromCard: cardToCharge.
	salesBook add: (Sale of: cart content havingCharged: amountToDebit on: cardToCharge).! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'AS 11/1/2022 23:28:20' prior: 50558387!
checkout: aCart chargingWith: aMerchantProcessor withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook onDate: aFixedGregorianDate 

	self assertIsNotEmpty: aCart.
	self assertCard: aCardToCharge isNotExpiredOn: aFixedGregorianDate.
	^self new initializeCheckout: aCart chargingWith: aMerchantProcessor withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook ! !

!methodRemoval: Cashier #initializeCheckout:withCard:usingPriceList:registeringOn: stamp: 'AS 11/1/2022 23:28:20'!
initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook 
	
	| amountToDebit |
	
	cart := aCart.
	cardToCharge := aCardToCharge.
	priceList := aPriceList.
	salesBook := aSalesBook.
	amountToDebit := (cart content inject: 0 into: [:accumulatedAmount :anItem | accumulatedAmount + priceList at: anItem]) .
	self debit: amountToDebit fromCard: cardToCharge.
	salesBook add: (Sale of: cart content havingCharged: amountToDebit on: cardToCharge).!

!testRun: #CashierTests #test04CanNotCheckoutWithExpiredCard stamp: 'AS 11/1/2022 23:28:34'!
FAILURE!

!classDefinition: #CashierTests category: 'TusLibros' stamp: 'AS 11/1/2022 23:29:20'!
TestCase subclass: #CashierTests
	instanceVariableNames: 'storeCatalog cart salesBook priceList validCreditCard expiredCreditCard merchantProcessorDouble'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 11/1/2022 23:29:20' prior: 50557985 overrides: 16961394!
setUp 
	
	| cardNumber |
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	cardNumber := '1234567812345678'.
	validCreditCard := CreditCard for: 'Homero Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current previous.
	expiredCreditCard := CreditCard for: 'Homero Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current next.! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 11/1/2022 23:29:20' prior: 50558425!
test01CanNotCheckoutEmptyCart
	
	self should: [Cashier checkout: cart chargingWith: merchantProcessorDouble withCard: validCreditCard usingPriceList: priceList registeringOn: salesBook onDate: FixedGregorianDate today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier canNotCheckoutEmptyCartErrorMessage.].! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 11/1/2022 23:29:20' prior: 50558402!
test02CanCheckoutCartWithItemsAndCorrectlyChargeCard
	
	| sale |
	
	cart add: self item1SoldByStore.
	cart add: self item2SoldByStore.
	
	Cashier checkout: cart chargingWith: merchantProcessorDouble withCard: validCreditCard usingPriceList: priceList registeringOn: salesBook onDate: FixedGregorianDate today.
	
	sale := salesBook first.
	self assert: validCreditCard equals: sale chargedCreditCard.
	self assert: (priceList at: self item1SoldByStore) + (priceList at: self item2SoldByStore) equals: sale chargedAmount.
	self assert: (Bag with: self item1SoldByStore with: self item2SoldByStore) equals: sale itemsSold.
	! !

!classDefinition: #CashierTests category: 'TusLibros' stamp: 'AS 11/1/2022 23:30:06'!
TestCase subclass: #CashierTests
	instanceVariableNames: 'storeCatalog cart salesBook priceList validCreditCard expiredCreditCard merchantProcessorDouble stolenCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTests methodsFor: 'setup - tear down' stamp: 'AS 11/1/2022 23:30:04' prior: 50558586 overrides: 16961394!
setUp 
	
	| cardNumber |
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	cardNumber := '1234567812345678'.
	validCreditCard := CreditCard for: 'Homero Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current previous.
	expiredCreditCard := CreditCard for: 'Homero Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current next.
	stolenCreditCard := CreditCard for: 'Lisa Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current previous.! !
!CashierTests methodsFor: 'tests' stamp: 'AS 11/1/2022 23:30:51' prior: 50558480!
test04CanNotCheckoutWithExpiredCard
	
	cart add: self item1SoldByStore.
	
	self should: [Cashier checkout: cart chargingWith: merchantProcessorDouble withCard: stolenCreditCard usingPriceList: priceList registeringOn: salesBook onDate: FixedGregorianDate today]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier canNotCheckoutWithStolenCardErrorMessage.].! !

!testRun: #CashierTests #test04CanNotCheckoutWithExpiredCard stamp: 'AS 11/1/2022 23:30:51'!
FAILURE!
!Cashier methodsFor: 'initialization' stamp: 'AS 11/1/2022 23:32:01' prior: 50558517!
initializeCheckout: aCart chargingWith: aMerchantProcessor withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook 
	
	| amountToDebit |
	
	cart := aCart.
	cardToCharge := aCardToCharge.
	priceList := aPriceList.
	salesBook := aSalesBook.
	amountToDebit := (cart content inject: 0 into: [:accumulatedAmount :anItem | accumulatedAmount + priceList at: anItem]) .
	aMerchantProcessor debit: amountToDebit fromCard: cardToCharge.
	salesBook add: (Sale of: cart content havingCharged: amountToDebit on: cardToCharge).! !

!testRun: #CashierTests #test04CanNotCheckoutWithExpiredCard stamp: 'AS 11/1/2022 23:32:04'!
ERROR!

!classDefinition: #MerchantProcessorDouble category: 'TusLibros' stamp: 'AS 11/1/2022 23:32:58'!
Object subclass: #MerchantProcessorDouble
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTests methodsFor: 'setup - tear down' stamp: 'AS 11/1/2022 23:32:29' prior: 50558659 overrides: 16961394!
setUp 
	
	| cardNumber |
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	cardNumber := '1234567812345678'.
	validCreditCard := CreditCard for: 'Homero Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current previous.
	expiredCreditCard := CreditCard for: 'Homero Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current next.
	stolenCreditCard := CreditCard for: 'Lisa Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current previous.
	merchantProcessorDouble := MerchantProcessorDouble new.! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 11/1/2022 23:33:01'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 11/1/2022 23:33:01'!
ERROR!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 11/1/2022 23:33:01'!
PASSED!

!testRun: #CashierTests #test04CanNotCheckoutWithExpiredCard stamp: 'AS 11/1/2022 23:33:01'!
ERROR!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 11/1/2022 23:33:03'!
ERROR!
!CashierTests methodsFor: 'setup - tear down' stamp: 'AS 11/1/2022 23:33:36' prior: 50558738 overrides: 16961394!
setUp 
	
	| cardNumber |
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	cardNumber := '1234567812345678'.
	validCreditCard := CreditCard for: 'Homero Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current previous.
	expiredCreditCard := CreditCard for: 'Homero Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current next.
	stolenCreditCard := CreditCard for: 'Lisa Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current previous.
	merchantProcessorDouble := MerchantProcessorDouble withStolenCards: (OrderedCollection with: stolenCreditCard).! !
!MerchantProcessorDouble class methodsFor: 'instance creation' stamp: 'AS 11/1/2022 23:33:46'!
withStolenCards: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithStolenCards: anOrderedCollection ! !
!MerchantProcessorDouble class methodsFor: 'instance creation' stamp: 'AS 11/1/2022 23:34:02' prior: 50558817!
withStolenCards: aCollectionOfStolenCards 
	
	^self new initializeWithStolenCards: aCollectionOfStolenCards ! !

!classDefinition: #MerchantProcessorDouble category: 'TusLibros' stamp: 'AS 11/1/2022 23:34:11'!
Object subclass: #MerchantProcessorDouble
	instanceVariableNames: 'collectionOfStolenCards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorDouble methodsFor: 'initialization' stamp: 'AS 11/1/2022 23:34:11'!
initializeWithStolenCards: aCollectionOfStolenCards 
	self shouldBeImplemented.
	collectionOfStolenCards := aCollectionOfStolenCards.! !
!MerchantProcessorDouble methodsFor: 'initialization' stamp: 'AS 11/1/2022 23:34:16' prior: 50558842!
initializeWithStolenCards: aCollectionOfStolenCards 

	collectionOfStolenCards := aCollectionOfStolenCards.! !

!classDefinition: #MerchantProcessorDouble category: 'TusLibros' stamp: 'AS 11/1/2022 23:34:22'!
Object subclass: #MerchantProcessorDouble
	instanceVariableNames: 'stolenCards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorDouble methodsFor: 'as yet unclassified' stamp: 'AS 11/1/2022 23:34:22' prior: 50558850!
initializeWithStolenCards: aCollectionOfStolenCards 

	stolenCards := aCollectionOfStolenCards.! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 11/1/2022 23:34:45'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 11/1/2022 23:34:46'!
ERROR!
!MerchantProcessorDouble methodsFor: 'debit' stamp: 'AS 11/1/2022 23:34:58'!
debit: aSmallInteger fromCard: aCreditCard 
	self shouldBeImplemented.! !
!MerchantProcessorDouble methodsFor: 'debit' stamp: 'AS 11/1/2022 23:36:57' prior: 50558878!
debit: anAmountToDebit fromCard: aCreditCardToDebitFrom
	
	(stolenCards includes: aCreditCardToDebitFrom) ifTrue: [Cashier canNotCheckoutWithStolenCardErrorSignal].! !

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 11/1/2022 23:37:10'!
PASSED!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 11/1/2022 23:37:12'!
PASSED!

!testRun: #CashierTests #test04CanNotCheckoutWithExpiredCard stamp: 'AS 11/1/2022 23:37:12'!
ERROR!
!Cashier class methodsFor: 'error signal' stamp: 'AS 11/1/2022 23:37:17'!
canNotCheckoutWithStolenCardErrorSignal
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error signal' stamp: 'AS 11/1/2022 23:37:26' prior: 50558902!
canNotCheckoutWithStolenCardErrorSignal

	self error: self class canNotCheckoutWithStolenCardErrorMessage! !

!testRun: #CashierTests #test04CanNotCheckoutWithExpiredCard stamp: 'AS 11/1/2022 23:37:27'!
ERROR!
!Cashier class methodsFor: 'error signal' stamp: 'AS 11/1/2022 23:37:34' prior: 50558907!
canNotCheckoutWithStolenCardErrorSignal

	self error: self canNotCheckoutWithStolenCardErrorMessage! !

!testRun: #CashierTests #test04CanNotCheckoutWithExpiredCard stamp: 'AS 11/1/2022 23:37:35'!
PASSED!

!testRun: #CardTests #test01CanNotCreateCardWithLessThan16DigitNumber stamp: 'AS 11/1/2022 23:37:40'!
PASSED!

!testRun: #CardTests #test02CanNotCreateCardWithMoreThan16DigitNumber stamp: 'AS 11/1/2022 23:37:40'!
PASSED!

!testRun: #CardTests #test03CanNotCreateCardWithEmptyName stamp: 'AS 11/1/2022 23:37:40'!
PASSED!

!testRun: #CardTests #test04CanNotCreateCardWithNameWithOnlySeparators stamp: 'AS 11/1/2022 23:37:40'!
PASSED!

!testRun: #CartTests #test01CartIsEmptyWhenCreated stamp: 'AS 11/1/2022 23:37:40'!
PASSED!

!testRun: #CartTests #test02CartIsNotEmptyAfterAddingItemsAndIncludesThem stamp: 'AS 11/1/2022 23:37:40'!
PASSED!

!testRun: #CartTests #test03CartSizeIsAmountOfNewAddedItems stamp: 'AS 11/1/2022 23:37:40'!
PASSED!

!testRun: #CartTests #test04CanNotAddItemNotInStoreCatalog stamp: 'AS 11/1/2022 23:37:40'!
PASSED!

!testRun: #CartTests #test05CanAddToCartManyOfSameItem stamp: 'AS 11/1/2022 23:37:40'!
PASSED!

!testRun: #CartTests #test06CanNotAddNegativeQuantityOfItem stamp: 'AS 11/1/2022 23:37:40'!
PASSED!

!testRun: #CartTests #test07CanNotAddZeroQuantityOfItem stamp: 'AS 11/1/2022 23:37:40'!
PASSED!

!testRun: #CartTests #test08CanGetItemsInCart stamp: 'AS 11/1/2022 23:37:40'!
PASSED!

!testRun: #CartTests #test09CanNotAddNonIntegerQuantityOfItem stamp: 'AS 11/1/2022 23:37:40'!
PASSED!

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 11/1/2022 23:37:40'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 11/1/2022 23:37:40'!
PASSED!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 11/1/2022 23:37:40'!
PASSED!

!testRun: #CashierTests #test04CanNotCheckoutWithExpiredCard stamp: 'AS 11/1/2022 23:37:40'!
PASSED!

----STARTUP---- (1 November 2022 23:47:25) as /home/andisici/Documents/2022/ing-2c2022/cuisTusLibros/CuisUniversity-5481.image!

!Cashier class methodsFor: 'instance creation' stamp: 'AS 11/1/2022 23:22:30'!
checkout: aCart chargingWith: aMerchantProcessor withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook onDate: aFixedGregorianDate 

	self assertIsNotEmpty: aCart.
	self assertCard: aCardToCharge isNotExpiredOn: aFixedGregorianDate.
	^self new initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook ! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 11/1/2022 23:22:30' prior: 50556953!
test02CanCheckoutCartWithItemsAndCorrectlyChargeCard
	
	| sale |
	
	cart add: self item1SoldByStore.
	cart add: self item2SoldByStore.
	
	Cashier checkout: cart chargingWith: merchantProcessorDouble withCard: creditCard usingPriceList: priceList registeringOn: salesBook onDate: FixedGregorianDate today.
	
	sale := salesBook first.
	self assert: creditCard equals: sale chargedCreditCard.
	self assert: (priceList at: self item1SoldByStore) + (priceList at: self item2SoldByStore) equals: sale chargedAmount.
	self assert: (Bag with: self item1SoldByStore with: self item2SoldByStore) equals: sale itemsSold.
	! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 11/1/2022 23:22:30' prior: 50556939!
test01CanNotCheckoutEmptyCart
	
	self should: [Cashier checkout: cart chargingWith: merchantProcessorDouble withCard: creditCard usingPriceList: priceList registeringOn: salesBook onDate: FixedGregorianDate today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier canNotCheckoutEmptyCartErrorMessage.].! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 11/1/2022 23:22:30' prior: 50556974!
test03CanNotCheckoutWithExpiredCard
	
	cart add: self item1SoldByStore.
	
	self should: [Cashier checkout: cart chargingWith: merchantProcessorDouble withCard: expiredCreditCard usingPriceList: priceList registeringOn: salesBook onDate: FixedGregorianDate today]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier canNotCheckoutWithExpiredCardErrorMessage.].! !

!methodRemoval: Cashier class #checkout:withCard:usingPriceList:registeringOn:onDate: stamp: 'AS 11/1/2022 23:47:33'!
checkout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook onDate: aFixedGregorianDate 

	self assertIsNotEmpty: aCart.
	self assertCard: aCardToCharge isNotExpiredOn: aFixedGregorianDate.
	^self new initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook !

----STARTUP---- (1 November 2022 23:48:10) as /home/andisici/Documents/2022/ing-2c2022/cuisTusLibros/CuisUniversity-5481.image!

!Cashier class methodsFor: 'instance creation' stamp: 'AS 11/1/2022 23:22:30'!
checkout: aCart chargingWith: aMerchantProcessor withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook onDate: aFixedGregorianDate 

	self assertIsNotEmpty: aCart.
	self assertCard: aCardToCharge isNotExpiredOn: aFixedGregorianDate.
	^self new initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook ! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 11/1/2022 23:22:30' prior: 50556953!
test02CanCheckoutCartWithItemsAndCorrectlyChargeCard
	
	| sale |
	
	cart add: self item1SoldByStore.
	cart add: self item2SoldByStore.
	
	Cashier checkout: cart chargingWith: merchantProcessorDouble withCard: creditCard usingPriceList: priceList registeringOn: salesBook onDate: FixedGregorianDate today.
	
	sale := salesBook first.
	self assert: creditCard equals: sale chargedCreditCard.
	self assert: (priceList at: self item1SoldByStore) + (priceList at: self item2SoldByStore) equals: sale chargedAmount.
	self assert: (Bag with: self item1SoldByStore with: self item2SoldByStore) equals: sale itemsSold.
	! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 11/1/2022 23:22:30' prior: 50556939!
test01CanNotCheckoutEmptyCart
	
	self should: [Cashier checkout: cart chargingWith: merchantProcessorDouble withCard: creditCard usingPriceList: priceList registeringOn: salesBook onDate: FixedGregorianDate today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier canNotCheckoutEmptyCartErrorMessage.].! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 11/1/2022 23:22:30' prior: 50556974!
test03CanNotCheckoutWithExpiredCard
	
	cart add: self item1SoldByStore.
	
	self should: [Cashier checkout: cart chargingWith: merchantProcessorDouble withCard: expiredCreditCard usingPriceList: priceList registeringOn: salesBook onDate: FixedGregorianDate today]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier canNotCheckoutWithExpiredCardErrorMessage.].! !

!methodRemoval: Cashier class #checkout:withCard:usingPriceList:registeringOn:onDate: stamp: 'AS 11/1/2022 23:48:16'!
checkout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook onDate: aFixedGregorianDate 

	self assertIsNotEmpty: aCart.
	self assertCard: aCardToCharge isNotExpiredOn: aFixedGregorianDate.
	^self new initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook !

----STARTUP---- (1 November 2022 23:49:17) as /home/andisici/Documents/2022/ing-2c2022/cuisTusLibros/CuisUniversity-5481.image!

!Cashier class methodsFor: 'instance creation' stamp: 'AS 11/1/2022 23:22:30'!
checkout: aCart chargingWith: aMerchantProcessor withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook onDate: aFixedGregorianDate 

	self assertIsNotEmpty: aCart.
	self assertCard: aCardToCharge isNotExpiredOn: aFixedGregorianDate.
	^self new initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook ! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 11/1/2022 23:22:30' prior: 50556953!
test02CanCheckoutCartWithItemsAndCorrectlyChargeCard
	
	| sale |
	
	cart add: self item1SoldByStore.
	cart add: self item2SoldByStore.
	
	Cashier checkout: cart chargingWith: merchantProcessorDouble withCard: creditCard usingPriceList: priceList registeringOn: salesBook onDate: FixedGregorianDate today.
	
	sale := salesBook first.
	self assert: creditCard equals: sale chargedCreditCard.
	self assert: (priceList at: self item1SoldByStore) + (priceList at: self item2SoldByStore) equals: sale chargedAmount.
	self assert: (Bag with: self item1SoldByStore with: self item2SoldByStore) equals: sale itemsSold.
	! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 11/1/2022 23:22:30' prior: 50556939!
test01CanNotCheckoutEmptyCart
	
	self should: [Cashier checkout: cart chargingWith: merchantProcessorDouble withCard: creditCard usingPriceList: priceList registeringOn: salesBook onDate: FixedGregorianDate today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier canNotCheckoutEmptyCartErrorMessage.].! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 11/1/2022 23:22:30' prior: 50556974!
test03CanNotCheckoutWithExpiredCard
	
	cart add: self item1SoldByStore.
	
	self should: [Cashier checkout: cart chargingWith: merchantProcessorDouble withCard: expiredCreditCard usingPriceList: priceList registeringOn: salesBook onDate: FixedGregorianDate today]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier canNotCheckoutWithExpiredCardErrorMessage.].! !

!methodRemoval: Cashier class #checkout:withCard:usingPriceList:registeringOn:onDate: stamp: 'AS 11/1/2022 23:49:18'!
checkout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook onDate: aFixedGregorianDate 

	self assertIsNotEmpty: aCart.
	self assertCard: aCardToCharge isNotExpiredOn: aFixedGregorianDate.
	^self new initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook !

TestCase subclass: #CashierTests
	instanceVariableNames: 'storeCatalog cart salesBook priceList creditCard expiredCreditCard merchantProcessorDouble'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #CashierTests
	instanceVariableNames: 'storeCatalog cart salesBook priceList creditCard expiredCreditCard merchantProcessorDouble'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTests category: 'TusLibros' stamp: 'AS 11/1/2022 23:49:59'!
TestCase subclass: #CashierTests
	instanceVariableNames: 'storeCatalog cart salesBook priceList creditCard expiredCreditCard merchantProcessorDouble'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTests category: 'TusLibros' stamp: 'AS 11/1/2022 23:51:12'!
TestCase subclass: #CashierTests
	instanceVariableNames: 'storeCatalog cart salesBook priceList validCreditCard expiredCreditCard merchantProcessorDouble'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 11/1/2022 23:51:12' prior: 50557985 overrides: 16961394!
setUp 
	
	| cardNumber |
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	cardNumber := '1234567812345678'.
	validCreditCard := CreditCard for: 'Homero Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current previous.
	expiredCreditCard := CreditCard for: 'Homero Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current next.! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 11/1/2022 23:51:12' prior: 50559023!
test01CanNotCheckoutEmptyCart
	
	self should: [Cashier checkout: cart chargingWith: merchantProcessorDouble withCard: validCreditCard usingPriceList: priceList registeringOn: salesBook onDate: FixedGregorianDate today ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier canNotCheckoutEmptyCartErrorMessage.].! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 11/1/2022 23:51:12' prior: 50559000!
test02CanCheckoutCartWithItemsAndCorrectlyChargeCard
	
	| sale |
	
	cart add: self item1SoldByStore.
	cart add: self item2SoldByStore.
	
	Cashier checkout: cart chargingWith: merchantProcessorDouble withCard: validCreditCard usingPriceList: priceList registeringOn: salesBook onDate: FixedGregorianDate today.
	
	sale := salesBook first.
	self assert: validCreditCard equals: sale chargedCreditCard.
	self assert: (priceList at: self item1SoldByStore) + (priceList at: self item2SoldByStore) equals: sale chargedAmount.
	self assert: (Bag with: self item1SoldByStore with: self item2SoldByStore) equals: sale itemsSold.
	! !

!classDefinition: #CashierTests category: 'TusLibros' stamp: 'AS 11/1/2022 23:52:23'!
TestCase subclass: #CashierTests
	instanceVariableNames: 'storeCatalog cart salesBook priceList validCreditCard expiredCreditCard merchantProcessorDouble stolenCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTests methodsFor: 'tests' stamp: 'AS 11/1/2022 23:52:21'!
test04CanNotCheckoutWithStolenCard
	
	cart add: self item1SoldByStore.
	
	self should: [Cashier checkout: cart chargingWith: merchantProcessorDouble withCard: stolenCreditCard usingPriceList: priceList registeringOn: salesBook onDate: FixedGregorianDate today]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier canNotCheckoutWithStolenCardErrorMessage.].! !

!testRun: #CashierTests #test04CanNotCheckoutWithStolenCard stamp: 'AS 11/1/2022 23:54:31'!
ERROR!
!CashierTests methodsFor: 'setup - tear down' stamp: 'AS 11/1/2022 23:54:51' prior: 50559103 overrides: 16961394!
setUp 
	
	| cardNumber |
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	cardNumber := '1234567812345678'.
	validCreditCard := CreditCard for: 'Homero Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current previous.
	expiredCreditCard := CreditCard for: 'Homero Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current next.
	stolenCreditCard := CreditCard for: 'Lisa Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current next.! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 11/1/2022 23:54:52'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 11/1/2022 23:54:52'!
PASSED!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 11/1/2022 23:54:52'!
PASSED!

!testRun: #CashierTests #test04CanNotCheckoutWithStolenCard stamp: 'AS 11/1/2022 23:54:52'!
ERROR!

!testRun: #CashierTests #test04CanNotCheckoutWithStolenCard stamp: 'AS 11/1/2022 23:54:52'!
ERROR!
!Cashier class methodsFor: 'error message' stamp: 'AS 11/1/2022 23:54:57'!
canNotCheckoutWithStolenCardErrorMessage
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error message' stamp: 'AS 11/1/2022 23:55:13' prior: 50559238!
canNotCheckoutWithStolenCardErrorMessage
	
	^'Can not checkout with stolen card!!'! !

!testRun: #CashierTests #test04CanNotCheckoutWithStolenCard stamp: 'AS 11/1/2022 23:55:14'!
FAILURE!
!CashierTests methodsFor: 'setup - tear down' stamp: 'AS 11/1/2022 23:55:23' prior: 50559195 overrides: 16961394!
setUp 
	
	| cardNumber |
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	cardNumber := '1234567812345678'.
	validCreditCard := CreditCard for: 'Homero Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current previous.
	expiredCreditCard := CreditCard for: 'Homero Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current next.
	stolenCreditCard := CreditCard for: 'Lisa Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current previous.! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 11/1/2022 23:55:23'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 11/1/2022 23:55:23'!
PASSED!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 11/1/2022 23:55:23'!
PASSED!

!testRun: #CashierTests #test04CanNotCheckoutWithStolenCard stamp: 'AS 11/1/2022 23:55:23'!
FAILURE!

!testRun: #CashierTests #test04CanNotCheckoutWithStolenCard stamp: 'AS 11/1/2022 23:55:23'!
FAILURE!
!Cashier methodsFor: 'initialization' stamp: 'AS 11/1/2022 23:56:23'!
initializeCheckout: aCart chargingWith: aMerchantProcessor withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook 
	
	| amountToDebit |
	
	cart := aCart.
	cardToCharge := aCardToCharge.
	priceList := aPriceList.
	salesBook := aSalesBook.
	amountToDebit := (cart content inject: 0 into: [:accumulatedAmount :anItem | accumulatedAmount + priceList at: anItem]) .
	self debit: amountToDebit fromCard: cardToCharge.
	salesBook add: (Sale of: cart content havingCharged: amountToDebit on: cardToCharge).! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'AS 11/1/2022 23:56:23' prior: 50558985!
checkout: aCart chargingWith: aMerchantProcessor withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook onDate: aFixedGregorianDate 

	self assertIsNotEmpty: aCart.
	self assertCard: aCardToCharge isNotExpiredOn: aFixedGregorianDate.
	^self new initializeCheckout: aCart chargingWith: aMerchantProcessor withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook ! !

!methodRemoval: Cashier #initializeCheckout:withCard:usingPriceList:registeringOn: stamp: 'AS 11/1/2022 23:56:23'!
initializeCheckout: aCart withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook 
	
	| amountToDebit |
	
	cart := aCart.
	cardToCharge := aCardToCharge.
	priceList := aPriceList.
	salesBook := aSalesBook.
	amountToDebit := (cart content inject: 0 into: [:accumulatedAmount :anItem | accumulatedAmount + priceList at: anItem]) .
	self debit: amountToDebit fromCard: cardToCharge.
	salesBook add: (Sale of: cart content havingCharged: amountToDebit on: cardToCharge).!
!Cashier methodsFor: 'initialization' stamp: 'AS 11/1/2022 23:56:34' prior: 50559298!
initializeCheckout: aCart chargingWith: aMerchantProcessor withCard: aCardToCharge usingPriceList: aPriceList registeringOn: aSalesBook 
	
	| amountToDebit |
	
	cart := aCart.
	cardToCharge := aCardToCharge.
	priceList := aPriceList.
	salesBook := aSalesBook.
	amountToDebit := (cart content inject: 0 into: [:accumulatedAmount :anItem | accumulatedAmount + priceList at: anItem]) .
	aMerchantProcessor debit: amountToDebit fromCard: cardToCharge.
	salesBook add: (Sale of: cart content havingCharged: amountToDebit on: cardToCharge).! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 11/1/2022 23:56:35'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 11/1/2022 23:56:35'!
ERROR!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 11/1/2022 23:56:35'!
PASSED!

!testRun: #CashierTests #test04CanNotCheckoutWithStolenCard stamp: 'AS 11/1/2022 23:56:35'!
ERROR!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 11/1/2022 23:56:38'!
ERROR!

!classDefinition: #MerchanProcessorDouble category: 'TusLibros' stamp: 'AS 11/1/2022 23:57:27'!
Object subclass: #MerchanProcessorDouble
	instanceVariableNames: 'stolenCards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTests methodsFor: 'setup - tear down' stamp: 'AS 11/1/2022 23:57:19' prior: 50559254 overrides: 16961394!
setUp 
	
	| cardNumber |
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	cardNumber := '1234567812345678'.
	validCreditCard := CreditCard for: 'Homero Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current previous.
	expiredCreditCard := CreditCard for: 'Homero Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current next.
	stolenCreditCard := CreditCard for: 'Lisa Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current previous.
	merchantProcessorDouble := MerchanProcessorDouble withStolenCards: (OrderedCollection with: stolenCreditCard).! !
!MerchanProcessorDouble class methodsFor: 'instance creation' stamp: 'AS 11/1/2022 23:57:38'!
withStolenCards: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithStolenCards: anOrderedCollection ! !
!MerchanProcessorDouble class methodsFor: 'instance creation' stamp: 'AS 11/1/2022 23:57:52' prior: 50559429!
withStolenCards: aCollectionOfStolenCards

	^self new initializeWithStolenCards: aCollectionOfStolenCards ! !

!classDefinition: #MerchanProcessorDouble category: 'TusLibros' stamp: 'AS 11/1/2022 23:58:00'!
Object subclass: #MerchanProcessorDouble
	instanceVariableNames: 'stolenCards collectionOfStolenCards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchanProcessorDouble methodsFor: 'initialization' stamp: 'AS 11/1/2022 23:58:00'!
initializeWithStolenCards: aCollectionOfStolenCards 
	self shouldBeImplemented.
	collectionOfStolenCards := aCollectionOfStolenCards.! !
!MerchanProcessorDouble methodsFor: 'initialization' stamp: 'AS 11/1/2022 23:58:04' prior: 50559454!
initializeWithStolenCards: aCollectionOfStolenCards 

	collectionOfStolenCards := aCollectionOfStolenCards.! !
!MerchanProcessorDouble methodsFor: 'initialization' stamp: 'AS 11/1/2022 23:58:08' prior: 50559462!
initializeWithStolenCards: aCollectionOfStolenCards 

	stolenCards := aCollectionOfStolenCards.! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 11/1/2022 23:58:09'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 11/1/2022 23:58:10'!
ERROR!
!MerchanProcessorDouble methodsFor: 'debit' stamp: 'AS 11/1/2022 23:58:17'!
debit: aSmallInteger fromCard: aCreditCard 
	self shouldBeImplemented.! !
!MerchanProcessorDouble methodsFor: 'debit' stamp: 'AS 11/1/2022 23:59:02' prior: 50559482!
debit: anAmountToDebit fromCard: aCreditCardToDebitFrom 

	(stolenCards includes: aCreditCardToDebitFrom) ifTrue: [Cashier canNotCheckoutWithStolenCardErrorSignal]

	
! !

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 11/1/2022 23:59:07'!
PASSED!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 11/1/2022 23:59:09'!
PASSED!

!testRun: #CashierTests #test04CanNotCheckoutWithStolenCard stamp: 'AS 11/1/2022 23:59:10'!
ERROR!
!Cashier class methodsFor: 'error signal' stamp: 'AS 11/1/2022 23:59:15'!
canNotCheckoutWithStolenCardErrorSignal
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error signal' stamp: 'AS 11/1/2022 23:59:24' prior: 50559506!
canNotCheckoutWithStolenCardErrorSignal

	self error: self canNotCheckoutWithStolenCardErrorMessage ! !

!testRun: #CashierTests #test04CanNotCheckoutWithStolenCard stamp: 'AS 11/1/2022 23:59:29'!
PASSED!

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 11/1/2022 23:59:31'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 11/1/2022 23:59:31'!
PASSED!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 11/1/2022 23:59:31'!
PASSED!

!testRun: #CashierTests #test04CanNotCheckoutWithStolenCard stamp: 'AS 11/1/2022 23:59:31'!
PASSED!

----QUIT----(1 November 2022 23:59:39) CuisUniversity-5481.image priorSource: 7255445!

----STARTUP---- (1 November 2022 23:59:44) as /home/andisici/Documents/2022/ing-2c2022/cuisTusLibros/CuisUniversity-5481.image!

!CashierTests methodsFor: 'setup - tear down' stamp: 'AS 11/2/2022 00:02:01' prior: 50559398 overrides: 16961394!
setUp 
	
	| cardNumber |
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	cardNumber := '1234567812345678'.
	validCreditCard := CreditCard for: 'Homero Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current previous.
	expiredCreditCard := CreditCard for: 'Bart Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current next.
	stolenCreditCard := CreditCard for: 'Lisa Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current previous.
	merchantProcessorDouble := MerchanProcessorDouble withStolenCards: (OrderedCollection with: stolenCreditCard).! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 11/2/2022 00:02:01'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 11/2/2022 00:02:01'!
PASSED!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 11/2/2022 00:02:01'!
PASSED!

!testRun: #CashierTests #test04CanNotCheckoutWithStolenCard stamp: 'AS 11/2/2022 00:02:01'!
PASSED!
!MerchanProcessorDouble methodsFor: 'debit' stamp: 'AS 11/2/2022 00:03:00'!
assertIsNotStolen: aCreditCardToDebitFrom

	^ (stolenCards includes: aCreditCardToDebitFrom) ifTrue: [Cashier canNotCheckoutWithStolenCardErrorSignal]! !
!MerchanProcessorDouble methodsFor: 'debit' stamp: 'AS 11/2/2022 00:03:00' prior: 50559488!
debit: anAmountToDebit fromCard: aCreditCardToDebitFrom 

	self assertIsNotStolen: aCreditCardToDebitFrom

	
! !

----SNAPSHOT----(2 November 2022 00:03:52) CuisUniversity-5481.image priorSource: 7292238!

!classDefinition: #CashierTests category: 'TusLibros' stamp: 'AS 11/2/2022 00:10:29'!
TestCase subclass: #CashierTests
	instanceVariableNames: 'storeCatalog cart salesBook priceList validCreditCard expiredCreditCard merchantProcessorDouble stolenCreditCard notEnoughBalanceCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTests methodsFor: 'tests' stamp: 'AS 11/2/2022 00:10:28'!
test05CanNotCheckoutWithCardWithNotEnoughBalance
	
	cart add: self item1SoldByStore.
	
	self should: [Cashier checkout: cart chargingWith: merchantProcessorDouble withCard: notEnoughBalanceCreditCard usingPriceList: priceList registeringOn: salesBook onDate: FixedGregorianDate today]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | self assert: anError messageText equals: Cashier canNotCheckoutIfCardDoesNotHaveEnoughBalanceErrorMessage.].! !

!testRun: #CashierTests #test05CanNotCheckoutWithCardWithNotEnoughBalance stamp: 'AS 11/2/2022 00:10:35'!
ERROR!
!CashierTests methodsFor: 'setup - tear down' stamp: 'AS 11/2/2022 00:14:51' prior: 50559541 overrides: 16961394!
setUp 
	
	| cardNumber |
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	cardNumber := '1234567812345678'.
	validCreditCard := CreditCard for: 'Homero Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current previous.
	expiredCreditCard := CreditCard for: 'Bart Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current next.
	stolenCreditCard := CreditCard for: 'Lisa Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current previous.
	notEnoughBalanceCreditCard := CreditCard for: 'Marge Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current previous.

	merchantProcessorDouble := MerchanProcessorDouble withStolenCards: (OrderedCollection with: stolenCreditCard).! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 11/2/2022 00:14:52'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 11/2/2022 00:14:52'!
PASSED!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 11/2/2022 00:14:52'!
PASSED!

!testRun: #CashierTests #test04CanNotCheckoutWithStolenCard stamp: 'AS 11/2/2022 00:14:52'!
PASSED!

!testRun: #CashierTests #test05CanNotCheckoutWithCardWithNotEnoughBalance stamp: 'AS 11/2/2022 00:14:52'!
FAILURE!

!testRun: #CashierTests #test05CanNotCheckoutWithCardWithNotEnoughBalance stamp: 'AS 11/2/2022 00:14:52'!
FAILURE!
!MerchanProcessorDouble class methodsFor: 'instance creation' stamp: 'AS 11/2/2022 00:16:04'!
withStolenCards: aCollectionOfStolenCards withNegativeBalanceCards: aCollectionOfNegativeBalanceCards 

	^self new initializeWithStolenCards: aCollectionOfStolenCards ! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'AS 11/2/2022 00:16:04' prior: 50559635 overrides: 16961394!
setUp 
	
	| cardNumber |
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	cardNumber := '1234567812345678'.
	validCreditCard := CreditCard for: 'Homero Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current previous.
	expiredCreditCard := CreditCard for: 'Bart Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current next.
	stolenCreditCard := CreditCard for: 'Lisa Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current previous.
	notEnoughBalanceCreditCard := CreditCard for: 'Marge Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current previous.

	merchantProcessorDouble := MerchanProcessorDouble withStolenCards: (OrderedCollection with: stolenCreditCard) withNegativeBalanceCards: ((OrderedCollection with: notEnoughBalanceCreditCard)).! !

!methodRemoval: MerchanProcessorDouble class #withStolenCards: stamp: 'AS 11/2/2022 00:16:04'!
withStolenCards: aCollectionOfStolenCards

	^self new initializeWithStolenCards: aCollectionOfStolenCards !
!CashierTests methodsFor: 'setup - tear down' stamp: 'AS 11/2/2022 00:16:24' prior: 50559700 overrides: 16961394!
setUp 
	
	| cardNumber |
	storeCatalog := OrderedCollection with: self item1SoldByStore with: self item2SoldByStore.
	cart := Cart withCatalog: storeCatalog.
	salesBook := OrderedCollection new.
	priceList := Dictionary newFromPairs: (Array with: self item1SoldByStore with: self item1Price with: self item2SoldByStore with: self item2Price).
	cardNumber := '1234567812345678'.
	validCreditCard := CreditCard for: 'Homero Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current previous.
	expiredCreditCard := CreditCard for: 'Bart Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current next.
	stolenCreditCard := CreditCard for: 'Lisa Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current previous.
	notEnoughBalanceCreditCard := CreditCard for: 'Marge Simpsons' withNumber: cardNumber withExpirationDate: GregorianMonthOfYear current previous.

	merchantProcessorDouble := MerchanProcessorDouble withStolenCards: (OrderedCollection with: stolenCreditCard) 
												withNegativeBalanceCards: (OrderedCollection with: notEnoughBalanceCreditCard).! !

!testRun: #CashierTests #test05CanNotCheckoutWithCardWithNotEnoughBalance stamp: 'AS 11/2/2022 00:16:32'!
FAILURE!

!classDefinition: #MerchanProcessorDouble category: 'TusLibros' stamp: 'AS 11/2/2022 00:20:21'!
Object subclass: #MerchanProcessorDouble
	instanceVariableNames: 'stolenCards collectionOfStolenCards negativeBalanceCards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchanProcessorDouble methodsFor: 'debit' stamp: 'AS 11/2/2022 00:20:20' prior: 50559593!
debit: anAmountToDebit fromCard: aCreditCardToDebitFrom 

	self assertIsNotStolen: aCreditCardToDebitFrom.
	(negativeBalanceCards includes: aCreditCardToDebitFrom) ifTrue: [Cashier canNotCheckoutIfCardDoesNotHaveEnoughBalanceErrorSignal]

	
! !

!testRun: #CashierTests #test05CanNotCheckoutWithCardWithNotEnoughBalance stamp: 'AS 11/2/2022 00:20:24'!
ERROR!
!MerchanProcessorDouble methodsFor: 'initialization' stamp: 'AS 11/2/2022 00:21:55'!
initializeWithStolenCards: aCollectionOfStolenCards withNegativeBalanceCards: aColecctionOfNegativeBalanceCards  

	stolenCards := aCollectionOfStolenCards.! !
!MerchanProcessorDouble class methodsFor: 'as yet unclassified' stamp: 'AS 11/2/2022 00:21:55' prior: 50559691!
withStolenCards: aCollectionOfStolenCards withNegativeBalanceCards: aCollectionOfNegativeBalanceCards 

	^self new initializeWithStolenCards: aCollectionOfStolenCards withNegativeBalanceCards: aCollectionOfNegativeBalanceCards ! !

!methodRemoval: MerchanProcessorDouble #initializeWithStolenCards: stamp: 'AS 11/2/2022 00:21:55'!
initializeWithStolenCards: aCollectionOfStolenCards 

	stolenCards := aCollectionOfStolenCards.!
!MerchanProcessorDouble methodsFor: 'initialization' stamp: 'AS 11/2/2022 00:22:29' prior: 50559812!
initializeWithStolenCards: aCollectionOfStolenCards withNegativeBalanceCards: aCollectionOfNegativeBalanceCards  

	stolenCards := aCollectionOfStolenCards.
	negativeBalanceCards := aCollectionOfNegativeBalanceCards.! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 11/2/2022 00:22:31'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 11/2/2022 00:22:31'!
PASSED!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 11/2/2022 00:22:31'!
PASSED!

!testRun: #CashierTests #test04CanNotCheckoutWithStolenCard stamp: 'AS 11/2/2022 00:22:31'!
PASSED!

!testRun: #CashierTests #test05CanNotCheckoutWithCardWithNotEnoughBalance stamp: 'AS 11/2/2022 00:22:31'!
ERROR!

!testRun: #CashierTests #test05CanNotCheckoutWithCardWithNotEnoughBalance stamp: 'AS 11/2/2022 00:22:31'!
ERROR!
!Cashier class methodsFor: 'error signal' stamp: 'AS 11/2/2022 00:22:38'!
canNotCheckoutIfCardDoesNotHaveEnoughBalanceErrorSignal
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error signal' stamp: 'AS 11/2/2022 00:23:49' prior: 50559868!
canNotCheckoutIfCardDoesNotHaveEnoughBalanceErrorSignal
	
	self error: self canNotCheckoutIfCardDoesNotHaveEnoughBalanceErrorMessage! !

!testRun: #CashierTests #test05CanNotCheckoutWithCardWithNotEnoughBalance stamp: 'AS 11/2/2022 00:23:50'!
ERROR!
!Cashier class methodsFor: 'error message' stamp: 'AS 11/2/2022 00:23:55'!
canNotCheckoutIfCardDoesNotHaveEnoughBalanceErrorMessage
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error message' stamp: 'AS 11/2/2022 00:25:10' prior: 50559885!
canNotCheckoutIfCardDoesNotHaveEnoughBalanceErrorMessage
	
	^'Can not checkout, card does not have enough balance!!'! !

!testRun: #CashierTests #test05CanNotCheckoutWithCardWithNotEnoughBalance stamp: 'AS 11/2/2022 00:25:10'!
PASSED!

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 11/2/2022 00:25:15'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 11/2/2022 00:25:15'!
PASSED!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 11/2/2022 00:25:15'!
PASSED!

!testRun: #CashierTests #test04CanNotCheckoutWithStolenCard stamp: 'AS 11/2/2022 00:25:15'!
PASSED!

!testRun: #CashierTests #test05CanNotCheckoutWithCardWithNotEnoughBalance stamp: 'AS 11/2/2022 00:25:15'!
PASSED!
!MerchanProcessorDouble methodsFor: 'debit' stamp: 'AS 11/2/2022 00:30:46'!
assertHasEnoughBalance: aCreditCardToDebitFrom

	^ (negativeBalanceCards includes: aCreditCardToDebitFrom) ifTrue: [Cashier canNotCheckoutIfCardDoesNotHaveEnoughBalanceErrorSignal]! !
!MerchanProcessorDouble methodsFor: 'debit' stamp: 'AS 11/2/2022 00:30:46' prior: 50559798!
debit: anAmountToDebit fromCard: aCreditCardToDebitFrom 

	self assertIsNotStolen: aCreditCardToDebitFrom.
	self assertHasEnoughBalance: aCreditCardToDebitFrom

	
! !

!testRun: #CashierTests #test01CanNotCheckoutEmptyCart stamp: 'AS 11/2/2022 00:30:49'!
PASSED!

!testRun: #CashierTests #test02CanCheckoutCartWithItemsAndCorrectlyChargeCard stamp: 'AS 11/2/2022 00:30:49'!
PASSED!

!testRun: #CashierTests #test03CanNotCheckoutWithExpiredCard stamp: 'AS 11/2/2022 00:30:49'!
PASSED!

!testRun: #CashierTests #test04CanNotCheckoutWithStolenCard stamp: 'AS 11/2/2022 00:30:49'!
PASSED!

!testRun: #CashierTests #test05CanNotCheckoutWithCardWithNotEnoughBalance stamp: 'AS 11/2/2022 00:30:49'!
PASSED!

----SNAPSHOT----(2 November 2022 00:30:57) CuisUniversity-5481.image priorSource: 7294352!