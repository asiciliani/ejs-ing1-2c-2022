

----QUIT----(11 September 2022 19:10:09) CuisUniversity-5481.image priorSource: 2810882!

----STARTUP---- (11 September 2022 19:10:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5481.image!


----QUIT----(11 September 2022 19:10:10) CuisUniversity-5481.image priorSource: 7059465!

----STARTUP---- (20 October 2022 14:44:22) as /home/andisici/Documents/2022/ing-2c2022/cuisPortfolio2/CuisUniversity-5481.image!


----End fileIn of /home/andisici/Documents/2022/ing-2c2022/cuisPortfolio (copy)/Portfolio-Ejercicio.st----!

!classRemoval: #ReceptiveAccount stamp: 'AS 10/20/2022 14:46:25'!
FinancialAccount subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'AS 10/20/2022 14:46:26'!
FinancialAccount subclass: #Portfolio
	instanceVariableNames: 'financialAccounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #FinancialAccount stamp: 'AS 10/20/2022 14:46:26'!
Object subclass: #FinancialAccount
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'AS 10/20/2022 14:46:26'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'AS 10/20/2022 14:46:27'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'AS 10/20/2022 14:46:27'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'AS 10/20/2022 14:46:27'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'AS 10/20/2022 14:46:28'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of /home/andisici/Documents/2022/ing-2c2022/cuisPortfolio2/Portfolio-Solucion.st----!

TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'AS 10/20/2022 14:58:19'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'AS 10/20/2022 14:59:58'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'account1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'AS 10/20/2022 15:00:00'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'account1 account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'nil' stamp: 'AS 10/20/2022 14:59:55'!
test01CanTransferBetweenTwoAccounts

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AS 10/20/2022 15:03:23'!
test01BalanceIsAffectedAfterTransfer

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	account1 transfer: 20 to: account2.
	
	self assert: -20 equals: account1 balance.
	self assert: 20 equals: account1 balance.! !

!methodRemoval: TransferTest #test01CanTransferBetweenTwoAccounts stamp: 'AS 10/20/2022 15:03:27'!
test01CanTransferBetweenTwoAccounts

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	!

!testRun: #TransferTest #test01BalanceIsAffectedAfterTransfer stamp: 'AS 10/20/2022 15:03:33'!
ERROR!
!ReceptiveAccount methodsFor: 'transfers' stamp: 'AS 10/20/2022 15:03:49'!
transfer: aSmallInteger to: aReceptiveAccount 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'transfers' stamp: 'AS 10/20/2022 15:05:32' prior: 50553571!
transfer: anAmountToTransfer to: aReceptiveAccount 
	self register: (Withdraw for: anAmountToTransfer).
	aReceptiveAccount register: (Deposit for: anAmountToTransfer).! !

!testRun: #TransferTest #test01BalanceIsAffectedAfterTransfer stamp: 'AS 10/20/2022 15:05:43'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AS 10/20/2022 15:05:57' prior: 50553551!
test01BalanceIsAffectedAfterTransfer

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	account1 transfer: 20 to: account2.
	
	self assert: -20 equals: account1 balance.
	self assert: 20 equals: account2 balance.! !

!testRun: #TransferTest #test01BalanceIsAffectedAfterTransfer stamp: 'AS 10/20/2022 15:05:58'!
PASSED!

!testRun: #TransferTest #test01BalanceIsAffectedAfterTransfer stamp: 'AS 10/20/2022 15:05:58'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AS 10/20/2022 15:10:43'!
test02CanNotTransferFromAndToSameAccount

	account1 := ReceptiveAccount new.
	
	self should: [account1 transfer: 20 to: account1.]
		 raise: Error - MessageNotUnderstood 
		 withExceptionDo: [:anError | self assert: 0 equals: account1 balance.
							    self assert: ReceptiveAccount canNotTransferFromAndToSameAccountErrorMessage equals: anError messageText].! !

!testRun: #TransferTest #test02CanNotTransferFromAndToSameAccount stamp: 'AS 10/20/2022 15:10:48'!
FAILURE!
!ReceptiveAccount methodsFor: 'transfers' stamp: 'AS 10/20/2022 15:11:47' prior: 50553577!
transfer: anAmountToTransfer to: aReceptiveAccount
	aReceptiveAccount = self ifTrue: [self error: self class canNotTransferFromAndToSameAccountErrorMessage].
	self register: (Withdraw for: anAmountToTransfer).
	aReceptiveAccount register: (Deposit for: anAmountToTransfer).! !

!testRun: #TransferTest #test02CanNotTransferFromAndToSameAccount stamp: 'AS 10/20/2022 15:11:49'!
ERROR!
!ReceptiveAccount class methodsFor: 'error message' stamp: 'AS 10/20/2022 15:12:05'!
canNotTransferFromAndToSameAccountErrorMessage
	self shouldBeImplemented.! !
!ReceptiveAccount class methodsFor: 'error message' stamp: 'AS 10/20/2022 15:12:38' prior: 50553639!
canNotTransferFromAndToSameAccountErrorMessage
	^'Can not transfer from and to same account!!'! !

!testRun: #TransferTest #test02CanNotTransferFromAndToSameAccount stamp: 'AS 10/20/2022 15:12:39'!
PASSED!

!testRun: #TransferTest #test01BalanceIsAffectedAfterTransfer stamp: 'AS 10/20/2022 15:12:39'!
PASSED!

!testRun: #TransferTest #test02CanNotTransferFromAndToSameAccount stamp: 'AS 10/20/2022 15:12:39'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AS 10/20/2022 15:16:21'!
test02OriginAndDestinyHaveRegisteredWithdrawAndDepositRespectivelyAfterTransfer

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	account1 transfer: 20 to: account2.
	
	self assert: (account1 hasRegistered: (Withdraw for: 20)).
	self assert: (account2 hasRegistered: (Deposit for: 20)).
! !

!testRun: #TransferTest #test02OriginAndDestinyHaveRegisteredWithdrawAndDepositRespectivelyAfterTransfer stamp: 'AS 10/20/2022 15:16:23'!
FAILURE!

^ transactions includes: aTransaction!

!methodRemoval: TransferTest #test02OriginAndDestinyHaveRegisteredWithdrawAndDepositRespectivelyAfterTransfer stamp: 'AS 10/20/2022 15:37:50'!
test02OriginAndDestinyHaveRegisteredWithdrawAndDepositRespectivelyAfterTransfer

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	account1 transfer: 20 to: account2.
	
	self assert: (account1 hasRegistered: (Withdraw for: 20)).
	self assert: (account2 hasRegistered: (Deposit for: 20)).
!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'AS 10/20/2022 15:39:29'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'account1 account2 transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'AS 10/20/2022 15:39:46'!
Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AS 10/20/2022 15:39:27'!
test03CanNavigateToAndFromBothTransferLegs

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer for: 20 from: account1 to: account2.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AS 10/20/2022 15:42:34' prior: 50553709!
test03CanNavigateToAndFromBothTransferLegs

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer for: 20 from: account1 to: account2.
	
	self assert: (transfer destinyLeg) transfer equals: (transfer originLeg) transfer.! !

!testRun: #TransferTest #test03CanNavigateToAndFromBothTransferLegs stamp: 'AS 10/20/2022 15:42:36'!
ERROR!
!Transfer class methodsFor: 'instance creation' stamp: 'AS 10/20/2022 15:42:43'!
for: aSmallInteger from: aReceptiveAccount to: aReceptiveAccount3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aSmallInteger from: aReceptiveAccount to: aReceptiveAccount3 ! !
!Transfer class methodsFor: 'instance creation' stamp: 'AS 10/20/2022 15:43:25' prior: 50553733!
for: anAmountToTransfer from: anOriginReceptiveAccount to: aDestinyReceptiveAccount

	^self new initializeFor: anAmountToTransfer from: anOriginReceptiveAccount to: aDestinyReceptiveAccount. ! !

!testRun: #TransferTest #test03CanNavigateToAndFromBothTransferLegs stamp: 'AS 10/20/2022 15:43:26'!
ERROR!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'AS 10/20/2022 15:43:37'!
Object subclass: #Transfer
	instanceVariableNames: 'amountToTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'AS 10/20/2022 15:43:37'!
Object subclass: #Transfer
	instanceVariableNames: 'amountToTransfer originReceptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'AS 10/20/2022 15:43:37'!
Object subclass: #Transfer
	instanceVariableNames: 'amountToTransfer originReceptiveAccount destinyReceptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'instance creation' stamp: 'AS 10/20/2022 15:43:37'!
initializeFor: anAmountToTransfer from: anOriginReceptiveAccount to: aDestinyReceptiveAccount 
	self shouldBeImplemented.
	amountToTransfer := anAmountToTransfer.
	originReceptiveAccount := anOriginReceptiveAccount.
	destinyReceptiveAccount := aDestinyReceptiveAccount.! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'AS 10/20/2022 15:44:52'!
Object subclass: #Transfer
	instanceVariableNames: 'amountToTransfer originReceptiveAccount destinyReceptiveAccount transferAmount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'AS 10/20/2022 15:44:53'!
Object subclass: #Transfer
	instanceVariableNames: 'amountToTransfer originReceptiveAccount destinyReceptiveAccount transferAmount originLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'AS 10/20/2022 15:44:55'!
Object subclass: #Transfer
	instanceVariableNames: 'amountToTransfer originReceptiveAccount destinyReceptiveAccount transferAmount originLeg destinyLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'instance creation' stamp: 'AS 10/20/2022 15:44:50' prior: 50553781!
initializeFor: anAmountToTransfer from: anOriginReceptiveAccount to: aDestinyReceptiveAccount 
	transferAmount := anAmountToTransfer.
	originLeg := anOriginReceptiveAccount.
	destinyLeg := aDestinyReceptiveAccount.! !

!testRun: #TransferTest #test03CanNavigateToAndFromBothTransferLegs stamp: 'AS 10/20/2022 15:44:59'!
ERROR!
!Transfer methodsFor: 'legs' stamp: 'AS 10/20/2022 15:45:12'!
destinyLeg
	self shouldBeImplemented.
	^destinyLeg! !
!Transfer methodsFor: 'legs' stamp: 'AS 10/20/2022 15:45:18' prior: 50553835!
destinyLeg
	^destinyLeg! !

!testRun: #TransferTest #test03CanNavigateToAndFromBothTransferLegs stamp: 'AS 10/20/2022 15:45:19'!
ERROR!
!Transfer methodsFor: 'instance creation' stamp: 'AS 10/20/2022 15:49:01' prior: 50553822!
initializeFor: anAmountToTransfer from: anOriginReceptiveAccount to: aDestinyReceptiveAccount 
	transferAmount := anAmountToTransfer.
	originLeg := Withdraw register: transferAmount on: anOriginReceptiveAccount.
	destinyLeg := Deposit register: transferAmount on: aDestinyReceptiveAccount.! !

!testRun: #TransferTest #test01BalanceIsAffectedAfterTransfer stamp: 'AS 10/20/2022 15:50:55'!
PASSED!

!testRun: #TransferTest #test02CanNotTransferFromAndToSameAccount stamp: 'AS 10/20/2022 15:50:55'!
PASSED!

!testRun: #TransferTest #test03CanNavigateToAndFromBothTransferLegs stamp: 'AS 10/20/2022 15:50:55'!
ERROR!

!testRun: #TransferTest #test03CanNavigateToAndFromBothTransferLegs stamp: 'AS 10/20/2022 15:50:55'!
ERROR!

!testRun: #TransferTest #test03CanNavigateToAndFromBothTransferLegs stamp: 'AS 10/20/2022 15:53:43'!
ERROR!
!AccountTransaction methodsFor: 'transfer' stamp: 'AS 10/20/2022 15:58:41'!
transfer
	self shouldBeImplemented.! !

!methodRemoval: AccountTransaction #transfer stamp: 'AS 10/20/2022 16:00:24'!
transfer
	self shouldBeImplemented.!

!classDefinition: #TransferLeg category: 'Portfolio-Solucion' stamp: 'AS 10/20/2022 16:02:14'!
Object subclass: #TransferLeg
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'instance creation' stamp: 'AS 10/20/2022 16:01:58' prior: 50553848!
initializeFor: anAmountToTransfer from: anOriginReceptiveAccount to: aDestinyReceptiveAccount 
	transferAmount := anAmountToTransfer.
	originLeg := TransferLeg withTransaction: (Withdraw register: transferAmount on: anOriginReceptiveAccount).
	destinyLeg := TransferLeg withTransaction: (Deposit register: transferAmount on: aDestinyReceptiveAccount).! !

!testRun: #TransferTest #test01BalanceIsAffectedAfterTransfer stamp: 'AS 10/20/2022 16:02:19'!
PASSED!

!testRun: #TransferTest #test02CanNotTransferFromAndToSameAccount stamp: 'AS 10/20/2022 16:02:19'!
PASSED!

!testRun: #TransferTest #test03CanNavigateToAndFromBothTransferLegs stamp: 'AS 10/20/2022 16:02:19'!
ERROR!

!testRun: #TransferTest #test03CanNavigateToAndFromBothTransferLegs stamp: 'AS 10/20/2022 16:02:19'!
ERROR!
!TransferLeg class methodsFor: 'instance creation' stamp: 'AS 10/20/2022 16:02:27'!
withTransaction: aWithdraw 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithTransaction: aWithdraw ! !
!TransferLeg class methodsFor: 'instance creation' stamp: 'AS 10/20/2022 16:02:42' prior: 50553921!
withTransaction: anAccountTransaction
	^self new initializeWithTransaction: anAccountTransaction. ! !

!testRun: #TransferTest #test03CanNavigateToAndFromBothTransferLegs stamp: 'AS 10/20/2022 16:02:56'!
ERROR!

!classDefinition: #TransferLeg category: 'Portfolio-Solucion' stamp: 'AS 10/20/2022 16:03:06'!
Object subclass: #TransferLeg
	instanceVariableNames: 'transfer accountTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferLeg methodsFor: 'instance creation' stamp: 'AS 10/20/2022 16:03:06'!
initializeWithTransaction: anAccountTransaction 
	self shouldBeImplemented.
	accountTransaction := anAccountTransaction.! !

!classDefinition: #TransferLeg category: 'Portfolio-Solucion' stamp: 'AS 10/20/2022 16:03:45'!
Object subclass: #TransferLeg
	instanceVariableNames: 'transfer accountTransaction transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferLeg methodsFor: 'instance creation' stamp: 'AS 10/20/2022 16:03:43' prior: 50553948!
initializeWithTransaction: anAccountTransaction
	transaction := anAccountTransaction.! !

!testRun: #TransferTest #test03CanNavigateToAndFromBothTransferLegs stamp: 'AS 10/20/2022 16:03:49'!
ERROR!
!TransferLeg methodsFor: 'transfer' stamp: 'AS 10/20/2022 16:03:58'!
transfer
	self shouldBeImplemented.
	^transfer! !
!TransferLeg methodsFor: 'transfer' stamp: 'AS 10/20/2022 16:04:03' prior: 50553973!
transfer
	^transfer! !

!testRun: #TransferTest #test03CanNavigateToAndFromBothTransferLegs stamp: 'AS 10/20/2022 16:04:05'!
ERROR!
!Transfer methodsFor: 'legs' stamp: 'AS 10/20/2022 16:04:25'!
originLeg
	self shouldBeImplemented.
	^originLeg! !
!Transfer methodsFor: 'legs' stamp: 'AS 10/20/2022 16:04:29' prior: 50553985!
originLeg
	^originLeg! !

!testRun: #TransferTest #test03CanNavigateToAndFromBothTransferLegs stamp: 'AS 10/20/2022 16:04:31'!
PASSED!

!testRun: #TransferTest #test01BalanceIsAffectedAfterTransfer stamp: 'AS 10/20/2022 16:04:47'!
PASSED!

!testRun: #TransferTest #test02CanNotTransferFromAndToSameAccount stamp: 'AS 10/20/2022 16:04:47'!
PASSED!

!testRun: #TransferTest #test03CanNavigateToAndFromBothTransferLegs stamp: 'AS 10/20/2022 16:04:47'!
PASSED!

!testRun: #TransferTest #test01BalanceIsAffectedAfterTransfer stamp: 'AS 10/20/2022 16:05:04'!
PASSED!

!testRun: #TransferTest #test02CanNotTransferFromAndToSameAccount stamp: 'AS 10/20/2022 16:05:04'!
PASSED!

!testRun: #TransferTest #test03CanNavigateToAndFromBothTransferLegs stamp: 'AS 10/20/2022 16:05:04'!
PASSED!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'AS 10/20/2022 16:05:35'!
Object subclass: #Transfer
	instanceVariableNames: 'originReceptiveAccount destinyReceptiveAccount transferAmount originLeg destinyLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'AS 10/20/2022 16:05:35'!
Object subclass: #Transfer
	instanceVariableNames: 'destinyReceptiveAccount transferAmount originLeg destinyLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'AS 10/20/2022 16:05:35'!
Object subclass: #Transfer
	instanceVariableNames: 'transferAmount originLeg destinyLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferLeg category: 'Portfolio-Solucion' stamp: 'AS 10/20/2022 16:05:42'!
Object subclass: #TransferLeg
	instanceVariableNames: 'transfer transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferLeg methodsFor: 'transfer' stamp: 'AS 10/20/2022 16:05:58'!
associatedTransfer
	^transfer! !

!methodRemoval: TransferLeg #transfer stamp: 'AS 10/20/2022 16:05:58'!
transfer
	^transfer!

----SNAPSHOT----(20 October 2022 16:06:24) CuisUniversity-5481.image priorSource: 7059698!

!classRenamed: #TransferTest as: #TransfersTest stamp: 'AS 10/20/2022 16:07:48'!
Smalltalk renameClassNamed: #TransferTest as: #TransfersTest!

----SNAPSHOT----(20 October 2022 16:08:06) CuisUniversity-5481.image priorSource: 7117053!

!testRun: #TransfersTest #test01BalanceIsAffectedAfterTransfer stamp: 'AS 10/20/2022 16:11:57'!
PASSED!

!testRun: #TransfersTest #test01BalanceIsAffectedAfterTransfer stamp: 'AS 10/20/2022 16:11:57'!
PASSED!

!testRun: #TransfersTest #test02CanNotTransferFromAndToSameAccount stamp: 'AS 10/20/2022 16:11:57'!
PASSED!

!testRun: #TransfersTest #test03CanNavigateToAndFromBothTransferLegs stamp: 'AS 10/20/2022 16:11:57'!
ERROR!

!testRun: #TransfersTest #test03CanNavigateToAndFromBothTransferLegs stamp: 'AS 10/20/2022 16:11:57'!
ERROR!

!testRun: #TransfersTest #test03CanNavigateToAndFromBothTransferLegs stamp: 'AS 10/20/2022 16:12:14'!
ERROR!
!TransfersTest methodsFor: 'as yet unclassified' stamp: 'AS 10/20/2022 16:12:28' prior: 50553718!
test03CanNavigateToAndFromBothTransferLegs

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer for: 20 from: account1 to: account2.
	
	self assert: (transfer destinyLeg) associatedTransfer equals: (transfer originLeg) associatedTransfer.! !

!testRun: #TransfersTest #test03CanNavigateToAndFromBothTransferLegs stamp: 'AS 10/20/2022 16:12:29'!
PASSED!

!testRun: #TransfersTest #test01BalanceIsAffectedAfterTransfer stamp: 'AS 10/20/2022 16:12:29'!
PASSED!

!testRun: #TransfersTest #test02CanNotTransferFromAndToSameAccount stamp: 'AS 10/20/2022 16:12:29'!
PASSED!

!testRun: #TransfersTest #test03CanNavigateToAndFromBothTransferLegs stamp: 'AS 10/20/2022 16:12:29'!
PASSED!
!TransfersTest methodsFor: 'as yet unclassified' stamp: 'AS 10/20/2022 16:12:58' prior: 50553589!
test01BalanceIsAffectedAfterTransfer

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer for: 20 from: account1 to: account2.
	
	self assert: -20 equals: account1 balance.
	self assert: 20 equals: account2 balance.! !

!testRun: #TransfersTest #test01BalanceIsAffectedAfterTransfer stamp: 'AS 10/20/2022 16:12:58'!
PASSED!

!testRun: #TransfersTest #test01BalanceIsAffectedAfterTransfer stamp: 'AS 10/20/2022 16:12:58'!
PASSED!

!testRun: #TransfersTest #test02CanNotTransferFromAndToSameAccount stamp: 'AS 10/20/2022 16:12:58'!
PASSED!

!testRun: #TransfersTest #test03CanNavigateToAndFromBothTransferLegs stamp: 'AS 10/20/2022 16:12:58'!
PASSED!
!TransfersTest methodsFor: 'as yet unclassified' stamp: 'AS 10/20/2022 16:13:07' prior: 50553606!
test02CanNotTransferFromAndToSameAccount

	account1 := ReceptiveAccount new.
	
	self should: [Transfer for: 20 from: account1 to: account2.]
		 raise: Error - MessageNotUnderstood 
		 withExceptionDo: [:anError | self assert: 0 equals: account1 balance.
							    self assert: ReceptiveAccount canNotTransferFromAndToSameAccountErrorMessage equals: anError messageText].! !

!testRun: #TransfersTest #test02CanNotTransferFromAndToSameAccount stamp: 'AS 10/20/2022 16:13:07'!
ERROR!
!TransfersTest methodsFor: 'as yet unclassified' stamp: 'AS 10/20/2022 16:13:21' prior: 50554141!
test02CanNotTransferFromAndToSameAccount

	account1 := ReceptiveAccount new.
	
	self should: [Transfer for: 20 from: account1 to: account1.]
		 raise: Error - MessageNotUnderstood 
		 withExceptionDo: [:anError | self assert: 0 equals: account1 balance.
							    self assert: ReceptiveAccount canNotTransferFromAndToSameAccountErrorMessage equals: anError messageText].! !

!testRun: #TransfersTest #test02CanNotTransferFromAndToSameAccount stamp: 'AS 10/20/2022 16:13:22'!
FAILURE!

!testRun: #TransfersTest #test02CanNotTransferFromAndToSameAccount stamp: 'AS 10/20/2022 16:13:46'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'AS 10/20/2022 16:14:16' prior: 50553744!
for: anAmountToTransfer from: anOriginReceptiveAccount to: aDestinyReceptiveAccount
	anOriginReceptiveAccount = aDestinyReceptiveAccount ifTrue: [self error: self class canNotTransferFromAndToSameAccountErrorMessage].
	^self new initializeFor: anAmountToTransfer from: anOriginReceptiveAccount to: aDestinyReceptiveAccount. ! !

!testRun: #TransfersTest #test02CanNotTransferFromAndToSameAccount stamp: 'AS 10/20/2022 16:14:18'!
ERROR!
!Transfer class methodsFor: 'instance creation' stamp: 'AS 10/20/2022 16:14:59' prior: 50554182!
for: anAmountToTransfer from: anOriginReceptiveAccount to: aDestinyReceptiveAccount
	anOriginReceptiveAccount = aDestinyReceptiveAccount ifTrue: [self error: self canNotTransferFromAndToSameAccountErrorMessage].
	^self new initializeFor: anAmountToTransfer from: anOriginReceptiveAccount to: aDestinyReceptiveAccount. ! !

!testRun: #TransfersTest #test02CanNotTransferFromAndToSameAccount stamp: 'AS 10/20/2022 16:15:10'!
ERROR!
!Transfer class methodsFor: 'error message' stamp: 'AS 10/20/2022 16:15:17'!
canNotTransferFromAndToSameAccountErrorMessage
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'error message' stamp: 'AS 10/20/2022 16:15:22' prior: 50554215!
canNotTransferFromAndToSameAccountErrorMessage
	^'Can not transfer from and to same account!!'! !

!testRun: #TransfersTest #test02CanNotTransferFromAndToSameAccount stamp: 'AS 10/20/2022 16:15:23'!
PASSED!

!testRun: #TransfersTest #test01BalanceIsAffectedAfterTransfer stamp: 'AS 10/20/2022 16:15:23'!
PASSED!

!testRun: #TransfersTest #test02CanNotTransferFromAndToSameAccount stamp: 'AS 10/20/2022 16:15:23'!
PASSED!

!testRun: #TransfersTest #test03CanNavigateToAndFromBothTransferLegs stamp: 'AS 10/20/2022 16:15:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AS 10/20/2022 16:15:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AS 10/20/2022 16:15:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AS 10/20/2022 16:15:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AS 10/20/2022 16:15:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AS 10/20/2022 16:15:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AS 10/20/2022 16:15:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AS 10/20/2022 16:15:33'!
PASSED!

!methodRemoval: ReceptiveAccount #transfer:to: stamp: 'AS 10/20/2022 16:15:42'!
transfer: anAmountToTransfer to: aReceptiveAccount
	aReceptiveAccount = self ifTrue: [self error: self class canNotTransferFromAndToSameAccountErrorMessage].
	self register: (Withdraw for: anAmountToTransfer).
	aReceptiveAccount register: (Deposit for: anAmountToTransfer).!
!TransfersTest methodsFor: 'as yet unclassified' stamp: 'AS 10/20/2022 16:16:11' prior: 50554160!
test02CanNotTransferFromAndToSameAccount

	account1 := ReceptiveAccount new.
	
	self should: [Transfer for: 20 from: account1 to: account1.]
		 raise: Error - MessageNotUnderstood 
		 withExceptionDo: [:anError | self assert: 0 equals: account1 balance.
							    self assert: Transfer canNotTransferFromAndToSameAccountErrorMessage equals: anError messageText].! !

!testRun: #TransfersTest #test02CanNotTransferFromAndToSameAccount stamp: 'AS 10/20/2022 16:16:12'!
PASSED!

!testRun: #TransfersTest #test01BalanceIsAffectedAfterTransfer stamp: 'AS 10/20/2022 16:16:12'!
PASSED!

!testRun: #TransfersTest #test02CanNotTransferFromAndToSameAccount stamp: 'AS 10/20/2022 16:16:12'!
PASSED!

!testRun: #TransfersTest #test03CanNavigateToAndFromBothTransferLegs stamp: 'AS 10/20/2022 16:16:12'!
PASSED!

!methodRemoval: ReceptiveAccount class #canNotTransferFromAndToSameAccountErrorMessage stamp: 'AS 10/20/2022 16:16:17'!
canNotTransferFromAndToSameAccountErrorMessage
	^'Can not transfer from and to same account!!'!

----SNAPSHOT----(20 October 2022 16:16:42) CuisUniversity-5481.image priorSource: 7117289!